
spi_debug.elf:     file format elf32-littlenios2
spi_debug.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010224

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00005634 memsz 0x00005634 flags r-x
    LOAD off    0x00006654 vaddr 0x00015654 paddr 0x00016dc0 align 2**12
         filesz 0x0000176c memsz 0x0000176c flags rw-
    LOAD off    0x0000052c vaddr 0x0001852c paddr 0x0001852c align 2**12
         filesz 0x00000000 memsz 0x00000428 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000204  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000053f4  00010224  00010224  00001224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000003c  00015618  00015618  00006618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000176c  00015654  00016dc0  00006654  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000428  0001852c  0001852c  0000852c  2**2
                  ALLOC, SMALL_DATA
  6 .RAM          00000000  00018954  00018954  00007dc0  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  00007dc0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000a30  00000000  00000000  00007df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   0001473c  00000000  00000000  00008820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00006721  00000000  00000000  0001cf5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   00005e50  00000000  00000000  0002367d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  00001528  00000000  00000000  000294d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    00001a78  00000000  00000000  0002a9f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_alt_sim_info 00000010  00000000  00000000  0002c470  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000070  00000000  00000000  0002c480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005df  00000000  00000000  0002c4f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line_str 0000135b  00000000  00000000  0002cacf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loclists 00004169  00000000  00000000  0002de2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .thread_model 00000003  00000000  00000000  00034453  2**0
                  CONTENTS, READONLY
 20 .cpu          00000004  00000000  00000000  00034456  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  0003445a  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  0003445b  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000005  00000000  00000000  0003445c  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000005  00000000  00000000  00034461  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000005  00000000  00000000  00034466  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000015  00000000  00000000  0003446b  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000041  00000000  00000000  00034480  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010224 l    d  .text	00000000 .text
00015618 l    d  .rodata	00000000 .rodata
00015654 l    d  .rwdata	00000000 .rwdata
0001852c l    d  .bss	00000000 .bss
00018954 l    d  .RAM	00000000 .RAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    df *ABS*	00000000 crt0.o
0001025c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00010278 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0001041c l     F .text	00000034 alt_dev_reg
00015654 l     O .rwdata	00001060 DEBUG
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000106fc l     F .text	00000214 altera_avalon_jtag_uart_irq
00010910 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
000110bc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000111f4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00011220 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00011684 l     F .text	000000d4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000117d4 l     F .text	0000003c alt_get_errno
00011810 l     F .text	000000dc alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 impure.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 freer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 reallocr.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000140fc l     F .text	00000008 __fp_lock
00014104 l     F .text	0000001c stdio_exit_handler
00014120 l     F .text	00000070 cleanup_stdio
00014190 l     F .text	00000008 __fp_unlock
00014198 l     F .text	00000174 global_stdio_init.part.0
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00014f94 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0001508c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
00015178 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
000152dc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sbrk.c
00016dbc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
000154d8 l     F .text	0000003c alt_get_errno
00018548 g     O .bss	00000004 alt_instruction_exception_handler
00014aa0 g     F .text	00000058 _isatty_r
00010364 g     F .text	0000007c alt_main
00018564 g     O .bss	00000100 alt_irq
00014af8 g     F .text	00000064 _lseek_r
00016dc0 g       *ABS*	00000000 __flash_rwdata_start
00018954 g       *ABS*	00000000 __alt_heap_start
00014844 g     F .text	0000005c __sseek
0001442c g     F .text	00000028 __sinit
000152b8 g     F .text	00000024 __malloc_unlock
000128c0 g     F .text	00000128 memmove
000103e0 g     F .text	0000003c alt_putstr
00011c8c g     F .text	00000024 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
0001854c g     O .bss	00000004 __stdio_exit_handler
00010020 g       *ABS*	00000000 __flash_exceptions_start
00014a40 g     F .text	00000060 _fstat_r
00018550 g     O .bss	00000004 errno
000147bc g     F .text	00000008 __seofread
00018530 g     O .bss	00000004 alt_argv
0001ed8c g       *ABS*	00000000 _gp
000166dc g     O .rwdata	00000180 alt_fd_list
00011cb0 g     F .text	00000090 alt_find_dev
000127c0 g     F .text	00000100 memcpy
00011758 g     F .text	0000007c alt_io_redirect
00015618 g       *ABS*	00000000 __DTOR_END__
00011f00 g     F .text	00000074 alt_exception_cause_generated_bad_addr
00010b14 g     F .text	00000220 altera_avalon_jtag_uart_read
00014e70 g     F .text	00000064 .hidden __udivsi3
000150c8 g     F .text	000000b0 isatty
00018560 g     O .bss	00000004 __malloc_top_pad
00012068 g     F .text	000004a0 __sfvwrite_r
00014bc0 g     F .text	00000058 _sbrk_r
00014b5c g     F .text	00000064 _read_r
00016d9c g     O .rwdata	00000004 alt_max_fd
00014c7c g     F .text	000000f0 _fclose_r
00014070 g     F .text	0000008c fflush
0001855c g     O .bss	00000004 __malloc_max_sbrked_mem
000151b4 g     F .text	000000e0 lseek
00013820 g     F .text	000005ec _realloc_r
00018954 g       *ABS*	00000000 __bss_end
0001159c g     F .text	000000e8 alt_iic_isr_register
00011b60 g     F .text	0000012c alt_tick
0001445c g     F .text	00000018 __fp_lock_all
00011550 g     F .text	0000004c alt_ic_irq_enabled
00011abc g     F .text	000000a4 alt_alarm_stop
00018538 g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	000000c8 alt_irq_handler
000166b4 g     O .rwdata	00000028 alt_dev_null
000111d4 g     F .text	00000020 alt_dcache_flush_all
00016dc0 g       *ABS*	00000000 __ram_rwdata_end
0001881c g     O .bss	00000138 __sf
00016d94 g     O .rwdata	00000008 alt_dev_list
00015514 g     F .text	00000104 write
00015654 g       *ABS*	00000000 __ram_rodata_end
00014fd0 g     F .text	000000bc fstat
00014ed4 g     F .text	0000005c .hidden __umodsi3
00018954 g       *ABS*	00000000 end
0001063c g     F .text	000000c0 altera_avalon_jtag_uart_init
000101c4 g     F .exceptions	00000060 alt_instruction_exception_entry
00015618 g       *ABS*	00000000 __CTOR_LIST__
0001a000 g       *ABS*	00000000 __alt_stack_pointer
00010d34 g     F .text	00000228 altera_avalon_jtag_uart_write
00014454 g     F .text	00000004 __sfp_lock_acquire
0001264c g     F .text	000000fc memchr
00012d50 g     F .text	00000308 _free_r
00012b14 g     F .text	00000118 __call_exitprocs
00018664 g     O .bss	00000190 __atexit0
00016db4 g     O .rwdata	00000004 __malloc_sbrk_base
00010224 g     F .text	0000003c _start
0001853c g     O .bss	00000004 _alt_tick_rate
00018540 g     O .bss	00000008 _alt_nticks
00015318 g     F .text	00000108 read
0001048c g     F .text	0000004c alt_sys_init
00012a80 g     F .text	00000094 __register_exitproc
000109b8 g     F .text	00000068 altera_avalon_jtag_uart_close
00014f30 g     F .text	00000028 .hidden __mulsi3
00015654 g       *ABS*	00000000 __ram_rwdata_start
00015618 g       *ABS*	00000000 __ram_rodata_start
000187f4 g     O .bss	00000028 __malloc_current_mallinfo
000104d8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00011e48 g     F .text	000000b8 alt_get_fd
000149e8 g     F .text	00000058 _close_r
00012748 g     F .text	00000078 memcmp
00010598 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00018954 g       *ABS*	00000000 __alt_stack_base
000105e8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00012508 g     F .text	00000144 __swsetup_r
0001430c g     F .text	00000120 __sfp
00016978 g     O .rwdata	00000408 __malloc_av_
00018554 g     O .bss	00000004 __atexit
00014768 g     F .text	00000054 __sread
00011d40 g     F .text	00000108 alt_find_file
0001125c g     F .text	000000a8 alt_dev_llist_insert
00015294 g     F .text	00000024 __malloc_lock
00015420 g     F .text	000000b8 sbrk
00014014 g     F .text	0000005c _fflush_r
0001852c g       *ABS*	00000000 __bss_start
000148a8 g     F .text	00000140 memset
00010260 g     F .text	00000018 main
00010000 g       *ABS*	00000000 __alt_mem_RAM
00018534 g     O .bss	00000004 alt_envp
00018558 g     O .bss	00000004 __malloc_max_total_mem
00010538 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000148a0 g     F .text	00000008 __sclose
0001a000 g       *ABS*	00000000 __alt_heap_limit
00014d6c g     F .text	00000010 fclose
00013058 g     F .text	000007c8 _malloc_r
00016da0 g     O .rwdata	00000004 alt_errno
00014d7c g     F .text	00000080 .hidden __divsi3
00012c2c g     F .text	00000124 _malloc_trim_r
00015618 g       *ABS*	00000000 __CTOR_END__
00015618 g       *ABS*	00000000 __flash_rodata_start
00015618 g       *ABS*	00000000 __DTOR_LIST__
00010450 g     F .text	0000003c alt_irq_init
00011a4c g     F .text	00000070 alt_release_fd
00011f74 g     F .text	00000014 atexit
00014c18 g     F .text	00000064 _write_r
00016db0 g     O .rwdata	00000004 _impure_ptr
0001852c g     O .bss	00000004 alt_argc
00013e0c g     F .text	00000208 __sflush_r
00011368 g     F .text	00000064 _do_dtors
0001448c g     F .text	000000a8 _fwalk_sglue
00010020 g       .exceptions	00000000 alt_irq_entry
00014474 g     F .text	00000018 __fp_unlock_all
00016d8c g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
000146dc g     F .text	0000008c __swhatbuf_r
000113ec g     F .text	00000050 alt_ic_isr_register
00016d80 g     O .rwdata	0000000c __sglue
00016dc0 g       *ABS*	00000000 _edata
00018954 g       *ABS*	00000000 _end
00010224 g       *ABS*	00000000 __ram_exceptions_end
00010a20 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00011fb8 g     F .text	00000098 _fputs_r
000114c4 g     F .text	0000008c alt_ic_irq_disable
000147c4 g     F .text	00000080 __swrite
00016db8 g     O .rwdata	00000004 __malloc_trim_threshold
00011f88 g     F .text	00000030 exit
00014dfc g     F .text	00000074 .hidden __modsi3
0001685c g     O .rwdata	0000011c _impure_data
0001a000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00014458 g     F .text	00000004 __sfp_lock_release
00014f58 g     F .text	0000003c _exit
00010f5c g     F .text	00000160 alt_alarm_start
00014534 g     F .text	000001a8 __smakebuf_r
000129e8 g     F .text	00000098 strlen
000118ec g     F .text	00000160 open
000113cc g     F .text	00000020 alt_icache_flush_all
00012050 g     F .text	00000018 fputs
00016da4 g     O .rwdata	00000004 alt_priority_mask
0001143c g     F .text	00000088 alt_ic_irq_enable
00016da8 g     O .rwdata	00000008 alt_alarm_list
00011304 g     F .text	00000064 _do_ctors
000110f8 g     F .text	000000dc close
000102e0 g     F .text	00000084 alt_load



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08408914 	ori	at,at,548
    jmp r1
   10008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
   10094:	e93fff04 	addi	r4,ea,-4
   10098:	00101c40 	call	101c4 <alt_instruction_exception_entry>
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>
   100a0:	ebffff04 	addi	r15,ea,-4
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defff904 	addi	sp,sp,-28
   10100:	dfc00615 	stw	ra,24(sp)
   10104:	df000515 	stw	fp,20(sp)
   10108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   1010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10110:	0005313a 	rdctl	r2,ipending
   10114:	e0bffc15 	stw	r2,-16(fp)

  return active;
   10118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1011c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   10120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10124:	00800044 	movi	r2,1
   10128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1012c:	e0ffff17 	ldw	r3,-4(fp)
   10130:	e0bffe17 	ldw	r2,-8(fp)
   10134:	1884703a 	and	r2,r3,r2
   10138:	10001126 	beq	r2,zero,10180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1013c:	e0bffd17 	ldw	r2,-12(fp)
   10140:	100690fa 	slli	r3,r2,3
   10144:	008000b4 	movhi	r2,2
   10148:	1885883a 	add	r2,r3,r2
   1014c:	10e15917 	ldw	r3,-31388(r2)
   10150:	e0bffd17 	ldw	r2,-12(fp)
   10154:	100890fa 	slli	r4,r2,3
   10158:	008000b4 	movhi	r2,2
   1015c:	2085883a 	add	r2,r4,r2
   10160:	10a15a17 	ldw	r2,-31384(r2)
   10164:	1009883a 	mov	r4,r2
   10168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   1016c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
   10170:	0005313a 	rdctl	r2,ipending
   10174:	e0bffb15 	stw	r2,-20(fp)
  return active;
   10178:	e0bffb17 	ldw	r2,-20(fp)
   1017c:	00000706 	br	1019c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
   10180:	e0bffe17 	ldw	r2,-8(fp)
   10184:	1085883a 	add	r2,r2,r2
   10188:	e0bffe15 	stw	r2,-8(fp)
      i++;
   1018c:	e0bffd17 	ldw	r2,-12(fp)
   10190:	10800044 	addi	r2,r2,1
   10194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
   10198:	003fe406 	br	1012c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
   1019c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   101a0:	e0bfff17 	ldw	r2,-4(fp)
   101a4:	103fde1e 	bne	r2,zero,10120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   101a8:	0001883a 	nop
}
   101ac:	0001883a 	nop
   101b0:	e037883a 	mov	sp,fp
   101b4:	dfc00117 	ldw	ra,4(sp)
   101b8:	df000017 	ldw	fp,0(sp)
   101bc:	dec00204 	addi	sp,sp,8
   101c0:	f800283a 	ret

000101c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   101c4:	defffb04 	addi	sp,sp,-20
   101c8:	dfc00415 	stw	ra,16(sp)
   101cc:	df000315 	stw	fp,12(sp)
   101d0:	df000304 	addi	fp,sp,12
   101d4:	e13ffd15 	stw	r4,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   101d8:	00bfffc4 	movi	r2,-1
   101dc:	e0bfff15 	stw	r2,-4(fp)
  badaddr = 0;
   101e0:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   101e4:	d0a5ef17 	ldw	r2,-26692(gp)
   101e8:	10000726 	beq	r2,zero,10208 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   101ec:	d0a5ef17 	ldw	r2,-26692(gp)
   101f0:	e0ffff17 	ldw	r3,-4(fp)
   101f4:	e1bffe17 	ldw	r6,-8(fp)
   101f8:	e17ffd17 	ldw	r5,-12(fp)
   101fc:	1809883a 	mov	r4,r3
   10200:	103ee83a 	callr	r2
   10204:	00000206 	br	10210 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10208:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   1020c:	0005883a 	mov	r2,zero
}
   10210:	e037883a 	mov	sp,fp
   10214:	dfc00117 	ldw	ra,4(sp)
   10218:	df000017 	ldw	fp,0(sp)
   1021c:	dec00204 	addi	sp,sp,8
   10220:	f800283a 	ret

Disassembly of section .text:

00010224 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10224:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   10228:	dee80014 	ori	sp,sp,40960
    movhi gp, %hi(_gp)
   1022c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   10230:	d6bb6314 	ori	gp,gp,60812
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10234:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10238:	10a14b14 	ori	r2,r2,34092

    movhi r3, %hi(__bss_end)
   1023c:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   10240:	18e25514 	ori	r3,r3,35156

    beq r2, r3, 1f
   10244:	10c00326 	beq	r2,r3,10254 <_start+0x30>

0:
    stw zero, (r2)
   10248:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   1024c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   10250:	10fffd36 	bltu	r2,r3,10248 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10254:	00102e00 	call	102e0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10258:	00103640 	call	10364 <alt_main>

0001025c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   1025c:	003fff06 	br	1025c <alt_after_alt_main>

00010260 <main>:

#include "sys/alt_stdio.h"

int main()
{ 
  alt_putstr("Hello from Nios II!\n");
   10260:	01000074 	movhi	r4,1
{ 
   10264:	deffff04 	addi	sp,sp,-4
  alt_putstr("Hello from Nios II!\n");
   10268:	21158604 	addi	r4,r4,22040
{ 
   1026c:	dfc00015 	stw	ra,0(sp)
  alt_putstr("Hello from Nios II!\n");
   10270:	00103e00 	call	103e0 <alt_putstr>

  /* Event loop never exits. */
  while (1);
   10274:	003fff06 	br	10274 <main+0x14>

00010278 <alt_load_section>:
 */  

void alt_load (void)
{
  /* 
   * Copy the .rwdata section. 
   10278:	defffc04 	addi	sp,sp,-16
   1027c:	df000315 	stw	fp,12(sp)
   10280:	df000304 	addi	fp,sp,12
   10284:	e13fff15 	stw	r4,-4(fp)
   10288:	e17ffe15 	stw	r5,-8(fp)
   1028c:	e1bffd15 	stw	r6,-12(fp)
   */
   10290:	e0fffe17 	ldw	r3,-8(fp)
   10294:	e0bfff17 	ldw	r2,-4(fp)
   10298:	18800c26 	beq	r3,r2,102cc <alt_load_section+0x54>

  alt_load_section (&__flash_rwdata_start, 
   1029c:	00000806 	br	102c0 <alt_load_section+0x48>
		               &__ram_rwdata_start,
		               &__ram_rwdata_end);
   102a0:	e0ffff17 	ldw	r3,-4(fp)
   102a4:	18800104 	addi	r2,r3,4
   102a8:	e0bfff15 	stw	r2,-4(fp)
   102ac:	e0bffe17 	ldw	r2,-8(fp)
   102b0:	11000104 	addi	r4,r2,4
   102b4:	e13ffe15 	stw	r4,-8(fp)
   102b8:	18c00017 	ldw	r3,0(r3)
   102bc:	10c00015 	stw	r3,0(r2)
  alt_load_section (&__flash_rwdata_start, 
   102c0:	e0fffe17 	ldw	r3,-8(fp)
   102c4:	e0bffd17 	ldw	r2,-12(fp)
   102c8:	18bff51e 	bne	r3,r2,102a0 <alt_load_section+0x28>

  /*
   * Copy the exception handler.
   102cc:	0001883a 	nop
   102d0:	e037883a 	mov	sp,fp
   102d4:	df000017 	ldw	fp,0(sp)
   102d8:	dec00104 	addi	sp,sp,4
   102dc:	f800283a 	ret

000102e0 <alt_load>:
{
   102e0:	defffe04 	addi	sp,sp,-8
   102e4:	dfc00115 	stw	ra,4(sp)
   102e8:	df000015 	stw	fp,0(sp)
   102ec:	d839883a 	mov	fp,sp
  alt_load_section (&__flash_rwdata_start, 
   102f0:	01800074 	movhi	r6,1
   102f4:	319b7004 	addi	r6,r6,28096
   102f8:	01400074 	movhi	r5,1
   102fc:	29559504 	addi	r5,r5,22100
   10300:	01000074 	movhi	r4,1
   10304:	211b7004 	addi	r4,r4,28096
   10308:	00102780 	call	10278 <alt_load_section>
   */

  alt_load_section (&__flash_exceptions_start, 
   1030c:	01800074 	movhi	r6,1
   10310:	31808904 	addi	r6,r6,548
   10314:	01400074 	movhi	r5,1
   10318:	29400804 	addi	r5,r5,32
   1031c:	01000074 	movhi	r4,1
   10320:	21000804 	addi	r4,r4,32
   10324:	00102780 	call	10278 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   10328:	01800074 	movhi	r6,1
   1032c:	31959504 	addi	r6,r6,22100
   10330:	01400074 	movhi	r5,1
   10334:	29558604 	addi	r5,r5,22040
   10338:	01000074 	movhi	r4,1
   1033c:	21158604 	addi	r4,r4,22040
   10340:	00102780 	call	10278 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   10344:	00111d40 	call	111d4 <alt_dcache_flush_all>
  alt_icache_flush_all();
   10348:	00113cc0 	call	113cc <alt_icache_flush_all>
}
   1034c:	0001883a 	nop
   10350:	e037883a 	mov	sp,fp
   10354:	dfc00117 	ldw	ra,4(sp)
   10358:	df000017 	ldw	fp,0(sp)
   1035c:	dec00204 	addi	sp,sp,8
   10360:	f800283a 	ret

00010364 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10364:	defffd04 	addi	sp,sp,-12
   10368:	dfc00215 	stw	ra,8(sp)
   1036c:	df000115 	stw	fp,4(sp)
   10370:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10374:	0009883a 	mov	r4,zero
   10378:	00104500 	call	10450 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   1037c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   10380:	001048c0 	call	1048c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   10384:	01800074 	movhi	r6,1
   10388:	31958c04 	addi	r6,r6,22064
   1038c:	01400074 	movhi	r5,1
   10390:	29558c04 	addi	r5,r5,22064
   10394:	01000074 	movhi	r4,1
   10398:	21158c04 	addi	r4,r4,22064
   1039c:	00117580 	call	11758 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   103a0:	00113040 	call	11304 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   103a4:	01000074 	movhi	r4,1
   103a8:	2104da04 	addi	r4,r4,4968
   103ac:	0011f740 	call	11f74 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   103b0:	d0a5e817 	ldw	r2,-26720(gp)
   103b4:	d0e5e917 	ldw	r3,-26716(gp)
   103b8:	d125ea17 	ldw	r4,-26712(gp)
   103bc:	200d883a 	mov	r6,r4
   103c0:	180b883a 	mov	r5,r3
   103c4:	1009883a 	mov	r4,r2
   103c8:	00102600 	call	10260 <main>
   103cc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   103d0:	01000044 	movi	r4,1
   103d4:	00110f80 	call	110f8 <close>
  exit (result);
   103d8:	e13fff17 	ldw	r4,-4(fp)
   103dc:	0011f880 	call	11f88 <exit>

000103e0 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
   103e0:	defffd04 	addi	sp,sp,-12
   103e4:	dfc00215 	stw	ra,8(sp)
   103e8:	df000115 	stw	fp,4(sp)
   103ec:	df000104 	addi	fp,sp,4
   103f0:	e13fff15 	stw	r4,-4(fp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
#else
    return fputs(str, stdout);
   103f4:	d0a00917 	ldw	r2,-32732(gp)
   103f8:	10800217 	ldw	r2,8(r2)
   103fc:	100b883a 	mov	r5,r2
   10400:	e13fff17 	ldw	r4,-4(fp)
   10404:	00120500 	call	12050 <fputs>
#endif
#endif
}
   10408:	e037883a 	mov	sp,fp
   1040c:	dfc00117 	ldw	ra,4(sp)
   10410:	df000017 	ldw	fp,0(sp)
   10414:	dec00204 	addi	sp,sp,8
   10418:	f800283a 	ret

0001041c <alt_dev_reg>:
   1041c:	defffd04 	addi	sp,sp,-12
   10420:	dfc00215 	stw	ra,8(sp)
   10424:	df000115 	stw	fp,4(sp)
   10428:	df000104 	addi	fp,sp,4
   1042c:	e13fff15 	stw	r4,-4(fp)
   10430:	d1600204 	addi	r5,gp,-32760
   10434:	e13fff17 	ldw	r4,-4(fp)
   10438:	001125c0 	call	1125c <alt_dev_llist_insert>
   1043c:	e037883a 	mov	sp,fp
   10440:	dfc00117 	ldw	ra,4(sp)
   10444:	df000017 	ldw	fp,0(sp)
   10448:	dec00204 	addi	sp,sp,8
   1044c:	f800283a 	ret

00010450 <alt_irq_init>:
{
   10450:	defffd04 	addi	sp,sp,-12
   10454:	dfc00215 	stw	ra,8(sp)
   10458:	df000115 	stw	fp,4(sp)
   1045c:	df000104 	addi	fp,sp,4
   10460:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS, NIOS);
   10464:	0011c8c0 	call	11c8c <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   10468:	00800044 	movi	r2,1
   1046c:	1001703a 	wrctl	status,r2
}
   10470:	0001883a 	nop
}
   10474:	0001883a 	nop
   10478:	e037883a 	mov	sp,fp
   1047c:	dfc00117 	ldw	ra,4(sp)
   10480:	df000017 	ldw	fp,0(sp)
   10484:	dec00204 	addi	sp,sp,8
   10488:	f800283a 	ret

0001048c <alt_sys_init>:
{
   1048c:	defffe04 	addi	sp,sp,-8
   10490:	dfc00115 	stw	ra,4(sp)
   10494:	df000015 	stw	fp,0(sp)
   10498:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( DEBUG, DEBUG);
   1049c:	01800044 	movi	r6,1
   104a0:	000b883a 	mov	r5,zero
   104a4:	01000074 	movhi	r4,1
   104a8:	21159f04 	addi	r4,r4,22140
   104ac:	001063c0 	call	1063c <altera_avalon_jtag_uart_init>
   104b0:	01000074 	movhi	r4,1
   104b4:	21159504 	addi	r4,r4,22100
   104b8:	001041c0 	call	1041c <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI, SPI);
   104bc:	0001883a 	nop
}
   104c0:	0001883a 	nop
   104c4:	e037883a 	mov	sp,fp
   104c8:	dfc00117 	ldw	ra,4(sp)
   104cc:	df000017 	ldw	fp,0(sp)
   104d0:	dec00204 	addi	sp,sp,8
   104d4:	f800283a 	ret

000104d8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   104d8:	defffa04 	addi	sp,sp,-24
   104dc:	dfc00515 	stw	ra,20(sp)
   104e0:	df000415 	stw	fp,16(sp)
   104e4:	df000404 	addi	fp,sp,16
   104e8:	e13ffe15 	stw	r4,-8(fp)
   104ec:	e17ffd15 	stw	r5,-12(fp)
   104f0:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   104f4:	e0bffe17 	ldw	r2,-8(fp)
   104f8:	10800017 	ldw	r2,0(r2)
   104fc:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   10500:	e0bfff17 	ldw	r2,-4(fp)
   10504:	10c00a04 	addi	r3,r2,40
   10508:	e0bffe17 	ldw	r2,-8(fp)
   1050c:	10800217 	ldw	r2,8(r2)
   10510:	100f883a 	mov	r7,r2
   10514:	e1bffc17 	ldw	r6,-16(fp)
   10518:	e17ffd17 	ldw	r5,-12(fp)
   1051c:	1809883a 	mov	r4,r3
   10520:	0010b140 	call	10b14 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   10524:	e037883a 	mov	sp,fp
   10528:	dfc00117 	ldw	ra,4(sp)
   1052c:	df000017 	ldw	fp,0(sp)
   10530:	dec00204 	addi	sp,sp,8
   10534:	f800283a 	ret

00010538 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   10538:	defffa04 	addi	sp,sp,-24
   1053c:	dfc00515 	stw	ra,20(sp)
   10540:	df000415 	stw	fp,16(sp)
   10544:	df000404 	addi	fp,sp,16
   10548:	e13ffe15 	stw	r4,-8(fp)
   1054c:	e17ffd15 	stw	r5,-12(fp)
   10550:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   10554:	e0bffe17 	ldw	r2,-8(fp)
   10558:	10800017 	ldw	r2,0(r2)
   1055c:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   10560:	e0bfff17 	ldw	r2,-4(fp)
   10564:	10c00a04 	addi	r3,r2,40
   10568:	e0bffe17 	ldw	r2,-8(fp)
   1056c:	10800217 	ldw	r2,8(r2)
   10570:	100f883a 	mov	r7,r2
   10574:	e1bffc17 	ldw	r6,-16(fp)
   10578:	e17ffd17 	ldw	r5,-12(fp)
   1057c:	1809883a 	mov	r4,r3
   10580:	0010d340 	call	10d34 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   10584:	e037883a 	mov	sp,fp
   10588:	dfc00117 	ldw	ra,4(sp)
   1058c:	df000017 	ldw	fp,0(sp)
   10590:	dec00204 	addi	sp,sp,8
   10594:	f800283a 	ret

00010598 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   10598:	defffc04 	addi	sp,sp,-16
   1059c:	dfc00315 	stw	ra,12(sp)
   105a0:	df000215 	stw	fp,8(sp)
   105a4:	df000204 	addi	fp,sp,8
   105a8:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   105ac:	e0bffe17 	ldw	r2,-8(fp)
   105b0:	10800017 	ldw	r2,0(r2)
   105b4:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   105b8:	e0bfff17 	ldw	r2,-4(fp)
   105bc:	10c00a04 	addi	r3,r2,40
   105c0:	e0bffe17 	ldw	r2,-8(fp)
   105c4:	10800217 	ldw	r2,8(r2)
   105c8:	100b883a 	mov	r5,r2
   105cc:	1809883a 	mov	r4,r3
   105d0:	00109b80 	call	109b8 <altera_avalon_jtag_uart_close>
}
   105d4:	e037883a 	mov	sp,fp
   105d8:	dfc00117 	ldw	ra,4(sp)
   105dc:	df000017 	ldw	fp,0(sp)
   105e0:	dec00204 	addi	sp,sp,8
   105e4:	f800283a 	ret

000105e8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   105e8:	defffa04 	addi	sp,sp,-24
   105ec:	dfc00515 	stw	ra,20(sp)
   105f0:	df000415 	stw	fp,16(sp)
   105f4:	df000404 	addi	fp,sp,16
   105f8:	e13ffe15 	stw	r4,-8(fp)
   105fc:	e17ffd15 	stw	r5,-12(fp)
   10600:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   10604:	e0bffe17 	ldw	r2,-8(fp)
   10608:	10800017 	ldw	r2,0(r2)
   1060c:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   10610:	e0bfff17 	ldw	r2,-4(fp)
   10614:	10800a04 	addi	r2,r2,40
   10618:	e1bffc17 	ldw	r6,-16(fp)
   1061c:	e17ffd17 	ldw	r5,-12(fp)
   10620:	1009883a 	mov	r4,r2
   10624:	0010a200 	call	10a20 <altera_avalon_jtag_uart_ioctl>
}
   10628:	e037883a 	mov	sp,fp
   1062c:	dfc00117 	ldw	ra,4(sp)
   10630:	df000017 	ldw	fp,0(sp)
   10634:	dec00204 	addi	sp,sp,8
   10638:	f800283a 	ret

0001063c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   1063c:	defffa04 	addi	sp,sp,-24
   10640:	dfc00515 	stw	ra,20(sp)
   10644:	df000415 	stw	fp,16(sp)
   10648:	df000404 	addi	fp,sp,16
   1064c:	e13fff15 	stw	r4,-4(fp)
   10650:	e17ffe15 	stw	r5,-8(fp)
   10654:	e1bffd15 	stw	r6,-12(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   10658:	e0bfff17 	ldw	r2,-4(fp)
   1065c:	00c00044 	movi	r3,1
   10660:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   10664:	e0bfff17 	ldw	r2,-4(fp)
   10668:	10800017 	ldw	r2,0(r2)
   1066c:	10800104 	addi	r2,r2,4
   10670:	1007883a 	mov	r3,r2
   10674:	e0bfff17 	ldw	r2,-4(fp)
   10678:	10800817 	ldw	r2,32(r2)
   1067c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   10680:	e0bffe17 	ldw	r2,-8(fp)
   10684:	e0fffd17 	ldw	r3,-12(fp)
   10688:	d8000015 	stw	zero,0(sp)
   1068c:	e1ffff17 	ldw	r7,-4(fp)
   10690:	01800074 	movhi	r6,1
   10694:	3181bf04 	addi	r6,r6,1788
   10698:	180b883a 	mov	r5,r3
   1069c:	1009883a 	mov	r4,r2
   106a0:	00113ec0 	call	113ec <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   106a4:	e0bfff17 	ldw	r2,-4(fp)
   106a8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   106ac:	e0bfff17 	ldw	r2,-4(fp)
   106b0:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   106b4:	d0e5ec17 	ldw	r3,-26704(gp)
   106b8:	e1ffff17 	ldw	r7,-4(fp)
   106bc:	01800074 	movhi	r6,1
   106c0:	31824404 	addi	r6,r6,2320
   106c4:	180b883a 	mov	r5,r3
   106c8:	1009883a 	mov	r4,r2
   106cc:	0010f5c0 	call	10f5c <alt_alarm_start>
   106d0:	1000040e 	bge	r2,zero,106e4 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   106d4:	e0ffff17 	ldw	r3,-4(fp)
   106d8:	00a00034 	movhi	r2,32768
   106dc:	10bfffc4 	addi	r2,r2,-1
   106e0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   106e4:	0001883a 	nop
   106e8:	e037883a 	mov	sp,fp
   106ec:	dfc00117 	ldw	ra,4(sp)
   106f0:	df000017 	ldw	fp,0(sp)
   106f4:	dec00204 	addi	sp,sp,8
   106f8:	f800283a 	ret

000106fc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   106fc:	defff704 	addi	sp,sp,-36
   10700:	df000815 	stw	fp,32(sp)
   10704:	df000804 	addi	fp,sp,32
   10708:	e13ff815 	stw	r4,-32(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   1070c:	e0bff817 	ldw	r2,-32(fp)
   10710:	e0bffc15 	stw	r2,-16(fp)
  unsigned int base = sp->base;
   10714:	e0bffc17 	ldw	r2,-16(fp)
   10718:	10800017 	ldw	r2,0(r2)
   1071c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int postflag=0;
   10720:	e03fff15 	stw	zero,-4(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10724:	e0bffb17 	ldw	r2,-20(fp)
   10728:	10800104 	addi	r2,r2,4
   1072c:	10800037 	ldwio	r2,0(r2)
   10730:	e0bffa15 	stw	r2,-24(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   10734:	e0bffa17 	ldw	r2,-24(fp)
   10738:	1080c00c 	andi	r2,r2,768
   1073c:	10006e26 	beq	r2,zero,108f8 <altera_avalon_jtag_uart_irq+0x1fc>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   10740:	e0bffa17 	ldw	r2,-24(fp)
   10744:	1080400c 	andi	r2,r2,256
   10748:	10003526 	beq	r2,zero,10820 <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   1074c:	00800074 	movhi	r2,1
   10750:	e0bffe15 	stw	r2,-8(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10754:	e0bffc17 	ldw	r2,-16(fp)
   10758:	10800a17 	ldw	r2,40(r2)
   1075c:	10800044 	addi	r2,r2,1
   10760:	1081ffcc 	andi	r2,r2,2047
   10764:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
   10768:	e0bffc17 	ldw	r2,-16(fp)
   1076c:	10800b17 	ldw	r2,44(r2)
   10770:	e0fff917 	ldw	r3,-28(fp)
   10774:	18801526 	beq	r3,r2,107cc <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   10778:	e0bffb17 	ldw	r2,-20(fp)
   1077c:	10800037 	ldwio	r2,0(r2)
   10780:	e0bffe15 	stw	r2,-8(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   10784:	e0bffe17 	ldw	r2,-8(fp)
   10788:	10a0000c 	andi	r2,r2,32768
   1078c:	10001126 	beq	r2,zero,107d4 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   10790:	e0bffc17 	ldw	r2,-16(fp)
   10794:	10800a17 	ldw	r2,40(r2)
   10798:	e0fffe17 	ldw	r3,-8(fp)
   1079c:	1809883a 	mov	r4,r3
   107a0:	e0fffc17 	ldw	r3,-16(fp)
   107a4:	1885883a 	add	r2,r3,r2
   107a8:	11000e05 	stb	r4,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   107ac:	e0bffc17 	ldw	r2,-16(fp)
   107b0:	10800a17 	ldw	r2,40(r2)
   107b4:	10800044 	addi	r2,r2,1
   107b8:	10c1ffcc 	andi	r3,r2,2047
   107bc:	e0bffc17 	ldw	r2,-16(fp)
   107c0:	10c00a15 	stw	r3,40(r2)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   107c4:	0001883a 	nop
      {
   107c8:	003fe206 	br	10754 <altera_avalon_jtag_uart_irq+0x58>
          break;
   107cc:	0001883a 	nop
   107d0:	00000106 	br	107d8 <altera_avalon_jtag_uart_irq+0xdc>
          break;
   107d4:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, ALT_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   107d8:	e0bffe17 	ldw	r2,-8(fp)
   107dc:	00ffffd4 	movui	r3,65535
   107e0:	18800f2e 	bgeu	r3,r2,10820 <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   107e4:	e0bffc17 	ldw	r2,-16(fp)
   107e8:	10c00817 	ldw	r3,32(r2)
   107ec:	00bfff84 	movi	r2,-2
   107f0:	1886703a 	and	r3,r3,r2
   107f4:	e0bffc17 	ldw	r2,-16(fp)
   107f8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   107fc:	e0bffb17 	ldw	r2,-20(fp)
   10800:	10800104 	addi	r2,r2,4
   10804:	1007883a 	mov	r3,r2
   10808:	e0bffc17 	ldw	r2,-16(fp)
   1080c:	10800817 	ldw	r2,32(r2)
   10810:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10814:	e0bffb17 	ldw	r2,-20(fp)
   10818:	10800104 	addi	r2,r2,4
   1081c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   10820:	e0bffa17 	ldw	r2,-24(fp)
   10824:	1080800c 	andi	r2,r2,512
   10828:	103fbe26 	beq	r2,zero,10724 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   1082c:	e0bffa17 	ldw	r2,-24(fp)
   10830:	1004d43a 	srli	r2,r2,16
   10834:	e0bffd15 	stw	r2,-12(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   10838:	00001506 	br	10890 <altera_avalon_jtag_uart_irq+0x194>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   1083c:	e0bffb17 	ldw	r2,-20(fp)
   10840:	e0fffc17 	ldw	r3,-16(fp)
   10844:	18c00d17 	ldw	r3,52(r3)
   10848:	e13ffc17 	ldw	r4,-16(fp)
   1084c:	20c7883a 	add	r3,r4,r3
   10850:	18c20e03 	ldbu	r3,2104(r3)
   10854:	18c03fcc 	andi	r3,r3,255
   10858:	18c0201c 	xori	r3,r3,128
   1085c:	18ffe004 	addi	r3,r3,-128
   10860:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10864:	e0bffc17 	ldw	r2,-16(fp)
   10868:	10800d17 	ldw	r2,52(r2)
   1086c:	10800044 	addi	r2,r2,1
   10870:	10c1ffcc 	andi	r3,r2,2047
   10874:	e0bffc17 	ldw	r2,-16(fp)
   10878:	10c00d15 	stw	r3,52(r2)
        
        /* indicate that the ALT_FLAG_POST routine must be called */
        postflag=1;
   1087c:	00800044 	movi	r2,1
   10880:	e0bfff15 	stw	r2,-4(fp)

        space--;
   10884:	e0bffd17 	ldw	r2,-12(fp)
   10888:	10bfffc4 	addi	r2,r2,-1
   1088c:	e0bffd15 	stw	r2,-12(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
   10890:	e0bffd17 	ldw	r2,-12(fp)
   10894:	10000526 	beq	r2,zero,108ac <altera_avalon_jtag_uart_irq+0x1b0>
   10898:	e0bffc17 	ldw	r2,-16(fp)
   1089c:	10c00d17 	ldw	r3,52(r2)
   108a0:	e0bffc17 	ldw	r2,-16(fp)
   108a4:	10800c17 	ldw	r2,48(r2)
   108a8:	18bfe41e 	bne	r3,r2,1083c <altera_avalon_jtag_uart_irq+0x140>
      {
        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, ALT_FLAG_SET);
      }

      if (space > 0)
   108ac:	e0bffd17 	ldw	r2,-12(fp)
   108b0:	103f9c26 	beq	r2,zero,10724 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   108b4:	e0bffc17 	ldw	r2,-16(fp)
   108b8:	10c00817 	ldw	r3,32(r2)
   108bc:	00bfff44 	movi	r2,-3
   108c0:	1886703a 	and	r3,r3,r2
   108c4:	e0bffc17 	ldw	r2,-16(fp)
   108c8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   108cc:	e0bffc17 	ldw	r2,-16(fp)
   108d0:	10800017 	ldw	r2,0(r2)
   108d4:	10800104 	addi	r2,r2,4
   108d8:	1007883a 	mov	r3,r2
   108dc:	e0bffc17 	ldw	r2,-16(fp)
   108e0:	10800817 	ldw	r2,32(r2)
   108e4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   108e8:	e0bffb17 	ldw	r2,-20(fp)
   108ec:	10800104 	addi	r2,r2,4
   108f0:	10800037 	ldwio	r2,0(r2)
  {
   108f4:	003f8b06 	br	10724 <altera_avalon_jtag_uart_irq+0x28>
      break;
   108f8:	0001883a 	nop
      }
    }
  }
}
   108fc:	0001883a 	nop
   10900:	e037883a 	mov	sp,fp
   10904:	df000017 	ldw	fp,0(sp)
   10908:	dec00104 	addi	sp,sp,4
   1090c:	f800283a 	ret

00010910 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   10910:	defffc04 	addi	sp,sp,-16
   10914:	df000315 	stw	fp,12(sp)
   10918:	df000304 	addi	fp,sp,12
   1091c:	e13ffd15 	stw	r4,-12(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   10920:	e0bffd17 	ldw	r2,-12(fp)
   10924:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   10928:	e0bfff17 	ldw	r2,-4(fp)
   1092c:	10800017 	ldw	r2,0(r2)
   10930:	10800104 	addi	r2,r2,4
   10934:	10800037 	ldwio	r2,0(r2)
   10938:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   1093c:	e0bffe17 	ldw	r2,-8(fp)
   10940:	1081000c 	andi	r2,r2,1024
   10944:	10000b26 	beq	r2,zero,10974 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   10948:	e0bfff17 	ldw	r2,-4(fp)
   1094c:	10800017 	ldw	r2,0(r2)
   10950:	10800104 	addi	r2,r2,4
   10954:	1007883a 	mov	r3,r2
   10958:	e0bfff17 	ldw	r2,-4(fp)
   1095c:	10800817 	ldw	r2,32(r2)
   10960:	10810014 	ori	r2,r2,1024
   10964:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   10968:	e0bfff17 	ldw	r2,-4(fp)
   1096c:	10000915 	stw	zero,36(r2)
   10970:	00000c06 	br	109a4 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   10974:	e0bfff17 	ldw	r2,-4(fp)
   10978:	10c00917 	ldw	r3,36(r2)
   1097c:	00a00034 	movhi	r2,32768
   10980:	10bfff04 	addi	r2,r2,-4
   10984:	10c00736 	bltu	r2,r3,109a4 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
   10988:	e0bfff17 	ldw	r2,-4(fp)
   1098c:	10800917 	ldw	r2,36(r2)
   10990:	10c00044 	addi	r3,r2,1
   10994:	e0bfff17 	ldw	r2,-4(fp)
   10998:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   1099c:	e0bfff17 	ldw	r2,-4(fp)
   109a0:	10800917 	ldw	r2,36(r2)
   109a4:	d0a5ec17 	ldw	r2,-26704(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, ALT_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   109a8:	e037883a 	mov	sp,fp
   109ac:	df000017 	ldw	fp,0(sp)
   109b0:	dec00104 	addi	sp,sp,4
   109b4:	f800283a 	ret

000109b8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   109b8:	defffd04 	addi	sp,sp,-12
   109bc:	df000215 	stw	fp,8(sp)
   109c0:	df000204 	addi	fp,sp,8
   109c4:	e13fff15 	stw	r4,-4(fp)
   109c8:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   109cc:	00000506 	br	109e4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   109d0:	e0bffe17 	ldw	r2,-8(fp)
   109d4:	1090000c 	andi	r2,r2,16384
   109d8:	10000226 	beq	r2,zero,109e4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   109dc:	00bffd44 	movi	r2,-11
   109e0:	00000b06 	br	10a10 <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   109e4:	e0bfff17 	ldw	r2,-4(fp)
   109e8:	10c00d17 	ldw	r3,52(r2)
   109ec:	e0bfff17 	ldw	r2,-4(fp)
   109f0:	10800c17 	ldw	r2,48(r2)
   109f4:	18800526 	beq	r3,r2,10a0c <altera_avalon_jtag_uart_close+0x54>
   109f8:	e0bfff17 	ldw	r2,-4(fp)
   109fc:	10c00917 	ldw	r3,36(r2)
   10a00:	e0bfff17 	ldw	r2,-4(fp)
   10a04:	10800117 	ldw	r2,4(r2)
   10a08:	18bff136 	bltu	r3,r2,109d0 <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
   10a0c:	0005883a 	mov	r2,zero
}
   10a10:	e037883a 	mov	sp,fp
   10a14:	df000017 	ldw	fp,0(sp)
   10a18:	dec00104 	addi	sp,sp,4
   10a1c:	f800283a 	ret

00010a20 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   10a20:	defffa04 	addi	sp,sp,-24
   10a24:	df000515 	stw	fp,20(sp)
   10a28:	df000504 	addi	fp,sp,20
   10a2c:	e13ffd15 	stw	r4,-12(fp)
   10a30:	e17ffc15 	stw	r5,-16(fp)
   10a34:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
   10a38:	00bff9c4 	movi	r2,-25
   10a3c:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
   10a40:	e0bffc17 	ldw	r2,-16(fp)
   10a44:	109a8060 	cmpeqi	r2,r2,27137
   10a48:	1000041e 	bne	r2,zero,10a5c <altera_avalon_jtag_uart_ioctl+0x3c>
   10a4c:	e0bffc17 	ldw	r2,-16(fp)
   10a50:	109a80a0 	cmpeqi	r2,r2,27138
   10a54:	1000181e 	bne	r2,zero,10ab8 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   10a58:	00002906 	br	10b00 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
   10a5c:	e0bffd17 	ldw	r2,-12(fp)
   10a60:	10c00117 	ldw	r3,4(r2)
   10a64:	00a00034 	movhi	r2,32768
   10a68:	10bfffc4 	addi	r2,r2,-1
   10a6c:	18802126 	beq	r3,r2,10af4 <altera_avalon_jtag_uart_ioctl+0xd4>
      int timeout = *((int *)arg);
   10a70:	e0bffb17 	ldw	r2,-20(fp)
   10a74:	10800017 	ldw	r2,0(r2)
   10a78:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   10a7c:	e0bffe17 	ldw	r2,-8(fp)
   10a80:	10800090 	cmplti	r2,r2,2
   10a84:	1000061e 	bne	r2,zero,10aa0 <altera_avalon_jtag_uart_ioctl+0x80>
   10a88:	e0fffe17 	ldw	r3,-8(fp)
   10a8c:	00a00034 	movhi	r2,32768
   10a90:	10bfffc4 	addi	r2,r2,-1
   10a94:	18800226 	beq	r3,r2,10aa0 <altera_avalon_jtag_uart_ioctl+0x80>
   10a98:	e0bffe17 	ldw	r2,-8(fp)
   10a9c:	00000206 	br	10aa8 <altera_avalon_jtag_uart_ioctl+0x88>
   10aa0:	00a00034 	movhi	r2,32768
   10aa4:	10bfff84 	addi	r2,r2,-2
   10aa8:	e0fffd17 	ldw	r3,-12(fp)
   10aac:	18800115 	stw	r2,4(r3)
      rc = 0;
   10ab0:	e03fff15 	stw	zero,-4(fp)
    break;
   10ab4:	00000f06 	br	10af4 <altera_avalon_jtag_uart_ioctl+0xd4>
    if (sp->timeout != INT_MAX)
   10ab8:	e0bffd17 	ldw	r2,-12(fp)
   10abc:	10c00117 	ldw	r3,4(r2)
   10ac0:	00a00034 	movhi	r2,32768
   10ac4:	10bfffc4 	addi	r2,r2,-1
   10ac8:	18800c26 	beq	r3,r2,10afc <altera_avalon_jtag_uart_ioctl+0xdc>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   10acc:	e0bffd17 	ldw	r2,-12(fp)
   10ad0:	10c00917 	ldw	r3,36(r2)
   10ad4:	e0bffd17 	ldw	r2,-12(fp)
   10ad8:	10800117 	ldw	r2,4(r2)
   10adc:	1885803a 	cmpltu	r2,r3,r2
   10ae0:	10c03fcc 	andi	r3,r2,255
   10ae4:	e0bffb17 	ldw	r2,-20(fp)
   10ae8:	10c00015 	stw	r3,0(r2)
      rc = 0;
   10aec:	e03fff15 	stw	zero,-4(fp)
    break;
   10af0:	00000206 	br	10afc <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
   10af4:	0001883a 	nop
   10af8:	00000106 	br	10b00 <altera_avalon_jtag_uart_ioctl+0xe0>
    break;
   10afc:	0001883a 	nop
  }

  return rc;
   10b00:	e0bfff17 	ldw	r2,-4(fp)
}
   10b04:	e037883a 	mov	sp,fp
   10b08:	df000017 	ldw	fp,0(sp)
   10b0c:	dec00104 	addi	sp,sp,4
   10b10:	f800283a 	ret

00010b14 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   10b14:	defff304 	addi	sp,sp,-52
   10b18:	dfc00c15 	stw	ra,48(sp)
   10b1c:	df000b15 	stw	fp,44(sp)
   10b20:	df000b04 	addi	fp,sp,44
   10b24:	e13ff815 	stw	r4,-32(fp)
   10b28:	e17ff715 	stw	r5,-36(fp)
   10b2c:	e1bff615 	stw	r6,-40(fp)
   10b30:	e1fff515 	stw	r7,-44(fp)
  char * ptr = buffer;
   10b34:	e0bff717 	ldw	r2,-36(fp)
   10b38:	e0bfff15 	stw	r2,-4(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   10b3c:	00004706 	br	10c5c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   10b40:	e0bff817 	ldw	r2,-32(fp)
   10b44:	10800a17 	ldw	r2,40(r2)
   10b48:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
   10b4c:	e0bff817 	ldw	r2,-32(fp)
   10b50:	10800b17 	ldw	r2,44(r2)
   10b54:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
   10b58:	e0fffd17 	ldw	r3,-12(fp)
   10b5c:	e0bffc17 	ldw	r2,-16(fp)
   10b60:	18800536 	bltu	r3,r2,10b78 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   10b64:	e0fffd17 	ldw	r3,-12(fp)
   10b68:	e0bffc17 	ldw	r2,-16(fp)
   10b6c:	1885c83a 	sub	r2,r3,r2
   10b70:	e0bffe15 	stw	r2,-8(fp)
   10b74:	00000406 	br	10b88 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   10b78:	00c20004 	movi	r3,2048
   10b7c:	e0bffc17 	ldw	r2,-16(fp)
   10b80:	1885c83a 	sub	r2,r3,r2
   10b84:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
   10b88:	e0bffe17 	ldw	r2,-8(fp)
   10b8c:	10001e26 	beq	r2,zero,10c08 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   10b90:	e0fff617 	ldw	r3,-40(fp)
   10b94:	e0bffe17 	ldw	r2,-8(fp)
   10b98:	1880022e 	bgeu	r3,r2,10ba4 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   10b9c:	e0bff617 	ldw	r2,-40(fp)
   10ba0:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   10ba4:	e0bff817 	ldw	r2,-32(fp)
   10ba8:	10c00e04 	addi	r3,r2,56
   10bac:	e0bffc17 	ldw	r2,-16(fp)
   10bb0:	1885883a 	add	r2,r3,r2
   10bb4:	e1bffe17 	ldw	r6,-8(fp)
   10bb8:	100b883a 	mov	r5,r2
   10bbc:	e13fff17 	ldw	r4,-4(fp)
   10bc0:	00127c00 	call	127c0 <memcpy>
      ptr   += n;
   10bc4:	e0ffff17 	ldw	r3,-4(fp)
   10bc8:	e0bffe17 	ldw	r2,-8(fp)
   10bcc:	1885883a 	add	r2,r3,r2
   10bd0:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
   10bd4:	e0fff617 	ldw	r3,-40(fp)
   10bd8:	e0bffe17 	ldw	r2,-8(fp)
   10bdc:	1885c83a 	sub	r2,r3,r2
   10be0:	e0bff615 	stw	r2,-40(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10be4:	e0fffc17 	ldw	r3,-16(fp)
   10be8:	e0bffe17 	ldw	r2,-8(fp)
   10bec:	1885883a 	add	r2,r3,r2
   10bf0:	10c1ffcc 	andi	r3,r2,2047
   10bf4:	e0bff817 	ldw	r2,-32(fp)
   10bf8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   10bfc:	e0bff617 	ldw	r2,-40(fp)
   10c00:	00bfcf16 	blt	zero,r2,10b40 <altera_avalon_jtag_uart_read+0x2c>
   10c04:	00000106 	br	10c0c <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */
   10c08:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
   10c0c:	e0ffff17 	ldw	r3,-4(fp)
   10c10:	e0bff717 	ldw	r2,-36(fp)
   10c14:	1880141e 	bne	r3,r2,10c68 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   10c18:	e0bff517 	ldw	r2,-44(fp)
   10c1c:	1090000c 	andi	r2,r2,16384
   10c20:	1000131e 	bne	r2,zero,10c70 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   10c24:	0001883a 	nop
   10c28:	e0bff817 	ldw	r2,-32(fp)
   10c2c:	10800a17 	ldw	r2,40(r2)
   10c30:	e0fffd17 	ldw	r3,-12(fp)
   10c34:	1880051e 	bne	r3,r2,10c4c <altera_avalon_jtag_uart_read+0x138>
   10c38:	e0bff817 	ldw	r2,-32(fp)
   10c3c:	10c00917 	ldw	r3,36(r2)
   10c40:	e0bff817 	ldw	r2,-32(fp)
   10c44:	10800117 	ldw	r2,4(r2)
   10c48:	18bff736 	bltu	r3,r2,10c28 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   10c4c:	e0bff817 	ldw	r2,-32(fp)
   10c50:	10800a17 	ldw	r2,40(r2)
   10c54:	e0fffd17 	ldw	r3,-12(fp)
   10c58:	18800726 	beq	r3,r2,10c78 <altera_avalon_jtag_uart_read+0x164>
  while (space > 0)
   10c5c:	e0bff617 	ldw	r2,-40(fp)
   10c60:	00bfb716 	blt	zero,r2,10b40 <altera_avalon_jtag_uart_read+0x2c>
   10c64:	00000506 	br	10c7c <altera_avalon_jtag_uart_read+0x168>
      break;
   10c68:	0001883a 	nop
   10c6c:	00000306 	br	10c7c <altera_avalon_jtag_uart_read+0x168>
      break;
   10c70:	0001883a 	nop
   10c74:	00000106 	br	10c7c <altera_avalon_jtag_uart_read+0x168>
      break;
   10c78:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   10c7c:	e0ffff17 	ldw	r3,-4(fp)
   10c80:	e0bff717 	ldw	r2,-36(fp)
   10c84:	18801926 	beq	r3,r2,10cec <altera_avalon_jtag_uart_read+0x1d8>
  NIOS2_READ_STATUS (context);
   10c88:	0005303a 	rdctl	r2,status
   10c8c:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10c90:	e0fff917 	ldw	r3,-28(fp)
   10c94:	00bfff84 	movi	r2,-2
   10c98:	1884703a 	and	r2,r3,r2
   10c9c:	1001703a 	wrctl	status,r2
  return context;
   10ca0:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   10ca4:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   10ca8:	e0bff817 	ldw	r2,-32(fp)
   10cac:	10800817 	ldw	r2,32(r2)
   10cb0:	10c00054 	ori	r3,r2,1
   10cb4:	e0bff817 	ldw	r2,-32(fp)
   10cb8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   10cbc:	e0bff817 	ldw	r2,-32(fp)
   10cc0:	10800017 	ldw	r2,0(r2)
   10cc4:	10800104 	addi	r2,r2,4
   10cc8:	1007883a 	mov	r3,r2
   10ccc:	e0bff817 	ldw	r2,-32(fp)
   10cd0:	10800817 	ldw	r2,32(r2)
   10cd4:	18800035 	stwio	r2,0(r3)
   10cd8:	e0bffb17 	ldw	r2,-20(fp)
   10cdc:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   10ce0:	e0bffa17 	ldw	r2,-24(fp)
   10ce4:	1001703a 	wrctl	status,r2
}
   10ce8:	0001883a 	nop
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   10cec:	e0ffff17 	ldw	r3,-4(fp)
   10cf0:	e0bff717 	ldw	r2,-36(fp)
   10cf4:	18800426 	beq	r3,r2,10d08 <altera_avalon_jtag_uart_read+0x1f4>
    return ptr - buffer;
   10cf8:	e0ffff17 	ldw	r3,-4(fp)
   10cfc:	e0bff717 	ldw	r2,-36(fp)
   10d00:	1885c83a 	sub	r2,r3,r2
   10d04:	00000606 	br	10d20 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   10d08:	e0bff517 	ldw	r2,-44(fp)
   10d0c:	1090000c 	andi	r2,r2,16384
   10d10:	10000226 	beq	r2,zero,10d1c <altera_avalon_jtag_uart_read+0x208>
    return -EWOULDBLOCK;
   10d14:	00bffd44 	movi	r2,-11
   10d18:	00000106 	br	10d20 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   10d1c:	00bffec4 	movi	r2,-5
}
   10d20:	e037883a 	mov	sp,fp
   10d24:	dfc00117 	ldw	ra,4(sp)
   10d28:	df000017 	ldw	fp,0(sp)
   10d2c:	dec00204 	addi	sp,sp,8
   10d30:	f800283a 	ret

00010d34 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   10d34:	defff304 	addi	sp,sp,-52
   10d38:	dfc00c15 	stw	ra,48(sp)
   10d3c:	df000b15 	stw	fp,44(sp)
   10d40:	df000b04 	addi	fp,sp,44
   10d44:	e13ff815 	stw	r4,-32(fp)
   10d48:	e17ff715 	stw	r5,-36(fp)
   10d4c:	e1bff615 	stw	r6,-40(fp)
   10d50:	e1fff515 	stw	r7,-44(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   10d54:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   10d58:	e0bff717 	ldw	r2,-36(fp)
   10d5c:	e0bffd15 	stw	r2,-12(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   10d60:	00003706 	br	10e40 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   10d64:	e0bff817 	ldw	r2,-32(fp)
   10d68:	10800c17 	ldw	r2,48(r2)
   10d6c:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
   10d70:	e0bff817 	ldw	r2,-32(fp)
   10d74:	10800d17 	ldw	r2,52(r2)
   10d78:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
   10d7c:	e0fffc17 	ldw	r3,-16(fp)
   10d80:	e0bfff17 	ldw	r2,-4(fp)
   10d84:	1880062e 	bgeu	r3,r2,10da0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   10d88:	e0ffff17 	ldw	r3,-4(fp)
   10d8c:	e0bffc17 	ldw	r2,-16(fp)
   10d90:	1885c83a 	sub	r2,r3,r2
   10d94:	10bfffc4 	addi	r2,r2,-1
   10d98:	e0bffe15 	stw	r2,-8(fp)
   10d9c:	00000b06 	br	10dcc <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   10da0:	e0bfff17 	ldw	r2,-4(fp)
   10da4:	10000526 	beq	r2,zero,10dbc <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   10da8:	00c20004 	movi	r3,2048
   10dac:	e0bffc17 	ldw	r2,-16(fp)
   10db0:	1885c83a 	sub	r2,r3,r2
   10db4:	e0bffe15 	stw	r2,-8(fp)
   10db8:	00000406 	br	10dcc <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   10dbc:	00c1ffc4 	movi	r3,2047
   10dc0:	e0bffc17 	ldw	r2,-16(fp)
   10dc4:	1885c83a 	sub	r2,r3,r2
   10dc8:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
   10dcc:	e0bffe17 	ldw	r2,-8(fp)
   10dd0:	10001e26 	beq	r2,zero,10e4c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   10dd4:	e0fff617 	ldw	r3,-40(fp)
   10dd8:	e0bffe17 	ldw	r2,-8(fp)
   10ddc:	1880022e 	bgeu	r3,r2,10de8 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   10de0:	e0bff617 	ldw	r2,-40(fp)
   10de4:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   10de8:	e0bff817 	ldw	r2,-32(fp)
   10dec:	10c20e04 	addi	r3,r2,2104
   10df0:	e0bffc17 	ldw	r2,-16(fp)
   10df4:	1885883a 	add	r2,r3,r2
   10df8:	e1bffe17 	ldw	r6,-8(fp)
   10dfc:	e17ff717 	ldw	r5,-36(fp)
   10e00:	1009883a 	mov	r4,r2
   10e04:	00127c00 	call	127c0 <memcpy>
      ptr   += n;
   10e08:	e0fff717 	ldw	r3,-36(fp)
   10e0c:	e0bffe17 	ldw	r2,-8(fp)
   10e10:	1885883a 	add	r2,r3,r2
   10e14:	e0bff715 	stw	r2,-36(fp)
      count -= n;
   10e18:	e0fff617 	ldw	r3,-40(fp)
   10e1c:	e0bffe17 	ldw	r2,-8(fp)
   10e20:	1885c83a 	sub	r2,r3,r2
   10e24:	e0bff615 	stw	r2,-40(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10e28:	e0fffc17 	ldw	r3,-16(fp)
   10e2c:	e0bffe17 	ldw	r2,-8(fp)
   10e30:	1885883a 	add	r2,r3,r2
   10e34:	10c1ffcc 	andi	r3,r2,2047
   10e38:	e0bff817 	ldw	r2,-32(fp)
   10e3c:	10c00c15 	stw	r3,48(r2)
    while (count > 0)
   10e40:	e0bff617 	ldw	r2,-40(fp)
   10e44:	00bfc716 	blt	zero,r2,10d64 <altera_avalon_jtag_uart_write+0x30>
   10e48:	00000106 	br	10e50 <altera_avalon_jtag_uart_write+0x11c>
        break;
   10e4c:	0001883a 	nop
  NIOS2_READ_STATUS (context);
   10e50:	0005303a 	rdctl	r2,status
   10e54:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10e58:	e0fff917 	ldw	r3,-28(fp)
   10e5c:	00bfff84 	movi	r2,-2
   10e60:	1884703a 	and	r2,r3,r2
   10e64:	1001703a 	wrctl	status,r2
  return context;
   10e68:	e0bff917 	ldw	r2,-28(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   10e6c:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   10e70:	e0bff817 	ldw	r2,-32(fp)
   10e74:	10800817 	ldw	r2,32(r2)
   10e78:	10c00094 	ori	r3,r2,2
   10e7c:	e0bff817 	ldw	r2,-32(fp)
   10e80:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   10e84:	e0bff817 	ldw	r2,-32(fp)
   10e88:	10800017 	ldw	r2,0(r2)
   10e8c:	10800104 	addi	r2,r2,4
   10e90:	1007883a 	mov	r3,r2
   10e94:	e0bff817 	ldw	r2,-32(fp)
   10e98:	10800817 	ldw	r2,32(r2)
   10e9c:	18800035 	stwio	r2,0(r3)
   10ea0:	e0bffb17 	ldw	r2,-20(fp)
   10ea4:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   10ea8:	e0bffa17 	ldw	r2,-24(fp)
   10eac:	1001703a 	wrctl	status,r2
}
   10eb0:	0001883a 	nop
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   10eb4:	e0bff617 	ldw	r2,-40(fp)
   10eb8:	0080100e 	bge	zero,r2,10efc <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
   10ebc:	e0bff517 	ldw	r2,-44(fp)
   10ec0:	1090000c 	andi	r2,r2,16384
   10ec4:	1000101e 	bne	r2,zero,10f08 <altera_avalon_jtag_uart_write+0x1d4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   10ec8:	0001883a 	nop
   10ecc:	e0bff817 	ldw	r2,-32(fp)
   10ed0:	10800d17 	ldw	r2,52(r2)
   10ed4:	e0ffff17 	ldw	r3,-4(fp)
   10ed8:	1880051e 	bne	r3,r2,10ef0 <altera_avalon_jtag_uart_write+0x1bc>
   10edc:	e0bff817 	ldw	r2,-32(fp)
   10ee0:	10c00917 	ldw	r3,36(r2)
   10ee4:	e0bff817 	ldw	r2,-32(fp)
   10ee8:	10800117 	ldw	r2,4(r2)
   10eec:	18bff736 	bltu	r3,r2,10ecc <altera_avalon_jtag_uart_write+0x198>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   10ef0:	e0bff817 	ldw	r2,-32(fp)
   10ef4:	10800917 	ldw	r2,36(r2)
   10ef8:	1000051e 	bne	r2,zero,10f10 <altera_avalon_jtag_uart_write+0x1dc>
         break;
    }
  }
  while (count > 0);
   10efc:	e0bff617 	ldw	r2,-40(fp)
   10f00:	00bfcf16 	blt	zero,r2,10e40 <altera_avalon_jtag_uart_write+0x10c>
   10f04:	00000306 	br	10f14 <altera_avalon_jtag_uart_write+0x1e0>
        break;
   10f08:	0001883a 	nop
   10f0c:	00000106 	br	10f14 <altera_avalon_jtag_uart_write+0x1e0>
         break;
   10f10:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   10f14:	e0fff717 	ldw	r3,-36(fp)
   10f18:	e0bffd17 	ldw	r2,-12(fp)
   10f1c:	18800426 	beq	r3,r2,10f30 <altera_avalon_jtag_uart_write+0x1fc>
    return ptr - start;
   10f20:	e0fff717 	ldw	r3,-36(fp)
   10f24:	e0bffd17 	ldw	r2,-12(fp)
   10f28:	1885c83a 	sub	r2,r3,r2
   10f2c:	00000606 	br	10f48 <altera_avalon_jtag_uart_write+0x214>
  else if (flags & O_NONBLOCK)
   10f30:	e0bff517 	ldw	r2,-44(fp)
   10f34:	1090000c 	andi	r2,r2,16384
   10f38:	10000226 	beq	r2,zero,10f44 <altera_avalon_jtag_uart_write+0x210>
    return -EWOULDBLOCK;
   10f3c:	00bffd44 	movi	r2,-11
   10f40:	00000106 	br	10f48 <altera_avalon_jtag_uart_write+0x214>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   10f44:	00bffec4 	movi	r2,-5
}
   10f48:	e037883a 	mov	sp,fp
   10f4c:	dfc00117 	ldw	ra,4(sp)
   10f50:	df000017 	ldw	fp,0(sp)
   10f54:	dec00204 	addi	sp,sp,8
   10f58:	f800283a 	ret

00010f5c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   10f5c:	defff404 	addi	sp,sp,-48
   10f60:	df000b15 	stw	fp,44(sp)
   10f64:	df000b04 	addi	fp,sp,44
   10f68:	e13ff815 	stw	r4,-32(fp)
   10f6c:	e17ff715 	stw	r5,-36(fp)
   10f70:	e1bff615 	stw	r6,-40(fp)
   10f74:	e1fff515 	stw	r7,-44(fp)
  alt_irq_context irq_context;
  alt_u64 current_nticks = 0;
   10f78:	e03ffe15 	stw	zero,-8(fp)
   10f7c:	e03fff15 	stw	zero,-4(fp)
   10f80:	d0a5ec17 	ldw	r2,-26704(gp)
  
  if (alt_ticks_per_second ())
   10f84:	10004826 	beq	r2,zero,110a8 <alt_alarm_start+0x14c>
  {
    if (alarm)
   10f88:	e0bff817 	ldw	r2,-32(fp)
   10f8c:	10004426 	beq	r2,zero,110a0 <alt_alarm_start+0x144>
    {
      alarm->callback = callback;
   10f90:	e0bff817 	ldw	r2,-32(fp)
   10f94:	e0fff617 	ldw	r3,-40(fp)
   10f98:	10c00415 	stw	r3,16(r2)
      alarm->context  = context;
   10f9c:	e0bff817 	ldw	r2,-32(fp)
   10fa0:	e0fff517 	ldw	r3,-44(fp)
   10fa4:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
   10fa8:	0005303a 	rdctl	r2,status
   10fac:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10fb0:	e0fff917 	ldw	r3,-28(fp)
   10fb4:	00bfff84 	movi	r2,-2
   10fb8:	1884703a 	and	r2,r3,r2
   10fbc:	1001703a 	wrctl	status,r2
  return context;
   10fc0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   10fc4:	e0bffd15 	stw	r2,-12(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u64 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   10fc8:	d0a5ed17 	ldw	r2,-26700(gp)
   10fcc:	d0e5ee17 	ldw	r3,-26696(gp)
      
      current_nticks = alt_nticks();
   10fd0:	e0bffe15 	stw	r2,-8(fp)
   10fd4:	e0ffff15 	stw	r3,-4(fp)
      
      alarm->time = (alt_u64)nticks + current_nticks + 1; 
   10fd8:	e0bff717 	ldw	r2,-36(fp)
   10fdc:	1011883a 	mov	r8,r2
   10fe0:	0013883a 	mov	r9,zero
   10fe4:	e13ffe17 	ldw	r4,-8(fp)
   10fe8:	e17fff17 	ldw	r5,-4(fp)
   10fec:	4105883a 	add	r2,r8,r4
   10ff0:	120d803a 	cmpltu	r6,r2,r8
   10ff4:	4947883a 	add	r3,r9,r5
   10ff8:	30c9883a 	add	r4,r6,r3
   10ffc:	2007883a 	mov	r3,r4
   11000:	1009883a 	mov	r4,r2
   11004:	180b883a 	mov	r5,r3
   11008:	01800044 	movi	r6,1
   1100c:	000f883a 	mov	r7,zero
   11010:	2185883a 	add	r2,r4,r6
   11014:	1111803a 	cmpltu	r8,r2,r4
   11018:	29c7883a 	add	r3,r5,r7
   1101c:	40c9883a 	add	r4,r8,r3
   11020:	2007883a 	mov	r3,r4
   11024:	1009883a 	mov	r4,r2
   11028:	180b883a 	mov	r5,r3
   1102c:	e0bff817 	ldw	r2,-32(fp)
   11030:	11000215 	stw	r4,8(r2)
   11034:	11400315 	stw	r5,12(r2)
          
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   11038:	e0bff817 	ldw	r2,-32(fp)
   1103c:	d0e00704 	addi	r3,gp,-32740
   11040:	e0fffb15 	stw	r3,-20(fp)
   11044:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   11048:	e0bffa17 	ldw	r2,-24(fp)
   1104c:	e0fffb17 	ldw	r3,-20(fp)
   11050:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   11054:	e0bffb17 	ldw	r2,-20(fp)
   11058:	10c00017 	ldw	r3,0(r2)
   1105c:	e0bffa17 	ldw	r2,-24(fp)
   11060:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   11064:	e0bffb17 	ldw	r2,-20(fp)
   11068:	10800017 	ldw	r2,0(r2)
   1106c:	e0fffa17 	ldw	r3,-24(fp)
   11070:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   11074:	e0bffb17 	ldw	r2,-20(fp)
   11078:	e0fffa17 	ldw	r3,-24(fp)
   1107c:	10c00015 	stw	r3,0(r2)
}
   11080:	0001883a 	nop
   11084:	e0bffd17 	ldw	r2,-12(fp)
   11088:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   1108c:	e0bffc17 	ldw	r2,-16(fp)
   11090:	1001703a 	wrctl	status,r2
}
   11094:	0001883a 	nop
      alt_irq_enable_all (irq_context);

      return 0;
   11098:	0005883a 	mov	r2,zero
   1109c:	00000306 	br	110ac <alt_alarm_start+0x150>
    }
    else
    {
      return -EINVAL;
   110a0:	00bffa84 	movi	r2,-22
   110a4:	00000106 	br	110ac <alt_alarm_start+0x150>
    }
  }
  else
  {
    return -ENOTSUP;
   110a8:	00bfde84 	movi	r2,-134
  }
}
   110ac:	e037883a 	mov	sp,fp
   110b0:	df000017 	ldw	fp,0(sp)
   110b4:	dec00104 	addi	sp,sp,4
   110b8:	f800283a 	ret

000110bc <alt_get_errno>:

  if (fd)
  {
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
   110bc:	defffe04 	addi	sp,sp,-8
   110c0:	dfc00115 	stw	ra,4(sp)
   110c4:	df000015 	stw	fp,0(sp)
   110c8:	d839883a 	mov	fp,sp
     */
   110cc:	d0a00517 	ldw	r2,-32748(gp)
   110d0:	10000326 	beq	r2,zero,110e0 <alt_get_errno+0x24>
   110d4:	d0a00517 	ldw	r2,-32748(gp)
   110d8:	103ee83a 	callr	r2
   110dc:	00000106 	br	110e4 <alt_get_errno+0x28>
   110e0:	d0a5f104 	addi	r2,gp,-26684

   110e4:	e037883a 	mov	sp,fp
   110e8:	dfc00117 	ldw	ra,4(sp)
   110ec:	df000017 	ldw	fp,0(sp)
   110f0:	dec00204 	addi	sp,sp,8
   110f4:	f800283a 	ret

000110f8 <close>:
{
   110f8:	defffb04 	addi	sp,sp,-20
   110fc:	dfc00415 	stw	ra,16(sp)
   11100:	df000315 	stw	fp,12(sp)
   11104:	df000304 	addi	fp,sp,12
   11108:	e13ffd15 	stw	r4,-12(fp)
  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   1110c:	e0bffd17 	ldw	r2,-12(fp)
   11110:	10000916 	blt	r2,zero,11138 <close+0x40>
   11114:	e0fffd17 	ldw	r3,-12(fp)
   11118:	1805883a 	mov	r2,r3
   1111c:	1085883a 	add	r2,r2,r2
   11120:	10c5883a 	add	r2,r2,r3
   11124:	100490ba 	slli	r2,r2,2
   11128:	00c00074 	movhi	r3,1
   1112c:	18d9b704 	addi	r3,r3,26332
   11130:	10c5883a 	add	r2,r2,r3
   11134:	00000106 	br	1113c <close+0x44>
   11138:	0005883a 	mov	r2,zero
   1113c:	e0bfff15 	stw	r2,-4(fp)
  if (fd)
   11140:	e0bfff17 	ldw	r2,-4(fp)
   11144:	10001926 	beq	r2,zero,111ac <close+0xb4>
    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   11148:	e0bfff17 	ldw	r2,-4(fp)
   1114c:	10800017 	ldw	r2,0(r2)
   11150:	10800417 	ldw	r2,16(r2)
   11154:	10000626 	beq	r2,zero,11170 <close+0x78>
   11158:	e0bfff17 	ldw	r2,-4(fp)
   1115c:	10800017 	ldw	r2,0(r2)
   11160:	10800417 	ldw	r2,16(r2)
   11164:	e13fff17 	ldw	r4,-4(fp)
   11168:	103ee83a 	callr	r2
   1116c:	00000106 	br	11174 <close+0x7c>
   11170:	0005883a 	mov	r2,zero
   11174:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   11178:	e13ffd17 	ldw	r4,-12(fp)
   1117c:	0011a4c0 	call	11a4c <alt_release_fd>
    if (rval < 0)
   11180:	e0bffe17 	ldw	r2,-8(fp)
   11184:	1000070e 	bge	r2,zero,111a4 <close+0xac>
    {
      ALT_ERRNO = -rval;
   11188:	00110bc0 	call	110bc <alt_get_errno>
   1118c:	1007883a 	mov	r3,r2
   11190:	e0bffe17 	ldw	r2,-8(fp)
   11194:	0085c83a 	sub	r2,zero,r2
   11198:	18800015 	stw	r2,0(r3)
      return -1;
   1119c:	00bfffc4 	movi	r2,-1
   111a0:	00000706 	br	111c0 <close+0xc8>
    }
    return 0;
   111a4:	0005883a 	mov	r2,zero
   111a8:	00000506 	br	111c0 <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   111ac:	00110bc0 	call	110bc <alt_get_errno>
   111b0:	1007883a 	mov	r3,r2
   111b4:	00801444 	movi	r2,81
   111b8:	18800015 	stw	r2,0(r3)
    return -1;
   111bc:	00bfffc4 	movi	r2,-1
  }
}
   111c0:	e037883a 	mov	sp,fp
   111c4:	dfc00117 	ldw	ra,4(sp)
   111c8:	df000017 	ldw	fp,0(sp)
   111cc:	dec00204 	addi	sp,sp,8
   111d0:	f800283a 	ret

000111d4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   111d4:	deffff04 	addi	sp,sp,-4
   111d8:	df000015 	stw	fp,0(sp)
   111dc:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   111e0:	0001883a 	nop
   111e4:	e037883a 	mov	sp,fp
   111e8:	df000017 	ldw	fp,0(sp)
   111ec:	dec00104 	addi	sp,sp,4
   111f0:	f800283a 	ret

000111f4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   111f4:	defffc04 	addi	sp,sp,-16
   111f8:	df000315 	stw	fp,12(sp)
   111fc:	df000304 	addi	fp,sp,12
   11200:	e13fff15 	stw	r4,-4(fp)
   11204:	e17ffe15 	stw	r5,-8(fp)
   11208:	e1bffd15 	stw	r6,-12(fp)
  return len;
   1120c:	e0bffd17 	ldw	r2,-12(fp)
}
   11210:	e037883a 	mov	sp,fp
   11214:	df000017 	ldw	fp,0(sp)
   11218:	dec00104 	addi	sp,sp,4
   1121c:	f800283a 	ret

00011220 <alt_get_errno>:
   11220:	defffe04 	addi	sp,sp,-8
   11224:	dfc00115 	stw	ra,4(sp)
   11228:	df000015 	stw	fp,0(sp)
   1122c:	d839883a 	mov	fp,sp
   11230:	d0a00517 	ldw	r2,-32748(gp)
   11234:	10000326 	beq	r2,zero,11244 <alt_get_errno+0x24>
   11238:	d0a00517 	ldw	r2,-32748(gp)
   1123c:	103ee83a 	callr	r2
   11240:	00000106 	br	11248 <alt_get_errno+0x28>
   11244:	d0a5f104 	addi	r2,gp,-26684
   11248:	e037883a 	mov	sp,fp
   1124c:	dfc00117 	ldw	ra,4(sp)
   11250:	df000017 	ldw	fp,0(sp)
   11254:	dec00204 	addi	sp,sp,8
   11258:	f800283a 	ret

0001125c <alt_dev_llist_insert>:
{
   1125c:	defffa04 	addi	sp,sp,-24
   11260:	dfc00515 	stw	ra,20(sp)
   11264:	df000415 	stw	fp,16(sp)
   11268:	df000404 	addi	fp,sp,16
   1126c:	e13ffd15 	stw	r4,-12(fp)
   11270:	e17ffc15 	stw	r5,-16(fp)
  if (!dev || !dev->name)
   11274:	e0bffd17 	ldw	r2,-12(fp)
   11278:	10000326 	beq	r2,zero,11288 <alt_dev_llist_insert+0x2c>
   1127c:	e0bffd17 	ldw	r2,-12(fp)
   11280:	10800217 	ldw	r2,8(r2)
   11284:	1000061e 	bne	r2,zero,112a0 <alt_dev_llist_insert+0x44>
    ALT_ERRNO = EINVAL;
   11288:	00112200 	call	11220 <alt_get_errno>
   1128c:	1007883a 	mov	r3,r2
   11290:	00800584 	movi	r2,22
   11294:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   11298:	00bffa84 	movi	r2,-22
   1129c:	00001406 	br	112f0 <alt_dev_llist_insert+0x94>
  alt_llist_insert(list, &dev->llist);
   112a0:	e0bffd17 	ldw	r2,-12(fp)
   112a4:	e0fffc17 	ldw	r3,-16(fp)
   112a8:	e0ffff15 	stw	r3,-4(fp)
   112ac:	e0bffe15 	stw	r2,-8(fp)
  entry->previous = list;
   112b0:	e0bffe17 	ldw	r2,-8(fp)
   112b4:	e0ffff17 	ldw	r3,-4(fp)
   112b8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   112bc:	e0bfff17 	ldw	r2,-4(fp)
   112c0:	10c00017 	ldw	r3,0(r2)
   112c4:	e0bffe17 	ldw	r2,-8(fp)
   112c8:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
   112cc:	e0bfff17 	ldw	r2,-4(fp)
   112d0:	10800017 	ldw	r2,0(r2)
   112d4:	e0fffe17 	ldw	r3,-8(fp)
   112d8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   112dc:	e0bfff17 	ldw	r2,-4(fp)
   112e0:	e0fffe17 	ldw	r3,-8(fp)
   112e4:	10c00015 	stw	r3,0(r2)
}
   112e8:	0001883a 	nop
  return 0;  
   112ec:	0005883a 	mov	r2,zero
}
   112f0:	e037883a 	mov	sp,fp
   112f4:	dfc00117 	ldw	ra,4(sp)
   112f8:	df000017 	ldw	fp,0(sp)
   112fc:	dec00204 	addi	sp,sp,8
   11300:	f800283a 	ret

00011304 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   11304:	defffd04 	addi	sp,sp,-12
   11308:	dfc00215 	stw	ra,8(sp)
   1130c:	df000115 	stw	fp,4(sp)
   11310:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   11314:	00800074 	movhi	r2,1
   11318:	10958504 	addi	r2,r2,22036
   1131c:	e0bfff15 	stw	r2,-4(fp)
   11320:	00000606 	br	1133c <_do_ctors+0x38>
        (*ctor) (); 
   11324:	e0bfff17 	ldw	r2,-4(fp)
   11328:	10800017 	ldw	r2,0(r2)
   1132c:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   11330:	e0bfff17 	ldw	r2,-4(fp)
   11334:	10bfff04 	addi	r2,r2,-4
   11338:	e0bfff15 	stw	r2,-4(fp)
   1133c:	e0ffff17 	ldw	r3,-4(fp)
   11340:	00800074 	movhi	r2,1
   11344:	10958604 	addi	r2,r2,22040
   11348:	18bff62e 	bgeu	r3,r2,11324 <_do_ctors+0x20>
}
   1134c:	0001883a 	nop
   11350:	0001883a 	nop
   11354:	e037883a 	mov	sp,fp
   11358:	dfc00117 	ldw	ra,4(sp)
   1135c:	df000017 	ldw	fp,0(sp)
   11360:	dec00204 	addi	sp,sp,8
   11364:	f800283a 	ret

00011368 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   11368:	defffd04 	addi	sp,sp,-12
   1136c:	dfc00215 	stw	ra,8(sp)
   11370:	df000115 	stw	fp,4(sp)
   11374:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   11378:	00800074 	movhi	r2,1
   1137c:	10958504 	addi	r2,r2,22036
   11380:	e0bfff15 	stw	r2,-4(fp)
   11384:	00000606 	br	113a0 <_do_dtors+0x38>
        (*dtor) (); 
   11388:	e0bfff17 	ldw	r2,-4(fp)
   1138c:	10800017 	ldw	r2,0(r2)
   11390:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   11394:	e0bfff17 	ldw	r2,-4(fp)
   11398:	10bfff04 	addi	r2,r2,-4
   1139c:	e0bfff15 	stw	r2,-4(fp)
   113a0:	e0ffff17 	ldw	r3,-4(fp)
   113a4:	00800074 	movhi	r2,1
   113a8:	10958604 	addi	r2,r2,22040
   113ac:	18bff62e 	bgeu	r3,r2,11388 <_do_dtors+0x20>
}
   113b0:	0001883a 	nop
   113b4:	0001883a 	nop
   113b8:	e037883a 	mov	sp,fp
   113bc:	dfc00117 	ldw	ra,4(sp)
   113c0:	df000017 	ldw	fp,0(sp)
   113c4:	dec00204 	addi	sp,sp,8
   113c8:	f800283a 	ret

000113cc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   113cc:	deffff04 	addi	sp,sp,-4
   113d0:	df000015 	stw	fp,0(sp)
   113d4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   113d8:	0001883a 	nop
   113dc:	e037883a 	mov	sp,fp
   113e0:	df000017 	ldw	fp,0(sp)
   113e4:	dec00104 	addi	sp,sp,4
   113e8:	f800283a 	ret

000113ec <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   113ec:	defff904 	addi	sp,sp,-28
   113f0:	dfc00615 	stw	ra,24(sp)
   113f4:	df000515 	stw	fp,20(sp)
   113f8:	df000504 	addi	fp,sp,20
   113fc:	e13fff15 	stw	r4,-4(fp)
   11400:	e17ffe15 	stw	r5,-8(fp)
   11404:	e1bffd15 	stw	r6,-12(fp)
   11408:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   1140c:	e0800217 	ldw	r2,8(fp)
   11410:	d8800015 	stw	r2,0(sp)
   11414:	e1fffc17 	ldw	r7,-16(fp)
   11418:	e1bffd17 	ldw	r6,-12(fp)
   1141c:	e17ffe17 	ldw	r5,-8(fp)
   11420:	e13fff17 	ldw	r4,-4(fp)
   11424:	001159c0 	call	1159c <alt_iic_isr_register>
}  
   11428:	e037883a 	mov	sp,fp
   1142c:	dfc00117 	ldw	ra,4(sp)
   11430:	df000017 	ldw	fp,0(sp)
   11434:	dec00204 	addi	sp,sp,8
   11438:	f800283a 	ret

0001143c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   1143c:	defff904 	addi	sp,sp,-28
   11440:	df000615 	stw	fp,24(sp)
   11444:	df000604 	addi	fp,sp,24
   11448:	e13ffb15 	stw	r4,-20(fp)
   1144c:	e17ffa15 	stw	r5,-24(fp)
   11450:	e0bffa17 	ldw	r2,-24(fp)
   11454:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
   11458:	0005303a 	rdctl	r2,status
   1145c:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11460:	e0fffe17 	ldw	r3,-8(fp)
   11464:	00bfff84 	movi	r2,-2
   11468:	1884703a 	and	r2,r3,r2
   1146c:	1001703a 	wrctl	status,r2
  return context;
   11470:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   11474:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   11478:	00c00044 	movi	r3,1
   1147c:	e0bfff17 	ldw	r2,-4(fp)
   11480:	1884983a 	sll	r2,r3,r2
   11484:	1007883a 	mov	r3,r2
   11488:	d0a5eb17 	ldw	r2,-26708(gp)
   1148c:	1884b03a 	or	r2,r3,r2
   11490:	d0a5eb15 	stw	r2,-26708(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   11494:	d0a5eb17 	ldw	r2,-26708(gp)
   11498:	100170fa 	wrctl	ienable,r2
   1149c:	e0bffd17 	ldw	r2,-12(fp)
   114a0:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   114a4:	e0bffc17 	ldw	r2,-16(fp)
   114a8:	1001703a 	wrctl	status,r2
}
   114ac:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
   114b0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   114b4:	e037883a 	mov	sp,fp
   114b8:	df000017 	ldw	fp,0(sp)
   114bc:	dec00104 	addi	sp,sp,4
   114c0:	f800283a 	ret

000114c4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   114c4:	defff904 	addi	sp,sp,-28
   114c8:	df000615 	stw	fp,24(sp)
   114cc:	df000604 	addi	fp,sp,24
   114d0:	e13ffb15 	stw	r4,-20(fp)
   114d4:	e17ffa15 	stw	r5,-24(fp)
   114d8:	e0bffa17 	ldw	r2,-24(fp)
   114dc:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
   114e0:	0005303a 	rdctl	r2,status
   114e4:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   114e8:	e0fffe17 	ldw	r3,-8(fp)
   114ec:	00bfff84 	movi	r2,-2
   114f0:	1884703a 	and	r2,r3,r2
   114f4:	1001703a 	wrctl	status,r2
  return context;
   114f8:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
   114fc:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
   11500:	00c00044 	movi	r3,1
   11504:	e0bfff17 	ldw	r2,-4(fp)
   11508:	1884983a 	sll	r2,r3,r2
   1150c:	0084303a 	nor	r2,zero,r2
   11510:	1007883a 	mov	r3,r2
   11514:	d0a5eb17 	ldw	r2,-26708(gp)
   11518:	1884703a 	and	r2,r3,r2
   1151c:	d0a5eb15 	stw	r2,-26708(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   11520:	d0a5eb17 	ldw	r2,-26708(gp)
   11524:	100170fa 	wrctl	ienable,r2
   11528:	e0bffd17 	ldw	r2,-12(fp)
   1152c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   11530:	e0bffc17 	ldw	r2,-16(fp)
   11534:	1001703a 	wrctl	status,r2
}
   11538:	0001883a 	nop
  return 0;
   1153c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   11540:	e037883a 	mov	sp,fp
   11544:	df000017 	ldw	fp,0(sp)
   11548:	dec00104 	addi	sp,sp,4
   1154c:	f800283a 	ret

00011550 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   11550:	defffc04 	addi	sp,sp,-16
   11554:	df000315 	stw	fp,12(sp)
   11558:	df000304 	addi	fp,sp,12
   1155c:	e13ffe15 	stw	r4,-8(fp)
   11560:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   11564:	000530fa 	rdctl	r2,ienable
   11568:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   1156c:	00c00044 	movi	r3,1
   11570:	e0bffd17 	ldw	r2,-12(fp)
   11574:	1884983a 	sll	r2,r3,r2
   11578:	1007883a 	mov	r3,r2
   1157c:	e0bfff17 	ldw	r2,-4(fp)
   11580:	1884703a 	and	r2,r3,r2
   11584:	1004c03a 	cmpne	r2,r2,zero
   11588:	10803fcc 	andi	r2,r2,255
}
   1158c:	e037883a 	mov	sp,fp
   11590:	df000017 	ldw	fp,0(sp)
   11594:	dec00104 	addi	sp,sp,4
   11598:	f800283a 	ret

0001159c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   1159c:	defff504 	addi	sp,sp,-44
   115a0:	dfc00a15 	stw	ra,40(sp)
   115a4:	df000915 	stw	fp,36(sp)
   115a8:	df000904 	addi	fp,sp,36
   115ac:	e13ffa15 	stw	r4,-24(fp)
   115b0:	e17ff915 	stw	r5,-28(fp)
   115b4:	e1bff815 	stw	r6,-32(fp)
   115b8:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
   115bc:	00bffa84 	movi	r2,-22
   115c0:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   115c4:	e0bff917 	ldw	r2,-28(fp)
   115c8:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   115cc:	e0bffe17 	ldw	r2,-8(fp)
   115d0:	10800808 	cmpgei	r2,r2,32
   115d4:	1000251e 	bne	r2,zero,1166c <alt_iic_isr_register+0xd0>
  NIOS2_READ_STATUS (context);
   115d8:	0005303a 	rdctl	r2,status
   115dc:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   115e0:	e0fffc17 	ldw	r3,-16(fp)
   115e4:	00bfff84 	movi	r2,-2
   115e8:	1884703a 	and	r2,r3,r2
   115ec:	1001703a 	wrctl	status,r2
  return context;
   115f0:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   115f4:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
   115f8:	e0bffe17 	ldw	r2,-8(fp)
   115fc:	100890fa 	slli	r4,r2,3
   11600:	e0fff817 	ldw	r3,-32(fp)
   11604:	008000b4 	movhi	r2,2
   11608:	2085883a 	add	r2,r4,r2
   1160c:	10e15915 	stw	r3,-31388(r2)
    alt_irq[id].context = isr_context;
   11610:	e0bffe17 	ldw	r2,-8(fp)
   11614:	100890fa 	slli	r4,r2,3
   11618:	e0fff717 	ldw	r3,-36(fp)
   1161c:	008000b4 	movhi	r2,2
   11620:	2085883a 	add	r2,r4,r2
   11624:	10e15a15 	stw	r3,-31384(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   11628:	e0bff817 	ldw	r2,-32(fp)
   1162c:	10000526 	beq	r2,zero,11644 <alt_iic_isr_register+0xa8>
   11630:	e0bffe17 	ldw	r2,-8(fp)
   11634:	100b883a 	mov	r5,r2
   11638:	e13ffa17 	ldw	r4,-24(fp)
   1163c:	001143c0 	call	1143c <alt_ic_irq_enable>
   11640:	00000406 	br	11654 <alt_iic_isr_register+0xb8>
   11644:	e0bffe17 	ldw	r2,-8(fp)
   11648:	100b883a 	mov	r5,r2
   1164c:	e13ffa17 	ldw	r4,-24(fp)
   11650:	00114c40 	call	114c4 <alt_ic_irq_disable>
   11654:	e0bfff15 	stw	r2,-4(fp)
   11658:	e0bffd17 	ldw	r2,-12(fp)
   1165c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   11660:	e0bffb17 	ldw	r2,-20(fp)
   11664:	1001703a 	wrctl	status,r2
}
   11668:	0001883a 	nop

    alt_irq_enable_all(status);
  }

  return rc; 
   1166c:	e0bfff17 	ldw	r2,-4(fp)
}
   11670:	e037883a 	mov	sp,fp
   11674:	dfc00117 	ldw	ra,4(sp)
   11678:	df000017 	ldw	fp,0(sp)
   1167c:	dec00204 	addi	sp,sp,8
   11680:	f800283a 	ret

00011684 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   11684:	defff904 	addi	sp,sp,-28
   11688:	dfc00615 	stw	ra,24(sp)
   1168c:	df000515 	stw	fp,20(sp)
   11690:	df000504 	addi	fp,sp,20
   11694:	e13ffe15 	stw	r4,-8(fp)
   11698:	e17ffd15 	stw	r5,-12(fp)
   1169c:	e1bffc15 	stw	r6,-16(fp)
   116a0:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
   116a4:	e1bffb17 	ldw	r6,-20(fp)
   116a8:	e17ffc17 	ldw	r5,-16(fp)
   116ac:	e13ffd17 	ldw	r4,-12(fp)
   116b0:	00118ec0 	call	118ec <open>
   116b4:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
   116b8:	e0bfff17 	ldw	r2,-4(fp)
   116bc:	10002016 	blt	r2,zero,11740 <alt_open_fd+0xbc>
  {
    fd->dev      = alt_fd_list[old].dev;
   116c0:	e0ffff17 	ldw	r3,-4(fp)
   116c4:	1805883a 	mov	r2,r3
   116c8:	1085883a 	add	r2,r2,r2
   116cc:	10c5883a 	add	r2,r2,r3
   116d0:	100490ba 	slli	r2,r2,2
   116d4:	00c00074 	movhi	r3,1
   116d8:	10c7883a 	add	r3,r2,r3
   116dc:	18d9b717 	ldw	r3,26332(r3)
   116e0:	e0bffe17 	ldw	r2,-8(fp)
   116e4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   116e8:	e0ffff17 	ldw	r3,-4(fp)
   116ec:	1805883a 	mov	r2,r3
   116f0:	1085883a 	add	r2,r2,r2
   116f4:	10c5883a 	add	r2,r2,r3
   116f8:	100490ba 	slli	r2,r2,2
   116fc:	00c00074 	movhi	r3,1
   11700:	10c7883a 	add	r3,r2,r3
   11704:	18d9b817 	ldw	r3,26336(r3)
   11708:	e0bffe17 	ldw	r2,-8(fp)
   1170c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   11710:	e0ffff17 	ldw	r3,-4(fp)
   11714:	1805883a 	mov	r2,r3
   11718:	1085883a 	add	r2,r2,r2
   1171c:	10c5883a 	add	r2,r2,r3
   11720:	100490ba 	slli	r2,r2,2
   11724:	00c00074 	movhi	r3,1
   11728:	10c7883a 	add	r3,r2,r3
   1172c:	18d9b917 	ldw	r3,26340(r3)
   11730:	e0bffe17 	ldw	r2,-8(fp)
   11734:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   11738:	e13fff17 	ldw	r4,-4(fp)
   1173c:	0011a4c0 	call	11a4c <alt_release_fd>
  }
} 
   11740:	0001883a 	nop
   11744:	e037883a 	mov	sp,fp
   11748:	dfc00117 	ldw	ra,4(sp)
   1174c:	df000017 	ldw	fp,0(sp)
   11750:	dec00204 	addi	sp,sp,8
   11754:	f800283a 	ret

00011758 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   11758:	defffb04 	addi	sp,sp,-20
   1175c:	dfc00415 	stw	ra,16(sp)
   11760:	df000315 	stw	fp,12(sp)
   11764:	df000304 	addi	fp,sp,12
   11768:	e13fff15 	stw	r4,-4(fp)
   1176c:	e17ffe15 	stw	r5,-8(fp)
   11770:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   11774:	01c07fc4 	movi	r7,511
   11778:	01800044 	movi	r6,1
   1177c:	e17fff17 	ldw	r5,-4(fp)
   11780:	01000074 	movhi	r4,1
   11784:	2119ba04 	addi	r4,r4,26344
   11788:	00116840 	call	11684 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   1178c:	01c07fc4 	movi	r7,511
   11790:	000d883a 	mov	r6,zero
   11794:	e17ffe17 	ldw	r5,-8(fp)
   11798:	01000074 	movhi	r4,1
   1179c:	2119b704 	addi	r4,r4,26332
   117a0:	00116840 	call	11684 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   117a4:	01c07fc4 	movi	r7,511
   117a8:	01800044 	movi	r6,1
   117ac:	e17ffd17 	ldw	r5,-12(fp)
   117b0:	01000074 	movhi	r4,1
   117b4:	2119bd04 	addi	r4,r4,26356
   117b8:	00116840 	call	11684 <alt_open_fd>
}  
   117bc:	0001883a 	nop
   117c0:	e037883a 	mov	sp,fp
   117c4:	dfc00117 	ldw	ra,4(sp)
   117c8:	df000017 	ldw	fp,0(sp)
   117cc:	dec00204 	addi	sp,sp,8
   117d0:	f800283a 	ret

000117d4 <alt_get_errno>:
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   117d4:	defffe04 	addi	sp,sp,-8
   117d8:	dfc00115 	stw	ra,4(sp)
   117dc:	df000015 	stw	fp,0(sp)
   117e0:	d839883a 	mov	fp,sp
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   117e4:	d0a00517 	ldw	r2,-32748(gp)
   117e8:	10000326 	beq	r2,zero,117f8 <alt_get_errno+0x24>
   117ec:	d0a00517 	ldw	r2,-32748(gp)
   117f0:	103ee83a 	callr	r2
   117f4:	00000106 	br	117fc <alt_get_errno+0x28>
   117f8:	d0a5f104 	addi	r2,gp,-26684
        (&alt_fd_list[i] != fd))
   117fc:	e037883a 	mov	sp,fp
   11800:	dfc00117 	ldw	ra,4(sp)
   11804:	df000017 	ldw	fp,0(sp)
   11808:	dec00204 	addi	sp,sp,8
   1180c:	f800283a 	ret

00011810 <alt_file_locked>:
{
   11810:	defffd04 	addi	sp,sp,-12
   11814:	df000215 	stw	fp,8(sp)
   11818:	df000204 	addi	fp,sp,8
   1181c:	e13ffe15 	stw	r4,-8(fp)
  fd->fd_flags |= ALT_FD_DEV;
   11820:	e0bffe17 	ldw	r2,-8(fp)
   11824:	10800217 	ldw	r2,8(r2)
   11828:	10d00034 	orhi	r3,r2,16384
   1182c:	e0bffe17 	ldw	r2,-8(fp)
   11830:	10c00215 	stw	r3,8(r2)
  for (i = 0; i <= alt_max_fd; i++)
   11834:	e03fff15 	stw	zero,-4(fp)
   11838:	00002306 	br	118c8 <alt_file_locked+0xb8>
    if ((alt_fd_list[i].dev == fd->dev) &&
   1183c:	e0ffff17 	ldw	r3,-4(fp)
   11840:	1805883a 	mov	r2,r3
   11844:	1085883a 	add	r2,r2,r2
   11848:	10c5883a 	add	r2,r2,r3
   1184c:	100490ba 	slli	r2,r2,2
   11850:	00c00074 	movhi	r3,1
   11854:	10c7883a 	add	r3,r2,r3
   11858:	18d9b717 	ldw	r3,26332(r3)
   1185c:	e0bffe17 	ldw	r2,-8(fp)
   11860:	10800017 	ldw	r2,0(r2)
   11864:	1880151e 	bne	r3,r2,118bc <alt_file_locked+0xac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   11868:	e0ffff17 	ldw	r3,-4(fp)
   1186c:	1805883a 	mov	r2,r3
   11870:	1085883a 	add	r2,r2,r2
   11874:	10c5883a 	add	r2,r2,r3
   11878:	100490ba 	slli	r2,r2,2
   1187c:	00c00074 	movhi	r3,1
   11880:	10c7883a 	add	r3,r2,r3
   11884:	1899b917 	ldw	r2,26340(r3)
    if ((alt_fd_list[i].dev == fd->dev) &&
   11888:	10000c0e 	bge	r2,zero,118bc <alt_file_locked+0xac>
        (&alt_fd_list[i] != fd))
   1188c:	e0ffff17 	ldw	r3,-4(fp)
   11890:	1805883a 	mov	r2,r3
   11894:	1085883a 	add	r2,r2,r2
   11898:	10c5883a 	add	r2,r2,r3
   1189c:	100490ba 	slli	r2,r2,2
   118a0:	00c00074 	movhi	r3,1
   118a4:	18d9b704 	addi	r3,r3,26332
   118a8:	10c5883a 	add	r2,r2,r3
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   118ac:	e0fffe17 	ldw	r3,-8(fp)
   118b0:	18800226 	beq	r3,r2,118bc <alt_file_locked+0xac>
    {
      return -EACCES;
   118b4:	00bffcc4 	movi	r2,-13
   118b8:	00000806 	br	118dc <alt_file_locked+0xcc>
  for (i = 0; i <= alt_max_fd; i++)
   118bc:	e0bfff17 	ldw	r2,-4(fp)
   118c0:	10800044 	addi	r2,r2,1
   118c4:	e0bfff15 	stw	r2,-4(fp)
   118c8:	d0a00417 	ldw	r2,-32752(gp)
   118cc:	1007883a 	mov	r3,r2
   118d0:	e0bfff17 	ldw	r2,-4(fp)
   118d4:	18bfd92e 	bgeu	r3,r2,1183c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   118d8:	0005883a 	mov	r2,zero
}
   118dc:	e037883a 	mov	sp,fp
   118e0:	df000017 	ldw	fp,0(sp)
   118e4:	dec00104 	addi	sp,sp,4
   118e8:	f800283a 	ret

000118ec <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   118ec:	defff604 	addi	sp,sp,-40
   118f0:	dfc00915 	stw	ra,36(sp)
   118f4:	df000815 	stw	fp,32(sp)
   118f8:	df000804 	addi	fp,sp,32
   118fc:	e13ffa15 	stw	r4,-24(fp)
   11900:	e17ff915 	stw	r5,-28(fp)
   11904:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   11908:	00bfffc4 	movi	r2,-1
   1190c:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
   11910:	00bffb44 	movi	r2,-19
   11914:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
   11918:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   1191c:	d1600204 	addi	r5,gp,-32760
   11920:	e13ffa17 	ldw	r4,-24(fp)
   11924:	0011cb00 	call	11cb0 <alt_find_dev>
   11928:	e0bfff15 	stw	r2,-4(fp)
   1192c:	e0bfff17 	ldw	r2,-4(fp)
   11930:	1000051e 	bne	r2,zero,11948 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   11934:	e13ffa17 	ldw	r4,-24(fp)
   11938:	0011d400 	call	11d40 <alt_find_file>
   1193c:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
   11940:	00800044 	movi	r2,1
   11944:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   11948:	e0bfff17 	ldw	r2,-4(fp)
   1194c:	10002c26 	beq	r2,zero,11a00 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
   11950:	e13fff17 	ldw	r4,-4(fp)
   11954:	0011e480 	call	11e48 <alt_get_fd>
   11958:	e0bffe15 	stw	r2,-8(fp)
   1195c:	e0bffe17 	ldw	r2,-8(fp)
   11960:	1000030e 	bge	r2,zero,11970 <open+0x84>
    {
      status = index;
   11964:	e0bffe17 	ldw	r2,-8(fp)
   11968:	e0bffd15 	stw	r2,-12(fp)
   1196c:	00002606 	br	11a08 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
   11970:	e0fffe17 	ldw	r3,-8(fp)
   11974:	1805883a 	mov	r2,r3
   11978:	1085883a 	add	r2,r2,r2
   1197c:	10c5883a 	add	r2,r2,r3
   11980:	100490ba 	slli	r2,r2,2
   11984:	00c00074 	movhi	r3,1
   11988:	18d9b704 	addi	r3,r3,26332
   1198c:	10c5883a 	add	r2,r2,r3
   11990:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   11994:	e0fff917 	ldw	r3,-28(fp)
   11998:	00900034 	movhi	r2,16384
   1199c:	10bfffc4 	addi	r2,r2,-1
   119a0:	1886703a 	and	r3,r3,r2
   119a4:	e0bffb17 	ldw	r2,-20(fp)
   119a8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   119ac:	e0bffc17 	ldw	r2,-16(fp)
   119b0:	1000051e 	bne	r2,zero,119c8 <open+0xdc>
   119b4:	e13ffb17 	ldw	r4,-20(fp)
   119b8:	00118100 	call	11810 <alt_file_locked>
   119bc:	e0bffd15 	stw	r2,-12(fp)
   119c0:	e0bffd17 	ldw	r2,-12(fp)
   119c4:	10001016 	blt	r2,zero,11a08 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   119c8:	e0bfff17 	ldw	r2,-4(fp)
   119cc:	10800317 	ldw	r2,12(r2)
   119d0:	10000826 	beq	r2,zero,119f4 <open+0x108>
   119d4:	e0bfff17 	ldw	r2,-4(fp)
   119d8:	10800317 	ldw	r2,12(r2)
   119dc:	e1fff817 	ldw	r7,-32(fp)
   119e0:	e1bff917 	ldw	r6,-28(fp)
   119e4:	e17ffa17 	ldw	r5,-24(fp)
   119e8:	e13ffb17 	ldw	r4,-20(fp)
   119ec:	103ee83a 	callr	r2
   119f0:	00000106 	br	119f8 <open+0x10c>
   119f4:	0005883a 	mov	r2,zero
   119f8:	e0bffd15 	stw	r2,-12(fp)
   119fc:	00000206 	br	11a08 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   11a00:	00bffb44 	movi	r2,-19
   11a04:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   11a08:	e0bffd17 	ldw	r2,-12(fp)
   11a0c:	1000090e 	bge	r2,zero,11a34 <open+0x148>
  {
    alt_release_fd (index);  
   11a10:	e13ffe17 	ldw	r4,-8(fp)
   11a14:	0011a4c0 	call	11a4c <alt_release_fd>
    ALT_ERRNO = -status;
   11a18:	00117d40 	call	117d4 <alt_get_errno>
   11a1c:	1007883a 	mov	r3,r2
   11a20:	e0bffd17 	ldw	r2,-12(fp)
   11a24:	0085c83a 	sub	r2,zero,r2
   11a28:	18800015 	stw	r2,0(r3)
    return -1;
   11a2c:	00bfffc4 	movi	r2,-1
   11a30:	00000106 	br	11a38 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
   11a34:	e0bffe17 	ldw	r2,-8(fp)
}
   11a38:	e037883a 	mov	sp,fp
   11a3c:	dfc00117 	ldw	ra,4(sp)
   11a40:	df000017 	ldw	fp,0(sp)
   11a44:	dec00204 	addi	sp,sp,8
   11a48:	f800283a 	ret

00011a4c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   11a4c:	defffe04 	addi	sp,sp,-8
   11a50:	df000115 	stw	fp,4(sp)
   11a54:	df000104 	addi	fp,sp,4
   11a58:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   11a5c:	e0bfff17 	ldw	r2,-4(fp)
   11a60:	108000d0 	cmplti	r2,r2,3
   11a64:	1000101e 	bne	r2,zero,11aa8 <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
   11a68:	e0ffff17 	ldw	r3,-4(fp)
   11a6c:	1805883a 	mov	r2,r3
   11a70:	1085883a 	add	r2,r2,r2
   11a74:	10c5883a 	add	r2,r2,r3
   11a78:	100490ba 	slli	r2,r2,2
   11a7c:	00c00074 	movhi	r3,1
   11a80:	10c7883a 	add	r3,r2,r3
   11a84:	1819b915 	stw	zero,26340(r3)
    alt_fd_list[fd].dev      = 0;
   11a88:	e0ffff17 	ldw	r3,-4(fp)
   11a8c:	1805883a 	mov	r2,r3
   11a90:	1085883a 	add	r2,r2,r2
   11a94:	10c5883a 	add	r2,r2,r3
   11a98:	100490ba 	slli	r2,r2,2
   11a9c:	00c00074 	movhi	r3,1
   11aa0:	10c7883a 	add	r3,r2,r3
   11aa4:	1819b715 	stw	zero,26332(r3)
  }
}
   11aa8:	0001883a 	nop
   11aac:	e037883a 	mov	sp,fp
   11ab0:	df000017 	ldw	fp,0(sp)
   11ab4:	dec00104 	addi	sp,sp,4
   11ab8:	f800283a 	ret

00011abc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   11abc:	defffa04 	addi	sp,sp,-24
   11ac0:	df000515 	stw	fp,20(sp)
   11ac4:	df000504 	addi	fp,sp,20
   11ac8:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
   11acc:	0005303a 	rdctl	r2,status
   11ad0:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11ad4:	e0fffc17 	ldw	r3,-16(fp)
   11ad8:	00bfff84 	movi	r2,-2
   11adc:	1884703a 	and	r2,r3,r2
   11ae0:	1001703a 	wrctl	status,r2
  return context;
   11ae4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   11ae8:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
   11aec:	e0bffb17 	ldw	r2,-20(fp)
   11af0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   11af4:	e0bffd17 	ldw	r2,-12(fp)
   11af8:	10800017 	ldw	r2,0(r2)
   11afc:	e0fffd17 	ldw	r3,-12(fp)
   11b00:	18c00117 	ldw	r3,4(r3)
   11b04:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   11b08:	e0bffd17 	ldw	r2,-12(fp)
   11b0c:	10800117 	ldw	r2,4(r2)
   11b10:	e0fffd17 	ldw	r3,-12(fp)
   11b14:	18c00017 	ldw	r3,0(r3)
   11b18:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   11b1c:	e0bffd17 	ldw	r2,-12(fp)
   11b20:	e0fffd17 	ldw	r3,-12(fp)
   11b24:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   11b28:	e0bffd17 	ldw	r2,-12(fp)
   11b2c:	e0fffd17 	ldw	r3,-12(fp)
   11b30:	10c00015 	stw	r3,0(r2)
} 
   11b34:	0001883a 	nop
   11b38:	e0bfff17 	ldw	r2,-4(fp)
   11b3c:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
   11b40:	e0bffe17 	ldw	r2,-8(fp)
   11b44:	1001703a 	wrctl	status,r2
}
   11b48:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
   11b4c:	0001883a 	nop
   11b50:	e037883a 	mov	sp,fp
   11b54:	df000017 	ldw	fp,0(sp)
   11b58:	dec00104 	addi	sp,sp,4
   11b5c:	f800283a 	ret

00011b60 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   11b60:	defff904 	addi	sp,sp,-28
   11b64:	dfc00615 	stw	ra,24(sp)
   11b68:	df000515 	stw	fp,20(sp)
   11b6c:	dc400415 	stw	r17,16(sp)
   11b70:	dc000315 	stw	r16,12(sp)
   11b74:	df000504 	addi	fp,sp,20
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   11b78:	d0a00717 	ldw	r2,-32740(gp)
   11b7c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   11b80:	d125ed17 	ldw	r4,-26700(gp)
   11b84:	d165ee17 	ldw	r5,-26696(gp)
   11b88:	01800044 	movi	r6,1
   11b8c:	000f883a 	mov	r7,zero
   11b90:	2185883a 	add	r2,r4,r6
   11b94:	1111803a 	cmpltu	r8,r2,r4
   11b98:	29c7883a 	add	r3,r5,r7
   11b9c:	40c9883a 	add	r4,r8,r3
   11ba0:	2007883a 	mov	r3,r4
   11ba4:	1009883a 	mov	r4,r2
   11ba8:	180b883a 	mov	r5,r3
   11bac:	d125ed15 	stw	r4,-26700(gp)
   11bb0:	d165ee15 	stw	r5,-26696(gp)
 
  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   11bb4:	00002906 	br	11c5c <alt_tick+0xfc>
  {
    next = (alt_alarm*) alarm->llist.next;
   11bb8:	e0bffd17 	ldw	r2,-12(fp)
   11bbc:	10800017 	ldw	r2,0(r2)
   11bc0:	e0bffc15 	stw	r2,-16(fp)
    
    /* if the alarm period has expired, make the callback */    
    if (alarm->time <= _alt_nticks)
   11bc4:	e13ffd17 	ldw	r4,-12(fp)
   11bc8:	20800217 	ldw	r2,8(r4)
   11bcc:	20c00317 	ldw	r3,12(r4)
   11bd0:	d125ed17 	ldw	r4,-26700(gp)
   11bd4:	d165ee17 	ldw	r5,-26696(gp)
   11bd8:	28c01e36 	bltu	r5,r3,11c54 <alt_tick+0xf4>
   11bdc:	1940011e 	bne	r3,r5,11be4 <alt_tick+0x84>
   11be0:	20801c36 	bltu	r4,r2,11c54 <alt_tick+0xf4>
    {
      next_callback = alarm->callback (alarm->context);
   11be4:	e0bffd17 	ldw	r2,-12(fp)
   11be8:	10800417 	ldw	r2,16(r2)
   11bec:	e0fffd17 	ldw	r3,-12(fp)
   11bf0:	18c00517 	ldw	r3,20(r3)
   11bf4:	1809883a 	mov	r4,r3
   11bf8:	103ee83a 	callr	r2
   11bfc:	e0bffb15 	stw	r2,-20(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   11c00:	e0bffb17 	ldw	r2,-20(fp)
   11c04:	1000031e 	bne	r2,zero,11c14 <alt_tick+0xb4>
      {
        alt_alarm_stop (alarm);
   11c08:	e13ffd17 	ldw	r4,-12(fp)
   11c0c:	0011abc0 	call	11abc <alt_alarm_stop>
   11c10:	00001006 	br	11c54 <alt_tick+0xf4>
      }
      else
      {
        alarm->time += next_callback;
   11c14:	e0bffd17 	ldw	r2,-12(fp)
   11c18:	11000217 	ldw	r4,8(r2)
   11c1c:	11400317 	ldw	r5,12(r2)
   11c20:	e0bffb17 	ldw	r2,-20(fp)
   11c24:	1021883a 	mov	r16,r2
   11c28:	0023883a 	mov	r17,zero
   11c2c:	2405883a 	add	r2,r4,r16
   11c30:	110d803a 	cmpltu	r6,r2,r4
   11c34:	2c47883a 	add	r3,r5,r17
   11c38:	30c9883a 	add	r4,r6,r3
   11c3c:	2007883a 	mov	r3,r4
   11c40:	1009883a 	mov	r4,r2
   11c44:	180b883a 	mov	r5,r3
   11c48:	e0bffd17 	ldw	r2,-12(fp)
   11c4c:	11000215 	stw	r4,8(r2)
   11c50:	11400315 	stw	r5,12(r2)
      }
    }
    alarm = next;
   11c54:	e0bffc17 	ldw	r2,-16(fp)
   11c58:	e0bffd15 	stw	r2,-12(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
   11c5c:	e0fffd17 	ldw	r3,-12(fp)
   11c60:	d0a00704 	addi	r2,gp,-32740
   11c64:	18bfd41e 	bne	r3,r2,11bb8 <alt_tick+0x58>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   11c68:	0001883a 	nop
}
   11c6c:	0001883a 	nop
   11c70:	e6fffe04 	addi	sp,fp,-8
   11c74:	dfc00317 	ldw	ra,12(sp)
   11c78:	df000217 	ldw	fp,8(sp)
   11c7c:	dc400117 	ldw	r17,4(sp)
   11c80:	dc000017 	ldw	r16,0(sp)
   11c84:	dec00404 	addi	sp,sp,16
   11c88:	f800283a 	ret

00011c8c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   11c8c:	deffff04 	addi	sp,sp,-4
   11c90:	df000015 	stw	fp,0(sp)
   11c94:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   11c98:	000170fa 	wrctl	ienable,zero
}
   11c9c:	0001883a 	nop
   11ca0:	e037883a 	mov	sp,fp
   11ca4:	df000017 	ldw	fp,0(sp)
   11ca8:	dec00104 	addi	sp,sp,4
   11cac:	f800283a 	ret

00011cb0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   11cb0:	defffa04 	addi	sp,sp,-24
   11cb4:	dfc00515 	stw	ra,20(sp)
   11cb8:	df000415 	stw	fp,16(sp)
   11cbc:	df000404 	addi	fp,sp,16
   11cc0:	e13ffd15 	stw	r4,-12(fp)
   11cc4:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
   11cc8:	e0bffc17 	ldw	r2,-16(fp)
   11ccc:	10800017 	ldw	r2,0(r2)
   11cd0:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   11cd4:	e13ffd17 	ldw	r4,-12(fp)
   11cd8:	00129e80 	call	129e8 <strlen>
   11cdc:	10800044 	addi	r2,r2,1
   11ce0:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11ce4:	00000d06 	br	11d1c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   11ce8:	e0bfff17 	ldw	r2,-4(fp)
   11cec:	10800217 	ldw	r2,8(r2)
   11cf0:	e0fffe17 	ldw	r3,-8(fp)
   11cf4:	180d883a 	mov	r6,r3
   11cf8:	e17ffd17 	ldw	r5,-12(fp)
   11cfc:	1009883a 	mov	r4,r2
   11d00:	00127480 	call	12748 <memcmp>
   11d04:	1000021e 	bne	r2,zero,11d10 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   11d08:	e0bfff17 	ldw	r2,-4(fp)
   11d0c:	00000706 	br	11d2c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   11d10:	e0bfff17 	ldw	r2,-4(fp)
   11d14:	10800017 	ldw	r2,0(r2)
   11d18:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
   11d1c:	e0ffff17 	ldw	r3,-4(fp)
   11d20:	e0bffc17 	ldw	r2,-16(fp)
   11d24:	18bff01e 	bne	r3,r2,11ce8 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
   11d28:	0005883a 	mov	r2,zero
}
   11d2c:	e037883a 	mov	sp,fp
   11d30:	dfc00117 	ldw	ra,4(sp)
   11d34:	df000017 	ldw	fp,0(sp)
   11d38:	dec00204 	addi	sp,sp,8
   11d3c:	f800283a 	ret

00011d40 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   11d40:	defffb04 	addi	sp,sp,-20
   11d44:	dfc00415 	stw	ra,16(sp)
   11d48:	df000315 	stw	fp,12(sp)
   11d4c:	df000304 	addi	fp,sp,12
   11d50:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   11d54:	d0a00017 	ldw	r2,-32768(gp)
   11d58:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   11d5c:	00003106 	br	11e24 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   11d60:	e0bfff17 	ldw	r2,-4(fp)
   11d64:	10800217 	ldw	r2,8(r2)
   11d68:	1009883a 	mov	r4,r2
   11d6c:	00129e80 	call	129e8 <strlen>
   11d70:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   11d74:	e0bfff17 	ldw	r2,-4(fp)
   11d78:	10c00217 	ldw	r3,8(r2)
   11d7c:	e0bffe17 	ldw	r2,-8(fp)
   11d80:	10bfffc4 	addi	r2,r2,-1
   11d84:	1885883a 	add	r2,r3,r2
   11d88:	10800003 	ldbu	r2,0(r2)
   11d8c:	10803fcc 	andi	r2,r2,255
   11d90:	1080201c 	xori	r2,r2,128
   11d94:	10bfe004 	addi	r2,r2,-128
   11d98:	10800bd8 	cmpnei	r2,r2,47
   11d9c:	1000031e 	bne	r2,zero,11dac <alt_find_file+0x6c>
    {
      len -= 1;
   11da0:	e0bffe17 	ldw	r2,-8(fp)
   11da4:	10bfffc4 	addi	r2,r2,-1
   11da8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   11dac:	e0bffe17 	ldw	r2,-8(fp)
   11db0:	e0fffd17 	ldw	r3,-12(fp)
   11db4:	1885883a 	add	r2,r3,r2
   11db8:	10800003 	ldbu	r2,0(r2)
   11dbc:	10803fcc 	andi	r2,r2,255
   11dc0:	1080201c 	xori	r2,r2,128
   11dc4:	10bfe004 	addi	r2,r2,-128
   11dc8:	10800be0 	cmpeqi	r2,r2,47
   11dcc:	1000081e 	bne	r2,zero,11df0 <alt_find_file+0xb0>
   11dd0:	e0bffe17 	ldw	r2,-8(fp)
   11dd4:	e0fffd17 	ldw	r3,-12(fp)
   11dd8:	1885883a 	add	r2,r3,r2
   11ddc:	10800003 	ldbu	r2,0(r2)
   11de0:	10803fcc 	andi	r2,r2,255
   11de4:	1080201c 	xori	r2,r2,128
   11de8:	10bfe004 	addi	r2,r2,-128
   11dec:	10000a1e 	bne	r2,zero,11e18 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   11df0:	e0bfff17 	ldw	r2,-4(fp)
   11df4:	10800217 	ldw	r2,8(r2)
   11df8:	e0fffe17 	ldw	r3,-8(fp)
   11dfc:	180d883a 	mov	r6,r3
   11e00:	e17ffd17 	ldw	r5,-12(fp)
   11e04:	1009883a 	mov	r4,r2
   11e08:	00127480 	call	12748 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
   11e0c:	1000021e 	bne	r2,zero,11e18 <alt_find_file+0xd8>
    {
      /* match found */

      return next;
   11e10:	e0bfff17 	ldw	r2,-4(fp)
   11e14:	00000706 	br	11e34 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   11e18:	e0bfff17 	ldw	r2,-4(fp)
   11e1c:	10800017 	ldw	r2,0(r2)
   11e20:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
   11e24:	e0ffff17 	ldw	r3,-4(fp)
   11e28:	d0a00004 	addi	r2,gp,-32768
   11e2c:	18bfcc1e 	bne	r3,r2,11d60 <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
   11e30:	0005883a 	mov	r2,zero
}
   11e34:	e037883a 	mov	sp,fp
   11e38:	dfc00117 	ldw	ra,4(sp)
   11e3c:	df000017 	ldw	fp,0(sp)
   11e40:	dec00204 	addi	sp,sp,8
   11e44:	f800283a 	ret

00011e48 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   11e48:	defffc04 	addi	sp,sp,-16
   11e4c:	df000315 	stw	fp,12(sp)
   11e50:	df000304 	addi	fp,sp,12
   11e54:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
   11e58:	00bffa04 	movi	r2,-24
   11e5c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   11e60:	e03fff15 	stw	zero,-4(fp)
   11e64:	00001d06 	br	11edc <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
   11e68:	e0ffff17 	ldw	r3,-4(fp)
   11e6c:	1805883a 	mov	r2,r3
   11e70:	1085883a 	add	r2,r2,r2
   11e74:	10c5883a 	add	r2,r2,r3
   11e78:	100490ba 	slli	r2,r2,2
   11e7c:	00c00074 	movhi	r3,1
   11e80:	10c7883a 	add	r3,r2,r3
   11e84:	1899b717 	ldw	r2,26332(r3)
   11e88:	1000111e 	bne	r2,zero,11ed0 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
   11e8c:	e0ffff17 	ldw	r3,-4(fp)
   11e90:	1805883a 	mov	r2,r3
   11e94:	1085883a 	add	r2,r2,r2
   11e98:	10c5883a 	add	r2,r2,r3
   11e9c:	100490ba 	slli	r2,r2,2
   11ea0:	e13ffd17 	ldw	r4,-12(fp)
   11ea4:	00c00074 	movhi	r3,1
   11ea8:	10c7883a 	add	r3,r2,r3
   11eac:	1919b715 	stw	r4,26332(r3)
      if (i > alt_max_fd)
   11eb0:	d0e00417 	ldw	r3,-32752(gp)
   11eb4:	e0bfff17 	ldw	r2,-4(fp)
   11eb8:	1880020e 	bge	r3,r2,11ec4 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
   11ebc:	e0bfff17 	ldw	r2,-4(fp)
   11ec0:	d0a00415 	stw	r2,-32752(gp)
      }
      rc = i;
   11ec4:	e0bfff17 	ldw	r2,-4(fp)
   11ec8:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   11ecc:	00000706 	br	11eec <alt_get_fd+0xa4>
  for (i = 0; i < ALT_MAX_FD; i++)
   11ed0:	e0bfff17 	ldw	r2,-4(fp)
   11ed4:	10800044 	addi	r2,r2,1
   11ed8:	e0bfff15 	stw	r2,-4(fp)
   11edc:	e0bfff17 	ldw	r2,-4(fp)
   11ee0:	10800810 	cmplti	r2,r2,32
   11ee4:	103fe01e 	bne	r2,zero,11e68 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
   11ee8:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   11eec:	e0bffe17 	ldw	r2,-8(fp)
}
   11ef0:	e037883a 	mov	sp,fp
   11ef4:	df000017 	ldw	fp,0(sp)
   11ef8:	dec00104 	addi	sp,sp,4
   11efc:	f800283a 	ret

00011f00 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   11f00:	defffe04 	addi	sp,sp,-8
   11f04:	df000115 	stw	fp,4(sp)
   11f08:	df000104 	addi	fp,sp,4
   11f0c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   11f10:	e0bfff17 	ldw	r2,-4(fp)
   11f14:	10bffe84 	addi	r2,r2,-6
   11f18:	10c00428 	cmpgeui	r3,r2,16
   11f1c:	18c03fcc 	andi	r3,r3,255
   11f20:	18000f1e 	bne	r3,zero,11f60 <alt_exception_cause_generated_bad_addr+0x60>
   11f24:	00c00044 	movi	r3,1
   11f28:	1884983a 	sll	r2,r3,r2
   11f2c:	10e2c8cc 	andi	r3,r2,35619
   11f30:	1806c03a 	cmpne	r3,r3,zero
   11f34:	18c03fcc 	andi	r3,r3,255
   11f38:	1800051e 	bne	r3,zero,11f50 <alt_exception_cause_generated_bad_addr+0x50>
   11f3c:	1084100c 	andi	r2,r2,4160
   11f40:	1004c03a 	cmpne	r2,r2,zero
   11f44:	10803fcc 	andi	r2,r2,255
   11f48:	1000031e 	bne	r2,zero,11f58 <alt_exception_cause_generated_bad_addr+0x58>
   11f4c:	00000406 	br	11f60 <alt_exception_cause_generated_bad_addr+0x60>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   11f50:	00800044 	movi	r2,1
   11f54:	00000306 	br	11f64 <alt_exception_cause_generated_bad_addr+0x64>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   11f58:	0005883a 	mov	r2,zero
   11f5c:	00000106 	br	11f64 <alt_exception_cause_generated_bad_addr+0x64>

  default:
    return 0;
   11f60:	0005883a 	mov	r2,zero
  }
}
   11f64:	e037883a 	mov	sp,fp
   11f68:	df000017 	ldw	fp,0(sp)
   11f6c:	dec00104 	addi	sp,sp,4
   11f70:	f800283a 	ret

00011f74 <atexit>:
   11f74:	200b883a 	mov	r5,r4
   11f78:	000f883a 	mov	r7,zero
   11f7c:	000d883a 	mov	r6,zero
   11f80:	0009883a 	mov	r4,zero
   11f84:	0012a801 	jmpi	12a80 <__register_exitproc>

00011f88 <exit>:
   11f88:	defffe04 	addi	sp,sp,-8
   11f8c:	000b883a 	mov	r5,zero
   11f90:	dc000015 	stw	r16,0(sp)
   11f94:	dfc00115 	stw	ra,4(sp)
   11f98:	2021883a 	mov	r16,r4
   11f9c:	0012b140 	call	12b14 <__call_exitprocs>
   11fa0:	008000b4 	movhi	r2,2
   11fa4:	10a15317 	ldw	r2,-31412(r2)
   11fa8:	10000126 	beq	r2,zero,11fb0 <exit+0x28>
   11fac:	103ee83a 	callr	r2
   11fb0:	8009883a 	mov	r4,r16
   11fb4:	0014f580 	call	14f58 <_exit>

00011fb8 <_fputs_r>:
   11fb8:	defff804 	addi	sp,sp,-32
   11fbc:	dc400615 	stw	r17,24(sp)
   11fc0:	2023883a 	mov	r17,r4
   11fc4:	2809883a 	mov	r4,r5
   11fc8:	dc000515 	stw	r16,20(sp)
   11fcc:	dfc00715 	stw	ra,28(sp)
   11fd0:	3021883a 	mov	r16,r6
   11fd4:	d9400015 	stw	r5,0(sp)
   11fd8:	00129e80 	call	129e8 <strlen>
   11fdc:	d8800415 	stw	r2,16(sp)
   11fe0:	d8800115 	stw	r2,4(sp)
   11fe4:	00800044 	movi	r2,1
   11fe8:	dec00215 	stw	sp,8(sp)
   11fec:	d8800315 	stw	r2,12(sp)
   11ff0:	88000226 	beq	r17,zero,11ffc <_fputs_r+0x44>
   11ff4:	88800d17 	ldw	r2,52(r17)
   11ff8:	10001226 	beq	r2,zero,12044 <_fputs_r+0x8c>
   11ffc:	8080030b 	ldhu	r2,12(r16)
   12000:	10c8000c 	andi	r3,r2,8192
   12004:	1800061e 	bne	r3,zero,12020 <_fputs_r+0x68>
   12008:	80c01917 	ldw	r3,100(r16)
   1200c:	0137ffc4 	movi	r4,-8193
   12010:	10880014 	ori	r2,r2,8192
   12014:	1906703a 	and	r3,r3,r4
   12018:	8080030d 	sth	r2,12(r16)
   1201c:	80c01915 	stw	r3,100(r16)
   12020:	d9800204 	addi	r6,sp,8
   12024:	800b883a 	mov	r5,r16
   12028:	8809883a 	mov	r4,r17
   1202c:	00120680 	call	12068 <__sfvwrite_r>
   12030:	dfc00717 	ldw	ra,28(sp)
   12034:	dc400617 	ldw	r17,24(sp)
   12038:	dc000517 	ldw	r16,20(sp)
   1203c:	dec00804 	addi	sp,sp,32
   12040:	f800283a 	ret
   12044:	8809883a 	mov	r4,r17
   12048:	001442c0 	call	1442c <__sinit>
   1204c:	003feb06 	br	11ffc <_fputs_r+0x44>

00012050 <fputs>:
   12050:	00c00074 	movhi	r3,1
   12054:	2005883a 	mov	r2,r4
   12058:	191b6c17 	ldw	r4,28080(r3)
   1205c:	280d883a 	mov	r6,r5
   12060:	100b883a 	mov	r5,r2
   12064:	0011fb81 	jmpi	11fb8 <_fputs_r>

00012068 <__sfvwrite_r>:
   12068:	30800217 	ldw	r2,8(r6)
   1206c:	1000c426 	beq	r2,zero,12380 <__sfvwrite_r+0x318>
   12070:	2a80030b 	ldhu	r10,12(r5)
   12074:	defff504 	addi	sp,sp,-44
   12078:	df000915 	stw	fp,36(sp)
   1207c:	dcc00415 	stw	r19,16(sp)
   12080:	dc000115 	stw	r16,4(sp)
   12084:	dfc00a15 	stw	ra,40(sp)
   12088:	ddc00815 	stw	r23,32(sp)
   1208c:	dd800715 	stw	r22,28(sp)
   12090:	dd400615 	stw	r21,24(sp)
   12094:	dd000515 	stw	r20,20(sp)
   12098:	dc800315 	stw	r18,12(sp)
   1209c:	dc400215 	stw	r17,8(sp)
   120a0:	5080020c 	andi	r2,r10,8
   120a4:	3039883a 	mov	fp,r6
   120a8:	2027883a 	mov	r19,r4
   120ac:	2821883a 	mov	r16,r5
   120b0:	10002226 	beq	r2,zero,1213c <__sfvwrite_r+0xd4>
   120b4:	28800417 	ldw	r2,16(r5)
   120b8:	10002026 	beq	r2,zero,1213c <__sfvwrite_r+0xd4>
   120bc:	5080008c 	andi	r2,r10,2
   120c0:	e4400017 	ldw	r17,0(fp)
   120c4:	10002526 	beq	r2,zero,1215c <__sfvwrite_r+0xf4>
   120c8:	80800917 	ldw	r2,36(r16)
   120cc:	81400717 	ldw	r5,28(r16)
   120d0:	05600034 	movhi	r21,32768
   120d4:	0029883a 	mov	r20,zero
   120d8:	0025883a 	mov	r18,zero
   120dc:	ad7f0004 	addi	r21,r21,-1024
   120e0:	a00d883a 	mov	r6,r20
   120e4:	9809883a 	mov	r4,r19
   120e8:	90001026 	beq	r18,zero,1212c <__sfvwrite_r+0xc4>
   120ec:	900f883a 	mov	r7,r18
   120f0:	ac80012e 	bgeu	r21,r18,120f8 <__sfvwrite_r+0x90>
   120f4:	a80f883a 	mov	r7,r21
   120f8:	103ee83a 	callr	r2
   120fc:	00809b0e 	bge	zero,r2,1236c <__sfvwrite_r+0x304>
   12100:	e0c00217 	ldw	r3,8(fp)
   12104:	a0a9883a 	add	r20,r20,r2
   12108:	90a5c83a 	sub	r18,r18,r2
   1210c:	1885c83a 	sub	r2,r3,r2
   12110:	e0800215 	stw	r2,8(fp)
   12114:	10008426 	beq	r2,zero,12328 <__sfvwrite_r+0x2c0>
   12118:	80800917 	ldw	r2,36(r16)
   1211c:	81400717 	ldw	r5,28(r16)
   12120:	a00d883a 	mov	r6,r20
   12124:	9809883a 	mov	r4,r19
   12128:	903ff01e 	bne	r18,zero,120ec <__sfvwrite_r+0x84>
   1212c:	8d000017 	ldw	r20,0(r17)
   12130:	8c800117 	ldw	r18,4(r17)
   12134:	8c400204 	addi	r17,r17,8
   12138:	003fe906 	br	120e0 <__sfvwrite_r+0x78>
   1213c:	800b883a 	mov	r5,r16
   12140:	9809883a 	mov	r4,r19
   12144:	00125080 	call	12508 <__swsetup_r>
   12148:	10008b1e 	bne	r2,zero,12378 <__sfvwrite_r+0x310>
   1214c:	8280030b 	ldhu	r10,12(r16)
   12150:	e4400017 	ldw	r17,0(fp)
   12154:	5080008c 	andi	r2,r10,2
   12158:	103fdb1e 	bne	r2,zero,120c8 <__sfvwrite_r+0x60>
   1215c:	5080004c 	andi	r2,r10,1
   12160:	1000501e 	bne	r2,zero,122a4 <__sfvwrite_r+0x23c>
   12164:	00a00034 	movhi	r2,32768
   12168:	81c00017 	ldw	r7,0(r16)
   1216c:	80c00217 	ldw	r3,8(r16)
   12170:	10bfffc4 	addi	r2,r2,-1
   12174:	002d883a 	mov	r22,zero
   12178:	0025883a 	mov	r18,zero
   1217c:	d8800015 	stw	r2,0(sp)
   12180:	3809883a 	mov	r4,r7
   12184:	1829883a 	mov	r20,r3
   12188:	90004226 	beq	r18,zero,12294 <__sfvwrite_r+0x22c>
   1218c:	5080800c 	andi	r2,r10,512
   12190:	10009526 	beq	r2,zero,123e8 <__sfvwrite_r+0x380>
   12194:	182b883a 	mov	r21,r3
   12198:	90c0ba36 	bltu	r18,r3,12484 <__sfvwrite_r+0x41c>
   1219c:	5081200c 	andi	r2,r10,1152
   121a0:	10002626 	beq	r2,zero,1223c <__sfvwrite_r+0x1d4>
   121a4:	80c00517 	ldw	r3,20(r16)
   121a8:	81400417 	ldw	r5,16(r16)
   121ac:	18c5883a 	add	r2,r3,r3
   121b0:	10c5883a 	add	r2,r2,r3
   121b4:	1006d7fa 	srli	r3,r2,31
   121b8:	396bc83a 	sub	r21,r7,r5
   121bc:	a9000044 	addi	r4,r21,1
   121c0:	1887883a 	add	r3,r3,r2
   121c4:	1829d07a 	srai	r20,r3,1
   121c8:	2485883a 	add	r2,r4,r18
   121cc:	a00d883a 	mov	r6,r20
   121d0:	a080022e 	bgeu	r20,r2,121dc <__sfvwrite_r+0x174>
   121d4:	1029883a 	mov	r20,r2
   121d8:	100d883a 	mov	r6,r2
   121dc:	5281000c 	andi	r10,r10,1024
   121e0:	5000b626 	beq	r10,zero,124bc <__sfvwrite_r+0x454>
   121e4:	300b883a 	mov	r5,r6
   121e8:	9809883a 	mov	r4,r19
   121ec:	00130580 	call	13058 <_malloc_r>
   121f0:	102f883a 	mov	r23,r2
   121f4:	1000c026 	beq	r2,zero,124f8 <__sfvwrite_r+0x490>
   121f8:	81400417 	ldw	r5,16(r16)
   121fc:	a80d883a 	mov	r6,r21
   12200:	1009883a 	mov	r4,r2
   12204:	00127c00 	call	127c0 <memcpy>
   12208:	8080030b 	ldhu	r2,12(r16)
   1220c:	00fedfc4 	movi	r3,-1153
   12210:	10c4703a 	and	r2,r2,r3
   12214:	10802014 	ori	r2,r2,128
   12218:	8080030d 	sth	r2,12(r16)
   1221c:	a54fc83a 	sub	r7,r20,r21
   12220:	bd49883a 	add	r4,r23,r21
   12224:	85000515 	stw	r20,20(r16)
   12228:	85c00415 	stw	r23,16(r16)
   1222c:	81000015 	stw	r4,0(r16)
   12230:	9029883a 	mov	r20,r18
   12234:	81c00215 	stw	r7,8(r16)
   12238:	902b883a 	mov	r21,r18
   1223c:	a80d883a 	mov	r6,r21
   12240:	b00b883a 	mov	r5,r22
   12244:	00128c00 	call	128c0 <memmove>
   12248:	80c00217 	ldw	r3,8(r16)
   1224c:	81c00017 	ldw	r7,0(r16)
   12250:	902f883a 	mov	r23,r18
   12254:	1d07c83a 	sub	r3,r3,r20
   12258:	3d4d883a 	add	r6,r7,r21
   1225c:	80c00215 	stw	r3,8(r16)
   12260:	81800015 	stw	r6,0(r16)
   12264:	0025883a 	mov	r18,zero
   12268:	e0800217 	ldw	r2,8(fp)
   1226c:	b5ed883a 	add	r22,r22,r23
   12270:	15c5c83a 	sub	r2,r2,r23
   12274:	e0800215 	stw	r2,8(fp)
   12278:	10002b26 	beq	r2,zero,12328 <__sfvwrite_r+0x2c0>
   1227c:	81c00017 	ldw	r7,0(r16)
   12280:	80c00217 	ldw	r3,8(r16)
   12284:	8280030b 	ldhu	r10,12(r16)
   12288:	3809883a 	mov	r4,r7
   1228c:	1829883a 	mov	r20,r3
   12290:	903fbe1e 	bne	r18,zero,1218c <__sfvwrite_r+0x124>
   12294:	8d800017 	ldw	r22,0(r17)
   12298:	8c800117 	ldw	r18,4(r17)
   1229c:	8c400204 	addi	r17,r17,8
   122a0:	003fb706 	br	12180 <__sfvwrite_r+0x118>
   122a4:	002f883a 	mov	r23,zero
   122a8:	0005883a 	mov	r2,zero
   122ac:	002d883a 	mov	r22,zero
   122b0:	002b883a 	mov	r21,zero
   122b4:	a8003426 	beq	r21,zero,12388 <__sfvwrite_r+0x320>
   122b8:	10003826 	beq	r2,zero,1239c <__sfvwrite_r+0x334>
   122bc:	b829883a 	mov	r20,r23
   122c0:	ad00012e 	bgeu	r21,r20,122c8 <__sfvwrite_r+0x260>
   122c4:	a829883a 	mov	r20,r21
   122c8:	81000017 	ldw	r4,0(r16)
   122cc:	80800417 	ldw	r2,16(r16)
   122d0:	84800217 	ldw	r18,8(r16)
   122d4:	81c00517 	ldw	r7,20(r16)
   122d8:	1100022e 	bgeu	r2,r4,122e4 <__sfvwrite_r+0x27c>
   122dc:	91e5883a 	add	r18,r18,r7
   122e0:	95003616 	blt	r18,r20,123bc <__sfvwrite_r+0x354>
   122e4:	a1c06a16 	blt	r20,r7,12490 <__sfvwrite_r+0x428>
   122e8:	80800917 	ldw	r2,36(r16)
   122ec:	81400717 	ldw	r5,28(r16)
   122f0:	b00d883a 	mov	r6,r22
   122f4:	9809883a 	mov	r4,r19
   122f8:	103ee83a 	callr	r2
   122fc:	1025883a 	mov	r18,r2
   12300:	00801a0e 	bge	zero,r2,1236c <__sfvwrite_r+0x304>
   12304:	bcafc83a 	sub	r23,r23,r18
   12308:	b8001426 	beq	r23,zero,1235c <__sfvwrite_r+0x2f4>
   1230c:	00800044 	movi	r2,1
   12310:	e0c00217 	ldw	r3,8(fp)
   12314:	b4ad883a 	add	r22,r22,r18
   12318:	acabc83a 	sub	r21,r21,r18
   1231c:	1c87c83a 	sub	r3,r3,r18
   12320:	e0c00215 	stw	r3,8(fp)
   12324:	183fe31e 	bne	r3,zero,122b4 <__sfvwrite_r+0x24c>
   12328:	0005883a 	mov	r2,zero
   1232c:	dfc00a17 	ldw	ra,40(sp)
   12330:	df000917 	ldw	fp,36(sp)
   12334:	ddc00817 	ldw	r23,32(sp)
   12338:	dd800717 	ldw	r22,28(sp)
   1233c:	dd400617 	ldw	r21,24(sp)
   12340:	dd000517 	ldw	r20,20(sp)
   12344:	dcc00417 	ldw	r19,16(sp)
   12348:	dc800317 	ldw	r18,12(sp)
   1234c:	dc400217 	ldw	r17,8(sp)
   12350:	dc000117 	ldw	r16,4(sp)
   12354:	dec00b04 	addi	sp,sp,44
   12358:	f800283a 	ret
   1235c:	800b883a 	mov	r5,r16
   12360:	9809883a 	mov	r4,r19
   12364:	00140140 	call	14014 <_fflush_r>
   12368:	103fe926 	beq	r2,zero,12310 <__sfvwrite_r+0x2a8>
   1236c:	8080030b 	ldhu	r2,12(r16)
   12370:	10801014 	ori	r2,r2,64
   12374:	8080030d 	sth	r2,12(r16)
   12378:	00bfffc4 	movi	r2,-1
   1237c:	003feb06 	br	1232c <__sfvwrite_r+0x2c4>
   12380:	0005883a 	mov	r2,zero
   12384:	f800283a 	ret
   12388:	8d400117 	ldw	r21,4(r17)
   1238c:	8805883a 	mov	r2,r17
   12390:	8c400204 	addi	r17,r17,8
   12394:	a83ffc26 	beq	r21,zero,12388 <__sfvwrite_r+0x320>
   12398:	15800017 	ldw	r22,0(r2)
   1239c:	a80d883a 	mov	r6,r21
   123a0:	01400284 	movi	r5,10
   123a4:	b009883a 	mov	r4,r22
   123a8:	001264c0 	call	1264c <memchr>
   123ac:	10004f26 	beq	r2,zero,124ec <__sfvwrite_r+0x484>
   123b0:	10800044 	addi	r2,r2,1
   123b4:	15afc83a 	sub	r23,r2,r22
   123b8:	003fc006 	br	122bc <__sfvwrite_r+0x254>
   123bc:	b00b883a 	mov	r5,r22
   123c0:	900d883a 	mov	r6,r18
   123c4:	00128c00 	call	128c0 <memmove>
   123c8:	80800017 	ldw	r2,0(r16)
   123cc:	800b883a 	mov	r5,r16
   123d0:	9809883a 	mov	r4,r19
   123d4:	1485883a 	add	r2,r2,r18
   123d8:	80800015 	stw	r2,0(r16)
   123dc:	00140140 	call	14014 <_fflush_r>
   123e0:	103fc826 	beq	r2,zero,12304 <__sfvwrite_r+0x29c>
   123e4:	003fe106 	br	1236c <__sfvwrite_r+0x304>
   123e8:	80800417 	ldw	r2,16(r16)
   123ec:	11c01236 	bltu	r2,r7,12438 <__sfvwrite_r+0x3d0>
   123f0:	81400517 	ldw	r5,20(r16)
   123f4:	91401036 	bltu	r18,r5,12438 <__sfvwrite_r+0x3d0>
   123f8:	00a00034 	movhi	r2,32768
   123fc:	902f883a 	mov	r23,r18
   12400:	90800136 	bltu	r18,r2,12408 <__sfvwrite_r+0x3a0>
   12404:	ddc00017 	ldw	r23,0(sp)
   12408:	b809883a 	mov	r4,r23
   1240c:	0014dfc0 	call	14dfc <__modsi3>
   12410:	80c00917 	ldw	r3,36(r16)
   12414:	81400717 	ldw	r5,28(r16)
   12418:	b88fc83a 	sub	r7,r23,r2
   1241c:	b00d883a 	mov	r6,r22
   12420:	9809883a 	mov	r4,r19
   12424:	183ee83a 	callr	r3
   12428:	102f883a 	mov	r23,r2
   1242c:	00bfcf0e 	bge	zero,r2,1236c <__sfvwrite_r+0x304>
   12430:	95e5c83a 	sub	r18,r18,r23
   12434:	003f8c06 	br	12268 <__sfvwrite_r+0x200>
   12438:	182f883a 	mov	r23,r3
   1243c:	90c0012e 	bgeu	r18,r3,12444 <__sfvwrite_r+0x3dc>
   12440:	902f883a 	mov	r23,r18
   12444:	3809883a 	mov	r4,r7
   12448:	b80d883a 	mov	r6,r23
   1244c:	b00b883a 	mov	r5,r22
   12450:	00128c00 	call	128c0 <memmove>
   12454:	80c00217 	ldw	r3,8(r16)
   12458:	81c00017 	ldw	r7,0(r16)
   1245c:	1dc7c83a 	sub	r3,r3,r23
   12460:	3dcf883a 	add	r7,r7,r23
   12464:	80c00215 	stw	r3,8(r16)
   12468:	81c00015 	stw	r7,0(r16)
   1246c:	183ff01e 	bne	r3,zero,12430 <__sfvwrite_r+0x3c8>
   12470:	800b883a 	mov	r5,r16
   12474:	9809883a 	mov	r4,r19
   12478:	00140140 	call	14014 <_fflush_r>
   1247c:	103fec26 	beq	r2,zero,12430 <__sfvwrite_r+0x3c8>
   12480:	003fba06 	br	1236c <__sfvwrite_r+0x304>
   12484:	9029883a 	mov	r20,r18
   12488:	902b883a 	mov	r21,r18
   1248c:	003f6b06 	br	1223c <__sfvwrite_r+0x1d4>
   12490:	a00d883a 	mov	r6,r20
   12494:	b00b883a 	mov	r5,r22
   12498:	00128c00 	call	128c0 <memmove>
   1249c:	80c00217 	ldw	r3,8(r16)
   124a0:	80800017 	ldw	r2,0(r16)
   124a4:	a025883a 	mov	r18,r20
   124a8:	1d07c83a 	sub	r3,r3,r20
   124ac:	1505883a 	add	r2,r2,r20
   124b0:	80c00215 	stw	r3,8(r16)
   124b4:	80800015 	stw	r2,0(r16)
   124b8:	003f9206 	br	12304 <__sfvwrite_r+0x29c>
   124bc:	9809883a 	mov	r4,r19
   124c0:	00138200 	call	13820 <_realloc_r>
   124c4:	102f883a 	mov	r23,r2
   124c8:	103f541e 	bne	r2,zero,1221c <__sfvwrite_r+0x1b4>
   124cc:	81400417 	ldw	r5,16(r16)
   124d0:	9809883a 	mov	r4,r19
   124d4:	0012d500 	call	12d50 <_free_r>
   124d8:	8080030b 	ldhu	r2,12(r16)
   124dc:	00c00304 	movi	r3,12
   124e0:	98c00015 	stw	r3,0(r19)
   124e4:	10bfdfcc 	andi	r2,r2,65407
   124e8:	003fa106 	br	12370 <__sfvwrite_r+0x308>
   124ec:	ad000044 	addi	r20,r21,1
   124f0:	a02f883a 	mov	r23,r20
   124f4:	003f7206 	br	122c0 <__sfvwrite_r+0x258>
   124f8:	00c00304 	movi	r3,12
   124fc:	8080030b 	ldhu	r2,12(r16)
   12500:	98c00015 	stw	r3,0(r19)
   12504:	003f9a06 	br	12370 <__sfvwrite_r+0x308>

00012508 <__swsetup_r>:
   12508:	00800074 	movhi	r2,1
   1250c:	109b6c17 	ldw	r2,28080(r2)
   12510:	defffd04 	addi	sp,sp,-12
   12514:	dc400115 	stw	r17,4(sp)
   12518:	dc000015 	stw	r16,0(sp)
   1251c:	dfc00215 	stw	ra,8(sp)
   12520:	2023883a 	mov	r17,r4
   12524:	2821883a 	mov	r16,r5
   12528:	10000226 	beq	r2,zero,12534 <__swsetup_r+0x2c>
   1252c:	10c00d17 	ldw	r3,52(r2)
   12530:	18003f26 	beq	r3,zero,12630 <__swsetup_r+0x128>
   12534:	80c0030b 	ldhu	r3,12(r16)
   12538:	1880020c 	andi	r2,r3,8
   1253c:	10001a26 	beq	r2,zero,125a8 <__swsetup_r+0xa0>
   12540:	80800417 	ldw	r2,16(r16)
   12544:	10002126 	beq	r2,zero,125cc <__swsetup_r+0xc4>
   12548:	1900004c 	andi	r4,r3,1
   1254c:	20000b1e 	bne	r4,zero,1257c <__swsetup_r+0x74>
   12550:	1900008c 	andi	r4,r3,2
   12554:	2000261e 	bne	r4,zero,125f0 <__swsetup_r+0xe8>
   12558:	81000517 	ldw	r4,20(r16)
   1255c:	81000215 	stw	r4,8(r16)
   12560:	10000b26 	beq	r2,zero,12590 <__swsetup_r+0x88>
   12564:	0005883a 	mov	r2,zero
   12568:	dfc00217 	ldw	ra,8(sp)
   1256c:	dc400117 	ldw	r17,4(sp)
   12570:	dc000017 	ldw	r16,0(sp)
   12574:	dec00304 	addi	sp,sp,12
   12578:	f800283a 	ret
   1257c:	81000517 	ldw	r4,20(r16)
   12580:	80000215 	stw	zero,8(r16)
   12584:	0109c83a 	sub	r4,zero,r4
   12588:	81000615 	stw	r4,24(r16)
   1258c:	103ff51e 	bne	r2,zero,12564 <__swsetup_r+0x5c>
   12590:	1900200c 	andi	r4,r3,128
   12594:	203ff426 	beq	r4,zero,12568 <__swsetup_r+0x60>
   12598:	18c01014 	ori	r3,r3,64
   1259c:	80c0030d 	sth	r3,12(r16)
   125a0:	00bfffc4 	movi	r2,-1
   125a4:	003ff006 	br	12568 <__swsetup_r+0x60>
   125a8:	1880040c 	andi	r2,r3,16
   125ac:	10002326 	beq	r2,zero,1263c <__swsetup_r+0x134>
   125b0:	1880010c 	andi	r2,r3,4
   125b4:	1000101e 	bne	r2,zero,125f8 <__swsetup_r+0xf0>
   125b8:	80800417 	ldw	r2,16(r16)
   125bc:	19000214 	ori	r4,r3,8
   125c0:	8100030d 	sth	r4,12(r16)
   125c4:	2007883a 	mov	r3,r4
   125c8:	103fdf1e 	bne	r2,zero,12548 <__swsetup_r+0x40>
   125cc:	1900a00c 	andi	r4,r3,640
   125d0:	21008020 	cmpeqi	r4,r4,512
   125d4:	203fdc1e 	bne	r4,zero,12548 <__swsetup_r+0x40>
   125d8:	800b883a 	mov	r5,r16
   125dc:	8809883a 	mov	r4,r17
   125e0:	00145340 	call	14534 <__smakebuf_r>
   125e4:	80c0030b 	ldhu	r3,12(r16)
   125e8:	80800417 	ldw	r2,16(r16)
   125ec:	003fd606 	br	12548 <__swsetup_r+0x40>
   125f0:	0009883a 	mov	r4,zero
   125f4:	003fd906 	br	1255c <__swsetup_r+0x54>
   125f8:	81400c17 	ldw	r5,48(r16)
   125fc:	28000626 	beq	r5,zero,12618 <__swsetup_r+0x110>
   12600:	80801004 	addi	r2,r16,64
   12604:	28800326 	beq	r5,r2,12614 <__swsetup_r+0x10c>
   12608:	8809883a 	mov	r4,r17
   1260c:	0012d500 	call	12d50 <_free_r>
   12610:	80c0030b 	ldhu	r3,12(r16)
   12614:	80000c15 	stw	zero,48(r16)
   12618:	80800417 	ldw	r2,16(r16)
   1261c:	013ff6c4 	movi	r4,-37
   12620:	20c6703a 	and	r3,r4,r3
   12624:	80000115 	stw	zero,4(r16)
   12628:	80800015 	stw	r2,0(r16)
   1262c:	003fe306 	br	125bc <__swsetup_r+0xb4>
   12630:	1009883a 	mov	r4,r2
   12634:	001442c0 	call	1442c <__sinit>
   12638:	003fbe06 	br	12534 <__swsetup_r+0x2c>
   1263c:	00800244 	movi	r2,9
   12640:	88800015 	stw	r2,0(r17)
   12644:	18c01014 	ori	r3,r3,64
   12648:	003fd406 	br	1259c <__swsetup_r+0x94>

0001264c <memchr>:
   1264c:	defffc04 	addi	sp,sp,-16
   12650:	dc000015 	stw	r16,0(sp)
   12654:	2021883a 	mov	r16,r4
   12658:	dc800215 	stw	r18,8(sp)
   1265c:	dfc00315 	stw	ra,12(sp)
   12660:	dc400115 	stw	r17,4(sp)
   12664:	808000cc 	andi	r2,r16,3
   12668:	2809883a 	mov	r4,r5
   1266c:	2825883a 	mov	r18,r5
   12670:	10000e26 	beq	r2,zero,126ac <memchr+0x60>
   12674:	347fffc4 	addi	r17,r6,-1
   12678:	30001726 	beq	r6,zero,126d8 <memchr+0x8c>
   1267c:	28c03fcc 	andi	r3,r5,255
   12680:	00000606 	br	1269c <memchr+0x50>
   12684:	84000044 	addi	r16,r16,1
   12688:	808000cc 	andi	r2,r16,3
   1268c:	10000826 	beq	r2,zero,126b0 <memchr+0x64>
   12690:	8c7fffc4 	addi	r17,r17,-1
   12694:	88bfffe0 	cmpeqi	r2,r17,-1
   12698:	10000f1e 	bne	r2,zero,126d8 <memchr+0x8c>
   1269c:	80800003 	ldbu	r2,0(r16)
   126a0:	10fff81e 	bne	r2,r3,12684 <memchr+0x38>
   126a4:	8005883a 	mov	r2,r16
   126a8:	00000c06 	br	126dc <memchr+0x90>
   126ac:	3023883a 	mov	r17,r6
   126b0:	88800130 	cmpltui	r2,r17,4
   126b4:	10000f26 	beq	r2,zero,126f4 <memchr+0xa8>
   126b8:	88000726 	beq	r17,zero,126d8 <memchr+0x8c>
   126bc:	8463883a 	add	r17,r16,r17
   126c0:	8005883a 	mov	r2,r16
   126c4:	90c03fcc 	andi	r3,r18,255
   126c8:	11000003 	ldbu	r4,0(r2)
   126cc:	20c00326 	beq	r4,r3,126dc <memchr+0x90>
   126d0:	10800044 	addi	r2,r2,1
   126d4:	88bffc1e 	bne	r17,r2,126c8 <memchr+0x7c>
   126d8:	0005883a 	mov	r2,zero
   126dc:	dfc00317 	ldw	ra,12(sp)
   126e0:	dc800217 	ldw	r18,8(sp)
   126e4:	dc400117 	ldw	r17,4(sp)
   126e8:	dc000017 	ldw	r16,0(sp)
   126ec:	dec00404 	addi	sp,sp,16
   126f0:	f800283a 	ret
   126f4:	01404074 	movhi	r5,257
   126f8:	29404044 	addi	r5,r5,257
   126fc:	21003fcc 	andi	r4,r4,255
   12700:	0014f300 	call	14f30 <__mulsi3>
   12704:	01bfbff4 	movhi	r6,65279
   12708:	01602074 	movhi	r5,32897
   1270c:	31bfbfc4 	addi	r6,r6,-257
   12710:	29602004 	addi	r5,r5,-32640
   12714:	00000406 	br	12728 <memchr+0xdc>
   12718:	8c7fff04 	addi	r17,r17,-4
   1271c:	88c00128 	cmpgeui	r3,r17,4
   12720:	84000104 	addi	r16,r16,4
   12724:	183fe426 	beq	r3,zero,126b8 <memchr+0x6c>
   12728:	80c00017 	ldw	r3,0(r16)
   1272c:	10c6f03a 	xor	r3,r2,r3
   12730:	1989883a 	add	r4,r3,r6
   12734:	00c6303a 	nor	r3,zero,r3
   12738:	20c6703a 	and	r3,r4,r3
   1273c:	1946703a 	and	r3,r3,r5
   12740:	183ff526 	beq	r3,zero,12718 <memchr+0xcc>
   12744:	003fdc06 	br	126b8 <memchr+0x6c>

00012748 <memcmp>:
   12748:	30800128 	cmpgeui	r2,r6,4
   1274c:	10000d26 	beq	r2,zero,12784 <memcmp+0x3c>
   12750:	2144b03a 	or	r2,r4,r5
   12754:	108000cc 	andi	r2,r2,3
   12758:	10000726 	beq	r2,zero,12778 <memcmp+0x30>
   1275c:	30bfffc4 	addi	r2,r6,-1
   12760:	00000a06 	br	1278c <memcmp+0x44>
   12764:	31bfff04 	addi	r6,r6,-4
   12768:	30800128 	cmpgeui	r2,r6,4
   1276c:	21000104 	addi	r4,r4,4
   12770:	29400104 	addi	r5,r5,4
   12774:	10000326 	beq	r2,zero,12784 <memcmp+0x3c>
   12778:	20c00017 	ldw	r3,0(r4)
   1277c:	28800017 	ldw	r2,0(r5)
   12780:	18bff826 	beq	r3,r2,12764 <memcmp+0x1c>
   12784:	30bfffc4 	addi	r2,r6,-1
   12788:	30000b26 	beq	r6,zero,127b8 <memcmp+0x70>
   1278c:	11800044 	addi	r6,r2,1
   12790:	218d883a 	add	r6,r4,r6
   12794:	00000106 	br	1279c <memcmp+0x54>
   12798:	21800726 	beq	r4,r6,127b8 <memcmp+0x70>
   1279c:	20800003 	ldbu	r2,0(r4)
   127a0:	28c00003 	ldbu	r3,0(r5)
   127a4:	21000044 	addi	r4,r4,1
   127a8:	29400044 	addi	r5,r5,1
   127ac:	10fffa26 	beq	r2,r3,12798 <memcmp+0x50>
   127b0:	10c5c83a 	sub	r2,r2,r3
   127b4:	f800283a 	ret
   127b8:	0005883a 	mov	r2,zero
   127bc:	f800283a 	ret

000127c0 <memcpy>:
   127c0:	30c00428 	cmpgeui	r3,r6,16
   127c4:	2005883a 	mov	r2,r4
   127c8:	18000b1e 	bne	r3,zero,127f8 <memcpy+0x38>
   127cc:	2007883a 	mov	r3,r4
   127d0:	31ffffc4 	addi	r7,r6,-1
   127d4:	30003426 	beq	r6,zero,128a8 <memcpy+0xe8>
   127d8:	39c00044 	addi	r7,r7,1
   127dc:	19cf883a 	add	r7,r3,r7
   127e0:	29800003 	ldbu	r6,0(r5)
   127e4:	18c00044 	addi	r3,r3,1
   127e8:	29400044 	addi	r5,r5,1
   127ec:	19bfffc5 	stb	r6,-1(r3)
   127f0:	19fffb1e 	bne	r3,r7,127e0 <memcpy+0x20>
   127f4:	f800283a 	ret
   127f8:	2146b03a 	or	r3,r4,r5
   127fc:	18c000cc 	andi	r3,r3,3
   12800:	18002a1e 	bne	r3,zero,128ac <memcpy+0xec>
   12804:	333ffc04 	addi	r12,r6,-16
   12808:	6018d13a 	srli	r12,r12,4
   1280c:	2811883a 	mov	r8,r5
   12810:	200f883a 	mov	r7,r4
   12814:	63000044 	addi	r12,r12,1
   12818:	6018913a 	slli	r12,r12,4
   1281c:	2307883a 	add	r3,r4,r12
   12820:	42c00017 	ldw	r11,0(r8)
   12824:	42800117 	ldw	r10,4(r8)
   12828:	42400217 	ldw	r9,8(r8)
   1282c:	41000317 	ldw	r4,12(r8)
   12830:	39c00404 	addi	r7,r7,16
   12834:	3afffc15 	stw	r11,-16(r7)
   12838:	3abffd15 	stw	r10,-12(r7)
   1283c:	3a7ffe15 	stw	r9,-8(r7)
   12840:	393fff15 	stw	r4,-4(r7)
   12844:	42000404 	addi	r8,r8,16
   12848:	38fff51e 	bne	r7,r3,12820 <memcpy+0x60>
   1284c:	3100030c 	andi	r4,r6,12
   12850:	2b0b883a 	add	r5,r5,r12
   12854:	324003cc 	andi	r9,r6,15
   12858:	20001726 	beq	r4,zero,128b8 <memcpy+0xf8>
   1285c:	2811883a 	mov	r8,r5
   12860:	1809883a 	mov	r4,r3
   12864:	1a57883a 	add	r11,r3,r9
   12868:	42800017 	ldw	r10,0(r8)
   1286c:	21000104 	addi	r4,r4,4
   12870:	590fc83a 	sub	r7,r11,r4
   12874:	39c00128 	cmpgeui	r7,r7,4
   12878:	22bfff15 	stw	r10,-4(r4)
   1287c:	42000104 	addi	r8,r8,4
   12880:	383ff91e 	bne	r7,zero,12868 <memcpy+0xa8>
   12884:	493fff04 	addi	r4,r9,-4
   12888:	2008d0ba 	srli	r4,r4,2
   1288c:	318000cc 	andi	r6,r6,3
   12890:	31ffffc4 	addi	r7,r6,-1
   12894:	21000044 	addi	r4,r4,1
   12898:	200890ba 	slli	r4,r4,2
   1289c:	1907883a 	add	r3,r3,r4
   128a0:	290b883a 	add	r5,r5,r4
   128a4:	303fcc1e 	bne	r6,zero,127d8 <memcpy+0x18>
   128a8:	f800283a 	ret
   128ac:	31ffffc4 	addi	r7,r6,-1
   128b0:	2007883a 	mov	r3,r4
   128b4:	003fc806 	br	127d8 <memcpy+0x18>
   128b8:	480d883a 	mov	r6,r9
   128bc:	003fc406 	br	127d0 <memcpy+0x10>

000128c0 <memmove>:
   128c0:	2005883a 	mov	r2,r4
   128c4:	29000a2e 	bgeu	r5,r4,128f0 <memmove+0x30>
   128c8:	298f883a 	add	r7,r5,r6
   128cc:	21c0082e 	bgeu	r4,r7,128f0 <memmove+0x30>
   128d0:	2187883a 	add	r3,r4,r6
   128d4:	30001226 	beq	r6,zero,12920 <memmove+0x60>
   128d8:	397fffc3 	ldbu	r5,-1(r7)
   128dc:	18ffffc4 	addi	r3,r3,-1
   128e0:	39ffffc4 	addi	r7,r7,-1
   128e4:	19400005 	stb	r5,0(r3)
   128e8:	10fffb1e 	bne	r2,r3,128d8 <memmove+0x18>
   128ec:	f800283a 	ret
   128f0:	30c00428 	cmpgeui	r3,r6,16
   128f4:	18000b1e 	bne	r3,zero,12924 <memmove+0x64>
   128f8:	1007883a 	mov	r3,r2
   128fc:	31ffffc4 	addi	r7,r6,-1
   12900:	30003626 	beq	r6,zero,129dc <memmove+0x11c>
   12904:	39c00044 	addi	r7,r7,1
   12908:	19cf883a 	add	r7,r3,r7
   1290c:	29800003 	ldbu	r6,0(r5)
   12910:	18c00044 	addi	r3,r3,1
   12914:	29400044 	addi	r5,r5,1
   12918:	19bfffc5 	stb	r6,-1(r3)
   1291c:	19fffb1e 	bne	r3,r7,1290c <memmove+0x4c>
   12920:	f800283a 	ret
   12924:	1146b03a 	or	r3,r2,r5
   12928:	18c000cc 	andi	r3,r3,3
   1292c:	1800281e 	bne	r3,zero,129d0 <memmove+0x110>
   12930:	313ffc04 	addi	r4,r6,-16
   12934:	2008d13a 	srli	r4,r4,4
   12938:	2811883a 	mov	r8,r5
   1293c:	100f883a 	mov	r7,r2
   12940:	21000044 	addi	r4,r4,1
   12944:	2008913a 	slli	r4,r4,4
   12948:	1107883a 	add	r3,r2,r4
   1294c:	42400017 	ldw	r9,0(r8)
   12950:	42000404 	addi	r8,r8,16
   12954:	39c00404 	addi	r7,r7,16
   12958:	3a7ffc15 	stw	r9,-16(r7)
   1295c:	427ffd17 	ldw	r9,-12(r8)
   12960:	3a7ffd15 	stw	r9,-12(r7)
   12964:	427ffe17 	ldw	r9,-8(r8)
   12968:	3a7ffe15 	stw	r9,-8(r7)
   1296c:	427fff17 	ldw	r9,-4(r8)
   12970:	3a7fff15 	stw	r9,-4(r7)
   12974:	38fff51e 	bne	r7,r3,1294c <memmove+0x8c>
   12978:	31c0030c 	andi	r7,r6,12
   1297c:	290b883a 	add	r5,r5,r4
   12980:	324003cc 	andi	r9,r6,15
   12984:	38001626 	beq	r7,zero,129e0 <memmove+0x120>
   12988:	2809883a 	mov	r4,r5
   1298c:	180f883a 	mov	r7,r3
   12990:	1a57883a 	add	r11,r3,r9
   12994:	22800017 	ldw	r10,0(r4)
   12998:	39c00104 	addi	r7,r7,4
   1299c:	59d1c83a 	sub	r8,r11,r7
   129a0:	42000128 	cmpgeui	r8,r8,4
   129a4:	3abfff15 	stw	r10,-4(r7)
   129a8:	21000104 	addi	r4,r4,4
   129ac:	403ff91e 	bne	r8,zero,12994 <memmove+0xd4>
   129b0:	493fff04 	addi	r4,r9,-4
   129b4:	2008d0ba 	srli	r4,r4,2
   129b8:	318000cc 	andi	r6,r6,3
   129bc:	21000044 	addi	r4,r4,1
   129c0:	200890ba 	slli	r4,r4,2
   129c4:	1907883a 	add	r3,r3,r4
   129c8:	290b883a 	add	r5,r5,r4
   129cc:	003fcb06 	br	128fc <memmove+0x3c>
   129d0:	31ffffc4 	addi	r7,r6,-1
   129d4:	1007883a 	mov	r3,r2
   129d8:	003fca06 	br	12904 <memmove+0x44>
   129dc:	f800283a 	ret
   129e0:	480d883a 	mov	r6,r9
   129e4:	003fc506 	br	128fc <memmove+0x3c>

000129e8 <strlen>:
   129e8:	208000cc 	andi	r2,r4,3
   129ec:	10000926 	beq	r2,zero,12a14 <strlen+0x2c>
   129f0:	2005883a 	mov	r2,r4
   129f4:	00000306 	br	12a04 <strlen+0x1c>
   129f8:	10800044 	addi	r2,r2,1
   129fc:	10c000cc 	andi	r3,r2,3
   12a00:	18000526 	beq	r3,zero,12a18 <strlen+0x30>
   12a04:	10c00007 	ldb	r3,0(r2)
   12a08:	183ffb1e 	bne	r3,zero,129f8 <strlen+0x10>
   12a0c:	1105c83a 	sub	r2,r2,r4
   12a10:	f800283a 	ret
   12a14:	2005883a 	mov	r2,r4
   12a18:	11400017 	ldw	r5,0(r2)
   12a1c:	01ffbff4 	movhi	r7,65279
   12a20:	39ffbfc4 	addi	r7,r7,-257
   12a24:	29c7883a 	add	r3,r5,r7
   12a28:	01a02074 	movhi	r6,32897
   12a2c:	014a303a 	nor	r5,zero,r5
   12a30:	1946703a 	and	r3,r3,r5
   12a34:	31a02004 	addi	r6,r6,-32640
   12a38:	1986703a 	and	r3,r3,r6
   12a3c:	1800071e 	bne	r3,zero,12a5c <strlen+0x74>
   12a40:	11400117 	ldw	r5,4(r2)
   12a44:	10800104 	addi	r2,r2,4
   12a48:	29c7883a 	add	r3,r5,r7
   12a4c:	014a303a 	nor	r5,zero,r5
   12a50:	1946703a 	and	r3,r3,r5
   12a54:	1986703a 	and	r3,r3,r6
   12a58:	183ff926 	beq	r3,zero,12a40 <strlen+0x58>
   12a5c:	10c00007 	ldb	r3,0(r2)
   12a60:	183fea26 	beq	r3,zero,12a0c <strlen+0x24>
   12a64:	10c00047 	ldb	r3,1(r2)
   12a68:	10800044 	addi	r2,r2,1
   12a6c:	183fe726 	beq	r3,zero,12a0c <strlen+0x24>
   12a70:	10c00047 	ldb	r3,1(r2)
   12a74:	10800044 	addi	r2,r2,1
   12a78:	183ffa1e 	bne	r3,zero,12a64 <strlen+0x7c>
   12a7c:	003fe306 	br	12a0c <strlen+0x24>

00012a80 <__register_exitproc>:
   12a80:	008000b4 	movhi	r2,2
   12a84:	10a15517 	ldw	r2,-31404(r2)
   12a88:	10001726 	beq	r2,zero,12ae8 <__register_exitproc+0x68>
   12a8c:	10c00117 	ldw	r3,4(r2)
   12a90:	1a000808 	cmpgei	r8,r3,32
   12a94:	40001d1e 	bne	r8,zero,12b0c <__register_exitproc+0x8c>
   12a98:	20000b26 	beq	r4,zero,12ac8 <__register_exitproc+0x48>
   12a9c:	181090ba 	slli	r8,r3,2
   12aa0:	02400044 	movi	r9,1
   12aa4:	48d2983a 	sll	r9,r9,r3
   12aa8:	1211883a 	add	r8,r2,r8
   12aac:	41802215 	stw	r6,136(r8)
   12ab0:	11806217 	ldw	r6,392(r2)
   12ab4:	21000098 	cmpnei	r4,r4,2
   12ab8:	324cb03a 	or	r6,r6,r9
   12abc:	11806215 	stw	r6,392(r2)
   12ac0:	41c04215 	stw	r7,264(r8)
   12ac4:	20000d26 	beq	r4,zero,12afc <__register_exitproc+0x7c>
   12ac8:	19000084 	addi	r4,r3,2
   12acc:	200890ba 	slli	r4,r4,2
   12ad0:	18c00044 	addi	r3,r3,1
   12ad4:	10c00115 	stw	r3,4(r2)
   12ad8:	1105883a 	add	r2,r2,r4
   12adc:	11400015 	stw	r5,0(r2)
   12ae0:	0005883a 	mov	r2,zero
   12ae4:	f800283a 	ret
   12ae8:	008000b4 	movhi	r2,2
   12aec:	10a19904 	addi	r2,r2,-31132
   12af0:	00c000b4 	movhi	r3,2
   12af4:	18a15515 	stw	r2,-31404(r3)
   12af8:	003fe406 	br	12a8c <__register_exitproc+0xc>
   12afc:	11006317 	ldw	r4,396(r2)
   12b00:	2248b03a 	or	r4,r4,r9
   12b04:	11006315 	stw	r4,396(r2)
   12b08:	003fef06 	br	12ac8 <__register_exitproc+0x48>
   12b0c:	00bfffc4 	movi	r2,-1
   12b10:	f800283a 	ret

00012b14 <__call_exitprocs>:
   12b14:	defff804 	addi	sp,sp,-32
   12b18:	008000b4 	movhi	r2,2
   12b1c:	dc800215 	stw	r18,8(sp)
   12b20:	14a15517 	ldw	r18,-31404(r2)
   12b24:	dfc00715 	stw	ra,28(sp)
   12b28:	dd800615 	stw	r22,24(sp)
   12b2c:	dd400515 	stw	r21,20(sp)
   12b30:	dd000415 	stw	r20,16(sp)
   12b34:	dcc00315 	stw	r19,12(sp)
   12b38:	dc400115 	stw	r17,4(sp)
   12b3c:	dc000015 	stw	r16,0(sp)
   12b40:	90001026 	beq	r18,zero,12b84 <__call_exitprocs+0x70>
   12b44:	2029883a 	mov	r20,r4
   12b48:	282b883a 	mov	r21,r5
   12b4c:	04c00044 	movi	r19,1
   12b50:	94000117 	ldw	r16,4(r18)
   12b54:	847fffc4 	addi	r17,r16,-1
   12b58:	88000a16 	blt	r17,zero,12b84 <__call_exitprocs+0x70>
   12b5c:	84000044 	addi	r16,r16,1
   12b60:	802090ba 	slli	r16,r16,2
   12b64:	9421883a 	add	r16,r18,r16
   12b68:	a8001026 	beq	r21,zero,12bac <__call_exitprocs+0x98>
   12b6c:	80804017 	ldw	r2,256(r16)
   12b70:	15400e26 	beq	r2,r21,12bac <__call_exitprocs+0x98>
   12b74:	8c7fffc4 	addi	r17,r17,-1
   12b78:	88bfffd8 	cmpnei	r2,r17,-1
   12b7c:	843fff04 	addi	r16,r16,-4
   12b80:	103ff91e 	bne	r2,zero,12b68 <__call_exitprocs+0x54>
   12b84:	dfc00717 	ldw	ra,28(sp)
   12b88:	dd800617 	ldw	r22,24(sp)
   12b8c:	dd400517 	ldw	r21,20(sp)
   12b90:	dd000417 	ldw	r20,16(sp)
   12b94:	dcc00317 	ldw	r19,12(sp)
   12b98:	dc800217 	ldw	r18,8(sp)
   12b9c:	dc400117 	ldw	r17,4(sp)
   12ba0:	dc000017 	ldw	r16,0(sp)
   12ba4:	dec00804 	addi	sp,sp,32
   12ba8:	f800283a 	ret
   12bac:	90800117 	ldw	r2,4(r18)
   12bb0:	81800017 	ldw	r6,0(r16)
   12bb4:	10bfffc4 	addi	r2,r2,-1
   12bb8:	14401826 	beq	r2,r17,12c1c <__call_exitprocs+0x108>
   12bbc:	80000015 	stw	zero,0(r16)
   12bc0:	303fec26 	beq	r6,zero,12b74 <__call_exitprocs+0x60>
   12bc4:	9c46983a 	sll	r3,r19,r17
   12bc8:	90806217 	ldw	r2,392(r18)
   12bcc:	95800117 	ldw	r22,4(r18)
   12bd0:	1884703a 	and	r2,r3,r2
   12bd4:	1000091e 	bne	r2,zero,12bfc <__call_exitprocs+0xe8>
   12bd8:	303ee83a 	callr	r6
   12bdc:	90c00117 	ldw	r3,4(r18)
   12be0:	008000b4 	movhi	r2,2
   12be4:	10a15517 	ldw	r2,-31404(r2)
   12be8:	1d80011e 	bne	r3,r22,12bf0 <__call_exitprocs+0xdc>
   12bec:	14bfe126 	beq	r2,r18,12b74 <__call_exitprocs+0x60>
   12bf0:	103fe426 	beq	r2,zero,12b84 <__call_exitprocs+0x70>
   12bf4:	1025883a 	mov	r18,r2
   12bf8:	003fd506 	br	12b50 <__call_exitprocs+0x3c>
   12bfc:	90806317 	ldw	r2,396(r18)
   12c00:	81002017 	ldw	r4,128(r16)
   12c04:	1886703a 	and	r3,r3,r2
   12c08:	1800061e 	bne	r3,zero,12c24 <__call_exitprocs+0x110>
   12c0c:	200b883a 	mov	r5,r4
   12c10:	a009883a 	mov	r4,r20
   12c14:	303ee83a 	callr	r6
   12c18:	003ff006 	br	12bdc <__call_exitprocs+0xc8>
   12c1c:	94400115 	stw	r17,4(r18)
   12c20:	003fe706 	br	12bc0 <__call_exitprocs+0xac>
   12c24:	303ee83a 	callr	r6
   12c28:	003fec06 	br	12bdc <__call_exitprocs+0xc8>

00012c2c <_malloc_trim_r>:
   12c2c:	defffa04 	addi	sp,sp,-24
   12c30:	dcc00315 	stw	r19,12(sp)
   12c34:	04c00074 	movhi	r19,1
   12c38:	dd000415 	stw	r20,16(sp)
   12c3c:	dc800215 	stw	r18,8(sp)
   12c40:	dc400115 	stw	r17,4(sp)
   12c44:	dc000015 	stw	r16,0(sp)
   12c48:	2829883a 	mov	r20,r5
   12c4c:	dfc00515 	stw	ra,20(sp)
   12c50:	9cda5e04 	addi	r19,r19,27000
   12c54:	2025883a 	mov	r18,r4
   12c58:	00152940 	call	15294 <__malloc_lock>
   12c5c:	98800217 	ldw	r2,8(r19)
   12c60:	14400117 	ldw	r17,4(r2)
   12c64:	00bfff04 	movi	r2,-4
   12c68:	88a2703a 	and	r17,r17,r2
   12c6c:	8c03fbc4 	addi	r16,r17,4079
   12c70:	8521c83a 	sub	r16,r16,r20
   12c74:	8020d33a 	srli	r16,r16,12
   12c78:	843fffc4 	addi	r16,r16,-1
   12c7c:	8020933a 	slli	r16,r16,12
   12c80:	80840008 	cmpgei	r2,r16,4096
   12c84:	10000626 	beq	r2,zero,12ca0 <_malloc_trim_r+0x74>
   12c88:	000b883a 	mov	r5,zero
   12c8c:	9009883a 	mov	r4,r18
   12c90:	0014bc00 	call	14bc0 <_sbrk_r>
   12c94:	98c00217 	ldw	r3,8(r19)
   12c98:	1c47883a 	add	r3,r3,r17
   12c9c:	10c00b26 	beq	r2,r3,12ccc <_malloc_trim_r+0xa0>
   12ca0:	9009883a 	mov	r4,r18
   12ca4:	00152b80 	call	152b8 <__malloc_unlock>
   12ca8:	0005883a 	mov	r2,zero
   12cac:	dfc00517 	ldw	ra,20(sp)
   12cb0:	dd000417 	ldw	r20,16(sp)
   12cb4:	dcc00317 	ldw	r19,12(sp)
   12cb8:	dc800217 	ldw	r18,8(sp)
   12cbc:	dc400117 	ldw	r17,4(sp)
   12cc0:	dc000017 	ldw	r16,0(sp)
   12cc4:	dec00604 	addi	sp,sp,24
   12cc8:	f800283a 	ret
   12ccc:	040bc83a 	sub	r5,zero,r16
   12cd0:	9009883a 	mov	r4,r18
   12cd4:	0014bc00 	call	14bc0 <_sbrk_r>
   12cd8:	10bfffd8 	cmpnei	r2,r2,-1
   12cdc:	10000d26 	beq	r2,zero,12d14 <_malloc_trim_r+0xe8>
   12ce0:	008000b4 	movhi	r2,2
   12ce4:	10a1fd17 	ldw	r2,-30732(r2)
   12ce8:	98c00217 	ldw	r3,8(r19)
   12cec:	8c23c83a 	sub	r17,r17,r16
   12cf0:	8c400054 	ori	r17,r17,1
   12cf4:	1405c83a 	sub	r2,r2,r16
   12cf8:	1c400115 	stw	r17,4(r3)
   12cfc:	9009883a 	mov	r4,r18
   12d00:	00c000b4 	movhi	r3,2
   12d04:	18a1fd15 	stw	r2,-30732(r3)
   12d08:	00152b80 	call	152b8 <__malloc_unlock>
   12d0c:	00800044 	movi	r2,1
   12d10:	003fe606 	br	12cac <_malloc_trim_r+0x80>
   12d14:	000b883a 	mov	r5,zero
   12d18:	9009883a 	mov	r4,r18
   12d1c:	0014bc00 	call	14bc0 <_sbrk_r>
   12d20:	99000217 	ldw	r4,8(r19)
   12d24:	1107c83a 	sub	r3,r2,r4
   12d28:	19400410 	cmplti	r5,r3,16
   12d2c:	283fdc1e 	bne	r5,zero,12ca0 <_malloc_trim_r+0x74>
   12d30:	01400074 	movhi	r5,1
   12d34:	295b6d17 	ldw	r5,28084(r5)
   12d38:	18c00054 	ori	r3,r3,1
   12d3c:	20c00115 	stw	r3,4(r4)
   12d40:	1145c83a 	sub	r2,r2,r5
   12d44:	014000b4 	movhi	r5,2
   12d48:	28a1fd15 	stw	r2,-30732(r5)
   12d4c:	003fd406 	br	12ca0 <_malloc_trim_r+0x74>

00012d50 <_free_r>:
   12d50:	28005f26 	beq	r5,zero,12ed0 <_free_r+0x180>
   12d54:	defffd04 	addi	sp,sp,-12
   12d58:	dc400115 	stw	r17,4(sp)
   12d5c:	dc000015 	stw	r16,0(sp)
   12d60:	2023883a 	mov	r17,r4
   12d64:	2821883a 	mov	r16,r5
   12d68:	dfc00215 	stw	ra,8(sp)
   12d6c:	00152940 	call	15294 <__malloc_lock>
   12d70:	81ffff17 	ldw	r7,-4(r16)
   12d74:	00bfff84 	movi	r2,-2
   12d78:	80fffe04 	addi	r3,r16,-8
   12d7c:	3884703a 	and	r2,r7,r2
   12d80:	01800074 	movhi	r6,1
   12d84:	1889883a 	add	r4,r3,r2
   12d88:	319a5e04 	addi	r6,r6,27000
   12d8c:	21400117 	ldw	r5,4(r4)
   12d90:	32000217 	ldw	r8,8(r6)
   12d94:	027fff04 	movi	r9,-4
   12d98:	2a4a703a 	and	r5,r5,r9
   12d9c:	41006526 	beq	r8,r4,12f34 <_free_r+0x1e4>
   12da0:	21400115 	stw	r5,4(r4)
   12da4:	39c0004c 	andi	r7,r7,1
   12da8:	2151883a 	add	r8,r4,r5
   12dac:	3800281e 	bne	r7,zero,12e50 <_free_r+0x100>
   12db0:	82bffe17 	ldw	r10,-8(r16)
   12db4:	42000117 	ldw	r8,4(r8)
   12db8:	01c00074 	movhi	r7,1
   12dbc:	1a87c83a 	sub	r3,r3,r10
   12dc0:	1a400217 	ldw	r9,8(r3)
   12dc4:	39da6004 	addi	r7,r7,27008
   12dc8:	1285883a 	add	r2,r2,r10
   12dcc:	4200004c 	andi	r8,r8,1
   12dd0:	49c04d26 	beq	r9,r7,12f08 <_free_r+0x1b8>
   12dd4:	1a800317 	ldw	r10,12(r3)
   12dd8:	4a800315 	stw	r10,12(r9)
   12ddc:	52400215 	stw	r9,8(r10)
   12de0:	40006926 	beq	r8,zero,12f88 <_free_r+0x238>
   12de4:	11400054 	ori	r5,r2,1
   12de8:	19400115 	stw	r5,4(r3)
   12dec:	20800015 	stw	r2,0(r4)
   12df0:	11008028 	cmpgeui	r4,r2,512
   12df4:	20001e1e 	bne	r4,zero,12e70 <_free_r+0x120>
   12df8:	1008d0fa 	srli	r4,r2,3
   12dfc:	100ad17a 	srli	r5,r2,5
   12e00:	31c00117 	ldw	r7,4(r6)
   12e04:	20800044 	addi	r2,r4,1
   12e08:	100490fa 	slli	r2,r2,3
   12e0c:	01000044 	movi	r4,1
   12e10:	2148983a 	sll	r4,r4,r5
   12e14:	3085883a 	add	r2,r6,r2
   12e18:	11400017 	ldw	r5,0(r2)
   12e1c:	21c8b03a 	or	r4,r4,r7
   12e20:	11fffe04 	addi	r7,r2,-8
   12e24:	19c00315 	stw	r7,12(r3)
   12e28:	19400215 	stw	r5,8(r3)
   12e2c:	31000115 	stw	r4,4(r6)
   12e30:	10c00015 	stw	r3,0(r2)
   12e34:	28c00315 	stw	r3,12(r5)
   12e38:	8809883a 	mov	r4,r17
   12e3c:	dfc00217 	ldw	ra,8(sp)
   12e40:	dc400117 	ldw	r17,4(sp)
   12e44:	dc000017 	ldw	r16,0(sp)
   12e48:	dec00304 	addi	sp,sp,12
   12e4c:	00152b81 	jmpi	152b8 <__malloc_unlock>
   12e50:	41c00117 	ldw	r7,4(r8)
   12e54:	39c0004c 	andi	r7,r7,1
   12e58:	38001e26 	beq	r7,zero,12ed4 <_free_r+0x184>
   12e5c:	11400054 	ori	r5,r2,1
   12e60:	817fff15 	stw	r5,-4(r16)
   12e64:	20800015 	stw	r2,0(r4)
   12e68:	11008028 	cmpgeui	r4,r2,512
   12e6c:	203fe226 	beq	r4,zero,12df8 <_free_r+0xa8>
   12e70:	1008d27a 	srli	r4,r2,9
   12e74:	21400168 	cmpgeui	r5,r4,5
   12e78:	2800451e 	bne	r5,zero,12f90 <_free_r+0x240>
   12e7c:	1008d1ba 	srli	r4,r2,6
   12e80:	21c00e44 	addi	r7,r4,57
   12e84:	380e90fa 	slli	r7,r7,3
   12e88:	21000e04 	addi	r4,r4,56
   12e8c:	31cf883a 	add	r7,r6,r7
   12e90:	39400017 	ldw	r5,0(r7)
   12e94:	39fffe04 	addi	r7,r7,-8
   12e98:	39405326 	beq	r7,r5,12fe8 <_free_r+0x298>
   12e9c:	01bfff04 	movi	r6,-4
   12ea0:	00000206 	br	12eac <_free_r+0x15c>
   12ea4:	29400217 	ldw	r5,8(r5)
   12ea8:	39400326 	beq	r7,r5,12eb8 <_free_r+0x168>
   12eac:	29000117 	ldw	r4,4(r5)
   12eb0:	2188703a 	and	r4,r4,r6
   12eb4:	113ffb36 	bltu	r2,r4,12ea4 <_free_r+0x154>
   12eb8:	29c00317 	ldw	r7,12(r5)
   12ebc:	19c00315 	stw	r7,12(r3)
   12ec0:	19400215 	stw	r5,8(r3)
   12ec4:	38c00215 	stw	r3,8(r7)
   12ec8:	28c00315 	stw	r3,12(r5)
   12ecc:	003fda06 	br	12e38 <_free_r+0xe8>
   12ed0:	f800283a 	ret
   12ed4:	01c00074 	movhi	r7,1
   12ed8:	1145883a 	add	r2,r2,r5
   12edc:	39da6004 	addi	r7,r7,27008
   12ee0:	21400217 	ldw	r5,8(r4)
   12ee4:	29c03726 	beq	r5,r7,12fc4 <_free_r+0x274>
   12ee8:	22000317 	ldw	r8,12(r4)
   12eec:	11c00054 	ori	r7,r2,1
   12ef0:	1889883a 	add	r4,r3,r2
   12ef4:	2a000315 	stw	r8,12(r5)
   12ef8:	41400215 	stw	r5,8(r8)
   12efc:	19c00115 	stw	r7,4(r3)
   12f00:	20800015 	stw	r2,0(r4)
   12f04:	003fba06 	br	12df0 <_free_r+0xa0>
   12f08:	40004f1e 	bne	r8,zero,13048 <_free_r+0x2f8>
   12f0c:	21800217 	ldw	r6,8(r4)
   12f10:	21000317 	ldw	r4,12(r4)
   12f14:	288b883a 	add	r5,r5,r2
   12f18:	28800054 	ori	r2,r5,1
   12f1c:	31000315 	stw	r4,12(r6)
   12f20:	21800215 	stw	r6,8(r4)
   12f24:	18800115 	stw	r2,4(r3)
   12f28:	1947883a 	add	r3,r3,r5
   12f2c:	19400015 	stw	r5,0(r3)
   12f30:	003fc106 	br	12e38 <_free_r+0xe8>
   12f34:	39c0004c 	andi	r7,r7,1
   12f38:	114b883a 	add	r5,r2,r5
   12f3c:	3800071e 	bne	r7,zero,12f5c <_free_r+0x20c>
   12f40:	81fffe17 	ldw	r7,-8(r16)
   12f44:	19c7c83a 	sub	r3,r3,r7
   12f48:	18800317 	ldw	r2,12(r3)
   12f4c:	19000217 	ldw	r4,8(r3)
   12f50:	29cb883a 	add	r5,r5,r7
   12f54:	20800315 	stw	r2,12(r4)
   12f58:	11000215 	stw	r4,8(r2)
   12f5c:	00800074 	movhi	r2,1
   12f60:	29000054 	ori	r4,r5,1
   12f64:	109b6e17 	ldw	r2,28088(r2)
   12f68:	19000115 	stw	r4,4(r3)
   12f6c:	30c00215 	stw	r3,8(r6)
   12f70:	28bfb136 	bltu	r5,r2,12e38 <_free_r+0xe8>
   12f74:	008000b4 	movhi	r2,2
   12f78:	11615817 	ldw	r5,-31392(r2)
   12f7c:	8809883a 	mov	r4,r17
   12f80:	0012c2c0 	call	12c2c <_malloc_trim_r>
   12f84:	003fac06 	br	12e38 <_free_r+0xe8>
   12f88:	1145883a 	add	r2,r2,r5
   12f8c:	003fd406 	br	12ee0 <_free_r+0x190>
   12f90:	21400568 	cmpgeui	r5,r4,21
   12f94:	28000726 	beq	r5,zero,12fb4 <_free_r+0x264>
   12f98:	21401568 	cmpgeui	r5,r4,85
   12f9c:	2800191e 	bne	r5,zero,13004 <_free_r+0x2b4>
   12fa0:	1008d33a 	srli	r4,r2,12
   12fa4:	21c01bc4 	addi	r7,r4,111
   12fa8:	380e90fa 	slli	r7,r7,3
   12fac:	21001b84 	addi	r4,r4,110
   12fb0:	003fb606 	br	12e8c <_free_r+0x13c>
   12fb4:	21c01704 	addi	r7,r4,92
   12fb8:	380e90fa 	slli	r7,r7,3
   12fbc:	210016c4 	addi	r4,r4,91
   12fc0:	003fb206 	br	12e8c <_free_r+0x13c>
   12fc4:	30c00515 	stw	r3,20(r6)
   12fc8:	30c00415 	stw	r3,16(r6)
   12fcc:	11000054 	ori	r4,r2,1
   12fd0:	19c00315 	stw	r7,12(r3)
   12fd4:	19c00215 	stw	r7,8(r3)
   12fd8:	19000115 	stw	r4,4(r3)
   12fdc:	1887883a 	add	r3,r3,r2
   12fe0:	18800015 	stw	r2,0(r3)
   12fe4:	003f9406 	br	12e38 <_free_r+0xe8>
   12fe8:	2009d0ba 	srai	r4,r4,2
   12fec:	00800044 	movi	r2,1
   12ff0:	32000117 	ldw	r8,4(r6)
   12ff4:	1104983a 	sll	r2,r2,r4
   12ff8:	1204b03a 	or	r2,r2,r8
   12ffc:	30800115 	stw	r2,4(r6)
   13000:	003fae06 	br	12ebc <_free_r+0x16c>
   13004:	21405568 	cmpgeui	r5,r4,341
   13008:	2800051e 	bne	r5,zero,13020 <_free_r+0x2d0>
   1300c:	1008d3fa 	srli	r4,r2,15
   13010:	21c01e04 	addi	r7,r4,120
   13014:	380e90fa 	slli	r7,r7,3
   13018:	21001dc4 	addi	r4,r4,119
   1301c:	003f9b06 	br	12e8c <_free_r+0x13c>
   13020:	21015568 	cmpgeui	r4,r4,1365
   13024:	2000051e 	bne	r4,zero,1303c <_free_r+0x2ec>
   13028:	1008d4ba 	srli	r4,r2,18
   1302c:	21c01f44 	addi	r7,r4,125
   13030:	380e90fa 	slli	r7,r7,3
   13034:	21001f04 	addi	r4,r4,124
   13038:	003f9406 	br	12e8c <_free_r+0x13c>
   1303c:	01c0fe04 	movi	r7,1016
   13040:	01001f84 	movi	r4,126
   13044:	003f9106 	br	12e8c <_free_r+0x13c>
   13048:	11400054 	ori	r5,r2,1
   1304c:	19400115 	stw	r5,4(r3)
   13050:	20800015 	stw	r2,0(r4)
   13054:	003f7806 	br	12e38 <_free_r+0xe8>

00013058 <_malloc_r>:
   13058:	defff604 	addi	sp,sp,-40
   1305c:	dc400115 	stw	r17,4(sp)
   13060:	2c4002c4 	addi	r17,r5,11
   13064:	dc800215 	stw	r18,8(sp)
   13068:	dfc00915 	stw	ra,36(sp)
   1306c:	df000815 	stw	fp,32(sp)
   13070:	ddc00715 	stw	r23,28(sp)
   13074:	dd800615 	stw	r22,24(sp)
   13078:	dd400515 	stw	r21,20(sp)
   1307c:	dd000415 	stw	r20,16(sp)
   13080:	dcc00315 	stw	r19,12(sp)
   13084:	dc000015 	stw	r16,0(sp)
   13088:	888005e8 	cmpgeui	r2,r17,23
   1308c:	2025883a 	mov	r18,r4
   13090:	1000261e 	bne	r2,zero,1312c <_malloc_r+0xd4>
   13094:	29400468 	cmpgeui	r5,r5,17
   13098:	28008e1e 	bne	r5,zero,132d4 <_malloc_r+0x27c>
   1309c:	00152940 	call	15294 <__malloc_lock>
   130a0:	04400404 	movi	r17,16
   130a4:	00800604 	movi	r2,24
   130a8:	01c00084 	movi	r7,2
   130ac:	04c00074 	movhi	r19,1
   130b0:	9cda5e04 	addi	r19,r19,27000
   130b4:	9885883a 	add	r2,r19,r2
   130b8:	14000117 	ldw	r16,4(r2)
   130bc:	10fffe04 	addi	r3,r2,-8
   130c0:	80c0d026 	beq	r16,r3,13404 <_malloc_r+0x3ac>
   130c4:	80800117 	ldw	r2,4(r16)
   130c8:	81000317 	ldw	r4,12(r16)
   130cc:	81400217 	ldw	r5,8(r16)
   130d0:	00ffff04 	movi	r3,-4
   130d4:	10c4703a 	and	r2,r2,r3
   130d8:	8085883a 	add	r2,r16,r2
   130dc:	10c00117 	ldw	r3,4(r2)
   130e0:	29000315 	stw	r4,12(r5)
   130e4:	21400215 	stw	r5,8(r4)
   130e8:	18c00054 	ori	r3,r3,1
   130ec:	10c00115 	stw	r3,4(r2)
   130f0:	9009883a 	mov	r4,r18
   130f4:	00152b80 	call	152b8 <__malloc_unlock>
   130f8:	80800204 	addi	r2,r16,8
   130fc:	dfc00917 	ldw	ra,36(sp)
   13100:	df000817 	ldw	fp,32(sp)
   13104:	ddc00717 	ldw	r23,28(sp)
   13108:	dd800617 	ldw	r22,24(sp)
   1310c:	dd400517 	ldw	r21,20(sp)
   13110:	dd000417 	ldw	r20,16(sp)
   13114:	dcc00317 	ldw	r19,12(sp)
   13118:	dc800217 	ldw	r18,8(sp)
   1311c:	dc400117 	ldw	r17,4(sp)
   13120:	dc000017 	ldw	r16,0(sp)
   13124:	dec00a04 	addi	sp,sp,40
   13128:	f800283a 	ret
   1312c:	00bffe04 	movi	r2,-8
   13130:	88a2703a 	and	r17,r17,r2
   13134:	88006716 	blt	r17,zero,132d4 <_malloc_r+0x27c>
   13138:	89406636 	bltu	r17,r5,132d4 <_malloc_r+0x27c>
   1313c:	00152940 	call	15294 <__malloc_lock>
   13140:	88807e28 	cmpgeui	r2,r17,504
   13144:	1000f426 	beq	r2,zero,13518 <_malloc_r+0x4c0>
   13148:	8804d27a 	srli	r2,r17,9
   1314c:	10006526 	beq	r2,zero,132e4 <_malloc_r+0x28c>
   13150:	10c00168 	cmpgeui	r3,r2,5
   13154:	1800c81e 	bne	r3,zero,13478 <_malloc_r+0x420>
   13158:	8804d1ba 	srli	r2,r17,6
   1315c:	11c00e44 	addi	r7,r2,57
   13160:	380890fa 	slli	r4,r7,3
   13164:	12000e04 	addi	r8,r2,56
   13168:	04c00074 	movhi	r19,1
   1316c:	9cda5e04 	addi	r19,r19,27000
   13170:	9909883a 	add	r4,r19,r4
   13174:	24000117 	ldw	r16,4(r4)
   13178:	213ffe04 	addi	r4,r4,-8
   1317c:	24000c26 	beq	r4,r16,131b0 <_malloc_r+0x158>
   13180:	01bfff04 	movi	r6,-4
   13184:	00000406 	br	13198 <_malloc_r+0x140>
   13188:	81400317 	ldw	r5,12(r16)
   1318c:	1800970e 	bge	r3,zero,133ec <_malloc_r+0x394>
   13190:	21400726 	beq	r4,r5,131b0 <_malloc_r+0x158>
   13194:	2821883a 	mov	r16,r5
   13198:	80800117 	ldw	r2,4(r16)
   1319c:	1184703a 	and	r2,r2,r6
   131a0:	1447c83a 	sub	r3,r2,r17
   131a4:	19400408 	cmpgei	r5,r3,16
   131a8:	283ff726 	beq	r5,zero,13188 <_malloc_r+0x130>
   131ac:	400f883a 	mov	r7,r8
   131b0:	9c000417 	ldw	r16,16(r19)
   131b4:	02400074 	movhi	r9,1
   131b8:	4a5a6004 	addi	r9,r9,27008
   131bc:	82407f26 	beq	r16,r9,133bc <_malloc_r+0x364>
   131c0:	80800117 	ldw	r2,4(r16)
   131c4:	00ffff04 	movi	r3,-4
   131c8:	10c4703a 	and	r2,r2,r3
   131cc:	1447c83a 	sub	r3,r2,r17
   131d0:	19000410 	cmplti	r4,r3,16
   131d4:	2000d326 	beq	r4,zero,13524 <_malloc_r+0x4cc>
   131d8:	9a400515 	stw	r9,20(r19)
   131dc:	9a400415 	stw	r9,16(r19)
   131e0:	1800c50e 	bge	r3,zero,134f8 <_malloc_r+0x4a0>
   131e4:	10c08028 	cmpgeui	r3,r2,512
   131e8:	99400117 	ldw	r5,4(r19)
   131ec:	1800891e 	bne	r3,zero,13414 <_malloc_r+0x3bc>
   131f0:	1006d0fa 	srli	r3,r2,3
   131f4:	1008d17a 	srli	r4,r2,5
   131f8:	18800044 	addi	r2,r3,1
   131fc:	100490fa 	slli	r2,r2,3
   13200:	00c00044 	movi	r3,1
   13204:	1906983a 	sll	r3,r3,r4
   13208:	9885883a 	add	r2,r19,r2
   1320c:	11000017 	ldw	r4,0(r2)
   13210:	28cab03a 	or	r5,r5,r3
   13214:	10fffe04 	addi	r3,r2,-8
   13218:	80c00315 	stw	r3,12(r16)
   1321c:	81000215 	stw	r4,8(r16)
   13220:	99400115 	stw	r5,4(r19)
   13224:	14000015 	stw	r16,0(r2)
   13228:	24000315 	stw	r16,12(r4)
   1322c:	3805d0ba 	srai	r2,r7,2
   13230:	01000044 	movi	r4,1
   13234:	2088983a 	sll	r4,r4,r2
   13238:	29002e36 	bltu	r5,r4,132f4 <_malloc_r+0x29c>
   1323c:	2144703a 	and	r2,r4,r5
   13240:	10000a1e 	bne	r2,zero,1326c <_malloc_r+0x214>
   13244:	2109883a 	add	r4,r4,r4
   13248:	00bfff04 	movi	r2,-4
   1324c:	3884703a 	and	r2,r7,r2
   13250:	2146703a 	and	r3,r4,r5
   13254:	11c00104 	addi	r7,r2,4
   13258:	1800041e 	bne	r3,zero,1326c <_malloc_r+0x214>
   1325c:	2109883a 	add	r4,r4,r4
   13260:	2144703a 	and	r2,r4,r5
   13264:	39c00104 	addi	r7,r7,4
   13268:	103ffc26 	beq	r2,zero,1325c <_malloc_r+0x204>
   1326c:	02bfff04 	movi	r10,-4
   13270:	381690fa 	slli	r11,r7,3
   13274:	3819883a 	mov	r12,r7
   13278:	9ad7883a 	add	r11,r19,r11
   1327c:	5811883a 	mov	r8,r11
   13280:	40800317 	ldw	r2,12(r8)
   13284:	40808526 	beq	r8,r2,1349c <_malloc_r+0x444>
   13288:	10c00117 	ldw	r3,4(r2)
   1328c:	1021883a 	mov	r16,r2
   13290:	10800317 	ldw	r2,12(r2)
   13294:	1a86703a 	and	r3,r3,r10
   13298:	1c4bc83a 	sub	r5,r3,r17
   1329c:	29800410 	cmplti	r6,r5,16
   132a0:	30008326 	beq	r6,zero,134b0 <_malloc_r+0x458>
   132a4:	283ff716 	blt	r5,zero,13284 <_malloc_r+0x22c>
   132a8:	80c7883a 	add	r3,r16,r3
   132ac:	19400117 	ldw	r5,4(r3)
   132b0:	81800217 	ldw	r6,8(r16)
   132b4:	9009883a 	mov	r4,r18
   132b8:	29400054 	ori	r5,r5,1
   132bc:	19400115 	stw	r5,4(r3)
   132c0:	30800315 	stw	r2,12(r6)
   132c4:	11800215 	stw	r6,8(r2)
   132c8:	00152b80 	call	152b8 <__malloc_unlock>
   132cc:	80800204 	addi	r2,r16,8
   132d0:	003f8a06 	br	130fc <_malloc_r+0xa4>
   132d4:	00800304 	movi	r2,12
   132d8:	90800015 	stw	r2,0(r18)
   132dc:	0005883a 	mov	r2,zero
   132e0:	003f8606 	br	130fc <_malloc_r+0xa4>
   132e4:	01008004 	movi	r4,512
   132e8:	01c01004 	movi	r7,64
   132ec:	02000fc4 	movi	r8,63
   132f0:	003f9d06 	br	13168 <_malloc_r+0x110>
   132f4:	9c000217 	ldw	r16,8(r19)
   132f8:	00bfff04 	movi	r2,-4
   132fc:	80c00117 	ldw	r3,4(r16)
   13300:	18aa703a 	and	r21,r3,r2
   13304:	ac400336 	bltu	r21,r17,13314 <_malloc_r+0x2bc>
   13308:	ac47c83a 	sub	r3,r21,r17
   1330c:	18800408 	cmpgei	r2,r3,16
   13310:	10002c1e 	bne	r2,zero,133c4 <_malloc_r+0x36c>
   13314:	00800074 	movhi	r2,1
   13318:	109b6d17 	ldw	r2,28084(r2)
   1331c:	00c000b4 	movhi	r3,2
   13320:	1d215817 	ldw	r20,-31392(r3)
   13324:	10bfffd8 	cmpnei	r2,r2,-1
   13328:	856f883a 	add	r23,r16,r21
   1332c:	8d29883a 	add	r20,r17,r20
   13330:	1000eb26 	beq	r2,zero,136e0 <_malloc_r+0x688>
   13334:	a50403c4 	addi	r20,r20,4111
   13338:	00bc0004 	movi	r2,-4096
   1333c:	a0a8703a 	and	r20,r20,r2
   13340:	a00b883a 	mov	r5,r20
   13344:	9009883a 	mov	r4,r18
   13348:	0014bc00 	call	14bc0 <_sbrk_r>
   1334c:	102d883a 	mov	r22,r2
   13350:	10bfffd8 	cmpnei	r2,r2,-1
   13354:	10008826 	beq	r2,zero,13578 <_malloc_r+0x520>
   13358:	b5c08636 	bltu	r22,r23,13574 <_malloc_r+0x51c>
   1335c:	008000b4 	movhi	r2,2
   13360:	1121fd17 	ldw	r4,-30732(r2)
   13364:	a109883a 	add	r4,r20,r4
   13368:	1121fd15 	stw	r4,-30732(r2)
   1336c:	2007883a 	mov	r3,r4
   13370:	bd80a91e 	bne	r23,r22,13618 <_malloc_r+0x5c0>
   13374:	b083ffcc 	andi	r2,r22,4095
   13378:	1000a71e 	bne	r2,zero,13618 <_malloc_r+0x5c0>
   1337c:	9d800217 	ldw	r22,8(r19)
   13380:	ad07883a 	add	r3,r21,r20
   13384:	18c00054 	ori	r3,r3,1
   13388:	b0c00115 	stw	r3,4(r22)
   1338c:	008000b4 	movhi	r2,2
   13390:	10a15717 	ldw	r2,-31396(r2)
   13394:	1100022e 	bgeu	r2,r4,133a0 <_malloc_r+0x348>
   13398:	008000b4 	movhi	r2,2
   1339c:	11215715 	stw	r4,-31396(r2)
   133a0:	008000b4 	movhi	r2,2
   133a4:	10a15617 	ldw	r2,-31400(r2)
   133a8:	1100022e 	bgeu	r2,r4,133b4 <_malloc_r+0x35c>
   133ac:	008000b4 	movhi	r2,2
   133b0:	11215615 	stw	r4,-31400(r2)
   133b4:	b021883a 	mov	r16,r22
   133b8:	00007106 	br	13580 <_malloc_r+0x528>
   133bc:	99400117 	ldw	r5,4(r19)
   133c0:	003f9a06 	br	1322c <_malloc_r+0x1d4>
   133c4:	88800054 	ori	r2,r17,1
   133c8:	80800115 	stw	r2,4(r16)
   133cc:	8463883a 	add	r17,r16,r17
   133d0:	9c400215 	stw	r17,8(r19)
   133d4:	18c00054 	ori	r3,r3,1
   133d8:	88c00115 	stw	r3,4(r17)
   133dc:	9009883a 	mov	r4,r18
   133e0:	00152b80 	call	152b8 <__malloc_unlock>
   133e4:	80800204 	addi	r2,r16,8
   133e8:	003f4406 	br	130fc <_malloc_r+0xa4>
   133ec:	81000217 	ldw	r4,8(r16)
   133f0:	8085883a 	add	r2,r16,r2
   133f4:	10c00117 	ldw	r3,4(r2)
   133f8:	21400315 	stw	r5,12(r4)
   133fc:	29000215 	stw	r4,8(r5)
   13400:	003f3906 	br	130e8 <_malloc_r+0x90>
   13404:	14000317 	ldw	r16,12(r2)
   13408:	143f2e1e 	bne	r2,r16,130c4 <_malloc_r+0x6c>
   1340c:	39c00084 	addi	r7,r7,2
   13410:	003f6706 	br	131b0 <_malloc_r+0x158>
   13414:	1006d27a 	srli	r3,r2,9
   13418:	19000168 	cmpgeui	r4,r3,5
   1341c:	20005026 	beq	r4,zero,13560 <_malloc_r+0x508>
   13420:	19000568 	cmpgeui	r4,r3,21
   13424:	2000c01e 	bne	r4,zero,13728 <_malloc_r+0x6d0>
   13428:	19801704 	addi	r6,r3,92
   1342c:	300c90fa 	slli	r6,r6,3
   13430:	190016c4 	addi	r4,r3,91
   13434:	998d883a 	add	r6,r19,r6
   13438:	30c00017 	ldw	r3,0(r6)
   1343c:	31bffe04 	addi	r6,r6,-8
   13440:	30c0a926 	beq	r6,r3,136e8 <_malloc_r+0x690>
   13444:	023fff04 	movi	r8,-4
   13448:	00000206 	br	13454 <_malloc_r+0x3fc>
   1344c:	18c00217 	ldw	r3,8(r3)
   13450:	30c00326 	beq	r6,r3,13460 <_malloc_r+0x408>
   13454:	19000117 	ldw	r4,4(r3)
   13458:	2208703a 	and	r4,r4,r8
   1345c:	113ffb36 	bltu	r2,r4,1344c <_malloc_r+0x3f4>
   13460:	19800317 	ldw	r6,12(r3)
   13464:	81800315 	stw	r6,12(r16)
   13468:	80c00215 	stw	r3,8(r16)
   1346c:	34000215 	stw	r16,8(r6)
   13470:	1c000315 	stw	r16,12(r3)
   13474:	003f6d06 	br	1322c <_malloc_r+0x1d4>
   13478:	10c00568 	cmpgeui	r3,r2,21
   1347c:	18004926 	beq	r3,zero,135a4 <_malloc_r+0x54c>
   13480:	10c01568 	cmpgeui	r3,r2,85
   13484:	1800af1e 	bne	r3,zero,13744 <_malloc_r+0x6ec>
   13488:	8804d33a 	srli	r2,r17,12
   1348c:	11c01bc4 	addi	r7,r2,111
   13490:	380890fa 	slli	r4,r7,3
   13494:	12001b84 	addi	r8,r2,110
   13498:	003f3306 	br	13168 <_malloc_r+0x110>
   1349c:	63000044 	addi	r12,r12,1
   134a0:	608000cc 	andi	r2,r12,3
   134a4:	42000204 	addi	r8,r8,8
   134a8:	103f751e 	bne	r2,zero,13280 <_malloc_r+0x228>
   134ac:	00004406 	br	135c0 <_malloc_r+0x568>
   134b0:	81000217 	ldw	r4,8(r16)
   134b4:	89800054 	ori	r6,r17,1
   134b8:	81800115 	stw	r6,4(r16)
   134bc:	20800315 	stw	r2,12(r4)
   134c0:	11000215 	stw	r4,8(r2)
   134c4:	8463883a 	add	r17,r16,r17
   134c8:	9c400515 	stw	r17,20(r19)
   134cc:	9c400415 	stw	r17,16(r19)
   134d0:	28800054 	ori	r2,r5,1
   134d4:	88800115 	stw	r2,4(r17)
   134d8:	8a400315 	stw	r9,12(r17)
   134dc:	8a400215 	stw	r9,8(r17)
   134e0:	80c7883a 	add	r3,r16,r3
   134e4:	19400015 	stw	r5,0(r3)
   134e8:	9009883a 	mov	r4,r18
   134ec:	00152b80 	call	152b8 <__malloc_unlock>
   134f0:	80800204 	addi	r2,r16,8
   134f4:	003f0106 	br	130fc <_malloc_r+0xa4>
   134f8:	8085883a 	add	r2,r16,r2
   134fc:	10c00117 	ldw	r3,4(r2)
   13500:	9009883a 	mov	r4,r18
   13504:	18c00054 	ori	r3,r3,1
   13508:	10c00115 	stw	r3,4(r2)
   1350c:	00152b80 	call	152b8 <__malloc_unlock>
   13510:	80800204 	addi	r2,r16,8
   13514:	003ef906 	br	130fc <_malloc_r+0xa4>
   13518:	880ed0fa 	srli	r7,r17,3
   1351c:	88800204 	addi	r2,r17,8
   13520:	003ee206 	br	130ac <_malloc_r+0x54>
   13524:	89000054 	ori	r4,r17,1
   13528:	81000115 	stw	r4,4(r16)
   1352c:	8463883a 	add	r17,r16,r17
   13530:	9c400515 	stw	r17,20(r19)
   13534:	9c400415 	stw	r17,16(r19)
   13538:	19000054 	ori	r4,r3,1
   1353c:	89000115 	stw	r4,4(r17)
   13540:	8085883a 	add	r2,r16,r2
   13544:	8a400315 	stw	r9,12(r17)
   13548:	8a400215 	stw	r9,8(r17)
   1354c:	10c00015 	stw	r3,0(r2)
   13550:	9009883a 	mov	r4,r18
   13554:	00152b80 	call	152b8 <__malloc_unlock>
   13558:	80800204 	addi	r2,r16,8
   1355c:	003ee706 	br	130fc <_malloc_r+0xa4>
   13560:	1006d1ba 	srli	r3,r2,6
   13564:	19800e44 	addi	r6,r3,57
   13568:	300c90fa 	slli	r6,r6,3
   1356c:	19000e04 	addi	r4,r3,56
   13570:	003fb006 	br	13434 <_malloc_r+0x3dc>
   13574:	84c02426 	beq	r16,r19,13608 <_malloc_r+0x5b0>
   13578:	9c000217 	ldw	r16,8(r19)
   1357c:	80c00117 	ldw	r3,4(r16)
   13580:	00bfff04 	movi	r2,-4
   13584:	1884703a 	and	r2,r3,r2
   13588:	1447c83a 	sub	r3,r2,r17
   1358c:	14400236 	bltu	r2,r17,13598 <_malloc_r+0x540>
   13590:	18800408 	cmpgei	r2,r3,16
   13594:	103f8b1e 	bne	r2,zero,133c4 <_malloc_r+0x36c>
   13598:	9009883a 	mov	r4,r18
   1359c:	00152b80 	call	152b8 <__malloc_unlock>
   135a0:	003f4e06 	br	132dc <_malloc_r+0x284>
   135a4:	11c01704 	addi	r7,r2,92
   135a8:	380890fa 	slli	r4,r7,3
   135ac:	120016c4 	addi	r8,r2,91
   135b0:	003eed06 	br	13168 <_malloc_r+0x110>
   135b4:	58800217 	ldw	r2,8(r11)
   135b8:	39ffffc4 	addi	r7,r7,-1
   135bc:	12c0961e 	bne	r2,r11,13818 <_malloc_r+0x7c0>
   135c0:	388000cc 	andi	r2,r7,3
   135c4:	5afffe04 	addi	r11,r11,-8
   135c8:	103ffa1e 	bne	r2,zero,135b4 <_malloc_r+0x55c>
   135cc:	98c00117 	ldw	r3,4(r19)
   135d0:	0104303a 	nor	r2,zero,r4
   135d4:	10c4703a 	and	r2,r2,r3
   135d8:	98800115 	stw	r2,4(r19)
   135dc:	2109883a 	add	r4,r4,r4
   135e0:	113f4436 	bltu	r2,r4,132f4 <_malloc_r+0x29c>
   135e4:	203f4326 	beq	r4,zero,132f4 <_malloc_r+0x29c>
   135e8:	2086703a 	and	r3,r4,r2
   135ec:	1800041e 	bne	r3,zero,13600 <_malloc_r+0x5a8>
   135f0:	2109883a 	add	r4,r4,r4
   135f4:	2086703a 	and	r3,r4,r2
   135f8:	63000104 	addi	r12,r12,4
   135fc:	183ffc26 	beq	r3,zero,135f0 <_malloc_r+0x598>
   13600:	600f883a 	mov	r7,r12
   13604:	003f1a06 	br	13270 <_malloc_r+0x218>
   13608:	008000b4 	movhi	r2,2
   1360c:	10e1fd17 	ldw	r3,-30732(r2)
   13610:	a0c7883a 	add	r3,r20,r3
   13614:	10e1fd15 	stw	r3,-30732(r2)
   13618:	00800074 	movhi	r2,1
   1361c:	109b6d17 	ldw	r2,28084(r2)
   13620:	10bfffd8 	cmpnei	r2,r2,-1
   13624:	10004e26 	beq	r2,zero,13760 <_malloc_r+0x708>
   13628:	b5c5c83a 	sub	r2,r22,r23
   1362c:	10c5883a 	add	r2,r2,r3
   13630:	00c000b4 	movhi	r3,2
   13634:	18a1fd15 	stw	r2,-30732(r3)
   13638:	b70001cc 	andi	fp,r22,7
   1363c:	e0003026 	beq	fp,zero,13700 <_malloc_r+0x6a8>
   13640:	b72dc83a 	sub	r22,r22,fp
   13644:	b5800204 	addi	r22,r22,8
   13648:	01040204 	movi	r4,4104
   1364c:	2709c83a 	sub	r4,r4,fp
   13650:	b529883a 	add	r20,r22,r20
   13654:	2509c83a 	sub	r4,r4,r20
   13658:	25c3ffcc 	andi	r23,r4,4095
   1365c:	b80b883a 	mov	r5,r23
   13660:	9009883a 	mov	r4,r18
   13664:	0014bc00 	call	14bc0 <_sbrk_r>
   13668:	10ffffe0 	cmpeqi	r3,r2,-1
   1366c:	1800501e 	bne	r3,zero,137b0 <_malloc_r+0x758>
   13670:	1585c83a 	sub	r2,r2,r22
   13674:	15e9883a 	add	r20,r2,r23
   13678:	008000b4 	movhi	r2,2
   1367c:	10a1fd17 	ldw	r2,-30732(r2)
   13680:	9d800215 	stw	r22,8(r19)
   13684:	a0c00054 	ori	r3,r20,1
   13688:	b889883a 	add	r4,r23,r2
   1368c:	008000b4 	movhi	r2,2
   13690:	1121fd15 	stw	r4,-30732(r2)
   13694:	b0c00115 	stw	r3,4(r22)
   13698:	84ff3c26 	beq	r16,r19,1338c <_malloc_r+0x334>
   1369c:	a8800428 	cmpgeui	r2,r21,16
   136a0:	10003226 	beq	r2,zero,1376c <_malloc_r+0x714>
   136a4:	80800117 	ldw	r2,4(r16)
   136a8:	017ffe04 	movi	r5,-8
   136ac:	a8fffd04 	addi	r3,r21,-12
   136b0:	1946703a 	and	r3,r3,r5
   136b4:	1080004c 	andi	r2,r2,1
   136b8:	10c4b03a 	or	r2,r2,r3
   136bc:	80800115 	stw	r2,4(r16)
   136c0:	01400144 	movi	r5,5
   136c4:	80c5883a 	add	r2,r16,r3
   136c8:	11400115 	stw	r5,4(r2)
   136cc:	11400215 	stw	r5,8(r2)
   136d0:	18c00428 	cmpgeui	r3,r3,16
   136d4:	18003b1e 	bne	r3,zero,137c4 <_malloc_r+0x76c>
   136d8:	b0c00117 	ldw	r3,4(r22)
   136dc:	003f2b06 	br	1338c <_malloc_r+0x334>
   136e0:	a5000404 	addi	r20,r20,16
   136e4:	003f1606 	br	13340 <_malloc_r+0x2e8>
   136e8:	2009d0ba 	srai	r4,r4,2
   136ec:	00800044 	movi	r2,1
   136f0:	1104983a 	sll	r2,r2,r4
   136f4:	288ab03a 	or	r5,r5,r2
   136f8:	99400115 	stw	r5,4(r19)
   136fc:	003f5906 	br	13464 <_malloc_r+0x40c>
   13700:	b509883a 	add	r4,r22,r20
   13704:	0109c83a 	sub	r4,zero,r4
   13708:	25c3ffcc 	andi	r23,r4,4095
   1370c:	b80b883a 	mov	r5,r23
   13710:	9009883a 	mov	r4,r18
   13714:	0014bc00 	call	14bc0 <_sbrk_r>
   13718:	10ffffe0 	cmpeqi	r3,r2,-1
   1371c:	183fd426 	beq	r3,zero,13670 <_malloc_r+0x618>
   13720:	002f883a 	mov	r23,zero
   13724:	003fd406 	br	13678 <_malloc_r+0x620>
   13728:	19001568 	cmpgeui	r4,r3,85
   1372c:	2000121e 	bne	r4,zero,13778 <_malloc_r+0x720>
   13730:	1006d33a 	srli	r3,r2,12
   13734:	19801bc4 	addi	r6,r3,111
   13738:	300c90fa 	slli	r6,r6,3
   1373c:	19001b84 	addi	r4,r3,110
   13740:	003f3c06 	br	13434 <_malloc_r+0x3dc>
   13744:	10c05568 	cmpgeui	r3,r2,341
   13748:	1800121e 	bne	r3,zero,13794 <_malloc_r+0x73c>
   1374c:	8804d3fa 	srli	r2,r17,15
   13750:	11c01e04 	addi	r7,r2,120
   13754:	380890fa 	slli	r4,r7,3
   13758:	12001dc4 	addi	r8,r2,119
   1375c:	003e8206 	br	13168 <_malloc_r+0x110>
   13760:	00800074 	movhi	r2,1
   13764:	159b6d15 	stw	r22,28084(r2)
   13768:	003fb306 	br	13638 <_malloc_r+0x5e0>
   1376c:	00800044 	movi	r2,1
   13770:	b0800115 	stw	r2,4(r22)
   13774:	003f8806 	br	13598 <_malloc_r+0x540>
   13778:	19005568 	cmpgeui	r4,r3,341
   1377c:	2000181e 	bne	r4,zero,137e0 <_malloc_r+0x788>
   13780:	1006d3fa 	srli	r3,r2,15
   13784:	19801e04 	addi	r6,r3,120
   13788:	300c90fa 	slli	r6,r6,3
   1378c:	19001dc4 	addi	r4,r3,119
   13790:	003f2806 	br	13434 <_malloc_r+0x3dc>
   13794:	10815568 	cmpgeui	r2,r2,1365
   13798:	1000181e 	bne	r2,zero,137fc <_malloc_r+0x7a4>
   1379c:	8804d4ba 	srli	r2,r17,18
   137a0:	11c01f44 	addi	r7,r2,125
   137a4:	380890fa 	slli	r4,r7,3
   137a8:	12001f04 	addi	r8,r2,124
   137ac:	003e6e06 	br	13168 <_malloc_r+0x110>
   137b0:	e73ffe04 	addi	fp,fp,-8
   137b4:	a729883a 	add	r20,r20,fp
   137b8:	a5a9c83a 	sub	r20,r20,r22
   137bc:	002f883a 	mov	r23,zero
   137c0:	003fad06 	br	13678 <_malloc_r+0x620>
   137c4:	9009883a 	mov	r4,r18
   137c8:	81400204 	addi	r5,r16,8
   137cc:	0012d500 	call	12d50 <_free_r>
   137d0:	008000b4 	movhi	r2,2
   137d4:	9d800217 	ldw	r22,8(r19)
   137d8:	1121fd17 	ldw	r4,-30732(r2)
   137dc:	003fbe06 	br	136d8 <_malloc_r+0x680>
   137e0:	18c15568 	cmpgeui	r3,r3,1365
   137e4:	1800091e 	bne	r3,zero,1380c <_malloc_r+0x7b4>
   137e8:	1006d4ba 	srli	r3,r2,18
   137ec:	19801f44 	addi	r6,r3,125
   137f0:	300c90fa 	slli	r6,r6,3
   137f4:	19001f04 	addi	r4,r3,124
   137f8:	003f0e06 	br	13434 <_malloc_r+0x3dc>
   137fc:	0100fe04 	movi	r4,1016
   13800:	01c01fc4 	movi	r7,127
   13804:	02001f84 	movi	r8,126
   13808:	003e5706 	br	13168 <_malloc_r+0x110>
   1380c:	0180fe04 	movi	r6,1016
   13810:	01001f84 	movi	r4,126
   13814:	003f0706 	br	13434 <_malloc_r+0x3dc>
   13818:	98800117 	ldw	r2,4(r19)
   1381c:	003f6f06 	br	135dc <_malloc_r+0x584>

00013820 <_realloc_r>:
   13820:	defff604 	addi	sp,sp,-40
   13824:	dcc00315 	stw	r19,12(sp)
   13828:	dfc00915 	stw	ra,36(sp)
   1382c:	df000815 	stw	fp,32(sp)
   13830:	ddc00715 	stw	r23,28(sp)
   13834:	dd800615 	stw	r22,24(sp)
   13838:	dd400515 	stw	r21,20(sp)
   1383c:	dd000415 	stw	r20,16(sp)
   13840:	dc800215 	stw	r18,8(sp)
   13844:	dc400115 	stw	r17,4(sp)
   13848:	dc000015 	stw	r16,0(sp)
   1384c:	3027883a 	mov	r19,r6
   13850:	28008a26 	beq	r5,zero,13a7c <_realloc_r+0x25c>
   13854:	2821883a 	mov	r16,r5
   13858:	2029883a 	mov	r20,r4
   1385c:	00152940 	call	15294 <__malloc_lock>
   13860:	80bfff17 	ldw	r2,-4(r16)
   13864:	9c4002c4 	addi	r17,r19,11
   13868:	04bfff04 	movi	r18,-4
   1386c:	88c005f0 	cmpltui	r3,r17,23
   13870:	857ffe04 	addi	r21,r16,-8
   13874:	14a4703a 	and	r18,r2,r18
   13878:	18005a1e 	bne	r3,zero,139e4 <_realloc_r+0x1c4>
   1387c:	00fffe04 	movi	r3,-8
   13880:	88e2703a 	and	r17,r17,r3
   13884:	88005916 	blt	r17,zero,139ec <_realloc_r+0x1cc>
   13888:	8cc05836 	bltu	r17,r19,139ec <_realloc_r+0x1cc>
   1388c:	94403a0e 	bge	r18,r17,13978 <_realloc_r+0x158>
   13890:	05800074 	movhi	r22,1
   13894:	b59a5e04 	addi	r22,r22,27000
   13898:	b1800217 	ldw	r6,8(r22)
   1389c:	ac8b883a 	add	r5,r21,r18
   138a0:	28c00117 	ldw	r3,4(r5)
   138a4:	31408e26 	beq	r6,r5,13ae0 <_realloc_r+0x2c0>
   138a8:	013fff84 	movi	r4,-2
   138ac:	1908703a 	and	r4,r3,r4
   138b0:	2909883a 	add	r4,r5,r4
   138b4:	21000117 	ldw	r4,4(r4)
   138b8:	2100004c 	andi	r4,r4,1
   138bc:	20004f1e 	bne	r4,zero,139fc <_realloc_r+0x1dc>
   138c0:	013fff04 	movi	r4,-4
   138c4:	1906703a 	and	r3,r3,r4
   138c8:	90c9883a 	add	r4,r18,r3
   138cc:	2440ca0e 	bge	r4,r17,13bf8 <_realloc_r+0x3d8>
   138d0:	1080004c 	andi	r2,r2,1
   138d4:	10004b1e 	bne	r2,zero,13a04 <_realloc_r+0x1e4>
   138d8:	85fffe17 	ldw	r23,-8(r16)
   138dc:	013fff04 	movi	r4,-4
   138e0:	adefc83a 	sub	r23,r21,r23
   138e4:	b8800117 	ldw	r2,4(r23)
   138e8:	1104703a 	and	r2,r2,r4
   138ec:	28000426 	beq	r5,zero,13900 <_realloc_r+0xe0>
   138f0:	90b9883a 	add	fp,r18,r2
   138f4:	e0f9883a 	add	fp,fp,r3
   138f8:	3140c926 	beq	r6,r5,13c20 <_realloc_r+0x400>
   138fc:	e4409e0e 	bge	fp,r17,13b78 <_realloc_r+0x358>
   13900:	b8004026 	beq	r23,zero,13a04 <_realloc_r+0x1e4>
   13904:	90ad883a 	add	r22,r18,r2
   13908:	b4403e16 	blt	r22,r17,13a04 <_realloc_r+0x1e4>
   1390c:	b8800317 	ldw	r2,12(r23)
   13910:	b8c00217 	ldw	r3,8(r23)
   13914:	91bfff04 	addi	r6,r18,-4
   13918:	31400968 	cmpgeui	r5,r6,37
   1391c:	18800315 	stw	r2,12(r3)
   13920:	10c00215 	stw	r3,8(r2)
   13924:	bc800204 	addi	r18,r23,8
   13928:	2800ee1e 	bne	r5,zero,13ce4 <_realloc_r+0x4c4>
   1392c:	30800530 	cmpltui	r2,r6,20
   13930:	1000ea1e 	bne	r2,zero,13cdc <_realloc_r+0x4bc>
   13934:	80c00017 	ldw	r3,0(r16)
   13938:	30800728 	cmpgeui	r2,r6,28
   1393c:	b8c00215 	stw	r3,8(r23)
   13940:	80c00117 	ldw	r3,4(r16)
   13944:	b8c00315 	stw	r3,12(r23)
   13948:	1000fa1e 	bne	r2,zero,13d34 <_realloc_r+0x514>
   1394c:	84000204 	addi	r16,r16,8
   13950:	b8800404 	addi	r2,r23,16
   13954:	80c00017 	ldw	r3,0(r16)
   13958:	10c00015 	stw	r3,0(r2)
   1395c:	80c00117 	ldw	r3,4(r16)
   13960:	10c00115 	stw	r3,4(r2)
   13964:	80c00217 	ldw	r3,8(r16)
   13968:	10c00215 	stw	r3,8(r2)
   1396c:	9021883a 	mov	r16,r18
   13970:	b82b883a 	mov	r21,r23
   13974:	b025883a 	mov	r18,r22
   13978:	a8800117 	ldw	r2,4(r21)
   1397c:	9449c83a 	sub	r4,r18,r17
   13980:	21400430 	cmpltui	r5,r4,16
   13984:	1080004c 	andi	r2,r2,1
   13988:	ac87883a 	add	r3,r21,r18
   1398c:	28004826 	beq	r5,zero,13ab0 <_realloc_r+0x290>
   13990:	9084b03a 	or	r2,r18,r2
   13994:	a8800115 	stw	r2,4(r21)
   13998:	18800117 	ldw	r2,4(r3)
   1399c:	10800054 	ori	r2,r2,1
   139a0:	18800115 	stw	r2,4(r3)
   139a4:	a009883a 	mov	r4,r20
   139a8:	00152b80 	call	152b8 <__malloc_unlock>
   139ac:	8027883a 	mov	r19,r16
   139b0:	9805883a 	mov	r2,r19
   139b4:	dfc00917 	ldw	ra,36(sp)
   139b8:	df000817 	ldw	fp,32(sp)
   139bc:	ddc00717 	ldw	r23,28(sp)
   139c0:	dd800617 	ldw	r22,24(sp)
   139c4:	dd400517 	ldw	r21,20(sp)
   139c8:	dd000417 	ldw	r20,16(sp)
   139cc:	dcc00317 	ldw	r19,12(sp)
   139d0:	dc800217 	ldw	r18,8(sp)
   139d4:	dc400117 	ldw	r17,4(sp)
   139d8:	dc000017 	ldw	r16,0(sp)
   139dc:	dec00a04 	addi	sp,sp,40
   139e0:	f800283a 	ret
   139e4:	04400404 	movi	r17,16
   139e8:	8cffa82e 	bgeu	r17,r19,1388c <_realloc_r+0x6c>
   139ec:	00800304 	movi	r2,12
   139f0:	a0800015 	stw	r2,0(r20)
   139f4:	0027883a 	mov	r19,zero
   139f8:	003fed06 	br	139b0 <_realloc_r+0x190>
   139fc:	1080004c 	andi	r2,r2,1
   13a00:	10004e26 	beq	r2,zero,13b3c <_realloc_r+0x31c>
   13a04:	980b883a 	mov	r5,r19
   13a08:	a009883a 	mov	r4,r20
   13a0c:	00130580 	call	13058 <_malloc_r>
   13a10:	1027883a 	mov	r19,r2
   13a14:	1000bd26 	beq	r2,zero,13d0c <_realloc_r+0x4ec>
   13a18:	80bfff17 	ldw	r2,-4(r16)
   13a1c:	013fff84 	movi	r4,-2
   13a20:	98fffe04 	addi	r3,r19,-8
   13a24:	1104703a 	and	r2,r2,r4
   13a28:	a885883a 	add	r2,r21,r2
   13a2c:	10c03e26 	beq	r2,r3,13b28 <_realloc_r+0x308>
   13a30:	91bfff04 	addi	r6,r18,-4
   13a34:	30800968 	cmpgeui	r2,r6,37
   13a38:	1000751e 	bne	r2,zero,13c10 <_realloc_r+0x3f0>
   13a3c:	30800530 	cmpltui	r2,r6,20
   13a40:	10004426 	beq	r2,zero,13b54 <_realloc_r+0x334>
   13a44:	9805883a 	mov	r2,r19
   13a48:	8007883a 	mov	r3,r16
   13a4c:	19000017 	ldw	r4,0(r3)
   13a50:	11000015 	stw	r4,0(r2)
   13a54:	19000117 	ldw	r4,4(r3)
   13a58:	11000115 	stw	r4,4(r2)
   13a5c:	18c00217 	ldw	r3,8(r3)
   13a60:	10c00215 	stw	r3,8(r2)
   13a64:	a009883a 	mov	r4,r20
   13a68:	800b883a 	mov	r5,r16
   13a6c:	0012d500 	call	12d50 <_free_r>
   13a70:	a009883a 	mov	r4,r20
   13a74:	00152b80 	call	152b8 <__malloc_unlock>
   13a78:	003fcd06 	br	139b0 <_realloc_r+0x190>
   13a7c:	300b883a 	mov	r5,r6
   13a80:	dfc00917 	ldw	ra,36(sp)
   13a84:	df000817 	ldw	fp,32(sp)
   13a88:	ddc00717 	ldw	r23,28(sp)
   13a8c:	dd800617 	ldw	r22,24(sp)
   13a90:	dd400517 	ldw	r21,20(sp)
   13a94:	dd000417 	ldw	r20,16(sp)
   13a98:	dcc00317 	ldw	r19,12(sp)
   13a9c:	dc800217 	ldw	r18,8(sp)
   13aa0:	dc400117 	ldw	r17,4(sp)
   13aa4:	dc000017 	ldw	r16,0(sp)
   13aa8:	dec00a04 	addi	sp,sp,40
   13aac:	00130581 	jmpi	13058 <_malloc_r>
   13ab0:	8884b03a 	or	r2,r17,r2
   13ab4:	a8800115 	stw	r2,4(r21)
   13ab8:	ac4b883a 	add	r5,r21,r17
   13abc:	21000054 	ori	r4,r4,1
   13ac0:	29000115 	stw	r4,4(r5)
   13ac4:	18800117 	ldw	r2,4(r3)
   13ac8:	29400204 	addi	r5,r5,8
   13acc:	a009883a 	mov	r4,r20
   13ad0:	10800054 	ori	r2,r2,1
   13ad4:	18800115 	stw	r2,4(r3)
   13ad8:	0012d500 	call	12d50 <_free_r>
   13adc:	003fb106 	br	139a4 <_realloc_r+0x184>
   13ae0:	013fff04 	movi	r4,-4
   13ae4:	1906703a 	and	r3,r3,r4
   13ae8:	1c89883a 	add	r4,r3,r18
   13aec:	89c00404 	addi	r7,r17,16
   13af0:	21ff7716 	blt	r4,r7,138d0 <_realloc_r+0xb0>
   13af4:	ac6b883a 	add	r21,r21,r17
   13af8:	2445c83a 	sub	r2,r4,r17
   13afc:	b5400215 	stw	r21,8(r22)
   13b00:	10800054 	ori	r2,r2,1
   13b04:	a8800115 	stw	r2,4(r21)
   13b08:	80bfff17 	ldw	r2,-4(r16)
   13b0c:	a009883a 	mov	r4,r20
   13b10:	8027883a 	mov	r19,r16
   13b14:	1080004c 	andi	r2,r2,1
   13b18:	1444b03a 	or	r2,r2,r17
   13b1c:	80bfff15 	stw	r2,-4(r16)
   13b20:	00152b80 	call	152b8 <__malloc_unlock>
   13b24:	003fa206 	br	139b0 <_realloc_r+0x190>
   13b28:	98bfff17 	ldw	r2,-4(r19)
   13b2c:	00ffff04 	movi	r3,-4
   13b30:	10c4703a 	and	r2,r2,r3
   13b34:	90a5883a 	add	r18,r18,r2
   13b38:	003f8f06 	br	13978 <_realloc_r+0x158>
   13b3c:	85fffe17 	ldw	r23,-8(r16)
   13b40:	00ffff04 	movi	r3,-4
   13b44:	adefc83a 	sub	r23,r21,r23
   13b48:	b8800117 	ldw	r2,4(r23)
   13b4c:	10c4703a 	and	r2,r2,r3
   13b50:	003f6b06 	br	13900 <_realloc_r+0xe0>
   13b54:	80c00017 	ldw	r3,0(r16)
   13b58:	30800728 	cmpgeui	r2,r6,28
   13b5c:	98c00015 	stw	r3,0(r19)
   13b60:	80c00117 	ldw	r3,4(r16)
   13b64:	98c00115 	stw	r3,4(r19)
   13b68:	1000531e 	bne	r2,zero,13cb8 <_realloc_r+0x498>
   13b6c:	80c00204 	addi	r3,r16,8
   13b70:	98800204 	addi	r2,r19,8
   13b74:	003fb506 	br	13a4c <_realloc_r+0x22c>
   13b78:	28800317 	ldw	r2,12(r5)
   13b7c:	28c00217 	ldw	r3,8(r5)
   13b80:	91bfff04 	addi	r6,r18,-4
   13b84:	31400968 	cmpgeui	r5,r6,37
   13b88:	18800315 	stw	r2,12(r3)
   13b8c:	10c00215 	stw	r3,8(r2)
   13b90:	b8c00217 	ldw	r3,8(r23)
   13b94:	b8800317 	ldw	r2,12(r23)
   13b98:	bc800204 	addi	r18,r23,8
   13b9c:	18800315 	stw	r2,12(r3)
   13ba0:	10c00215 	stw	r3,8(r2)
   13ba4:	2800551e 	bne	r5,zero,13cfc <_realloc_r+0x4dc>
   13ba8:	30800530 	cmpltui	r2,r6,20
   13bac:	1000511e 	bne	r2,zero,13cf4 <_realloc_r+0x4d4>
   13bb0:	80c00017 	ldw	r3,0(r16)
   13bb4:	30800728 	cmpgeui	r2,r6,28
   13bb8:	b8c00215 	stw	r3,8(r23)
   13bbc:	80c00117 	ldw	r3,4(r16)
   13bc0:	b8c00315 	stw	r3,12(r23)
   13bc4:	1000641e 	bne	r2,zero,13d58 <_realloc_r+0x538>
   13bc8:	84000204 	addi	r16,r16,8
   13bcc:	b8800404 	addi	r2,r23,16
   13bd0:	80c00017 	ldw	r3,0(r16)
   13bd4:	10c00015 	stw	r3,0(r2)
   13bd8:	80c00117 	ldw	r3,4(r16)
   13bdc:	10c00115 	stw	r3,4(r2)
   13be0:	80c00217 	ldw	r3,8(r16)
   13be4:	10c00215 	stw	r3,8(r2)
   13be8:	9021883a 	mov	r16,r18
   13bec:	b82b883a 	mov	r21,r23
   13bf0:	e025883a 	mov	r18,fp
   13bf4:	003f6006 	br	13978 <_realloc_r+0x158>
   13bf8:	28800317 	ldw	r2,12(r5)
   13bfc:	28c00217 	ldw	r3,8(r5)
   13c00:	2025883a 	mov	r18,r4
   13c04:	18800315 	stw	r2,12(r3)
   13c08:	10c00215 	stw	r3,8(r2)
   13c0c:	003f5a06 	br	13978 <_realloc_r+0x158>
   13c10:	800b883a 	mov	r5,r16
   13c14:	9809883a 	mov	r4,r19
   13c18:	00128c00 	call	128c0 <memmove>
   13c1c:	003f9106 	br	13a64 <_realloc_r+0x244>
   13c20:	88c00404 	addi	r3,r17,16
   13c24:	e0ff3616 	blt	fp,r3,13900 <_realloc_r+0xe0>
   13c28:	b8800317 	ldw	r2,12(r23)
   13c2c:	b8c00217 	ldw	r3,8(r23)
   13c30:	91bfff04 	addi	r6,r18,-4
   13c34:	31000968 	cmpgeui	r4,r6,37
   13c38:	18800315 	stw	r2,12(r3)
   13c3c:	10c00215 	stw	r3,8(r2)
   13c40:	bcc00204 	addi	r19,r23,8
   13c44:	20004f1e 	bne	r4,zero,13d84 <_realloc_r+0x564>
   13c48:	30800530 	cmpltui	r2,r6,20
   13c4c:	10004b1e 	bne	r2,zero,13d7c <_realloc_r+0x55c>
   13c50:	80c00017 	ldw	r3,0(r16)
   13c54:	30800728 	cmpgeui	r2,r6,28
   13c58:	b8c00215 	stw	r3,8(r23)
   13c5c:	80c00117 	ldw	r3,4(r16)
   13c60:	b8c00315 	stw	r3,12(r23)
   13c64:	10004b1e 	bne	r2,zero,13d94 <_realloc_r+0x574>
   13c68:	84000204 	addi	r16,r16,8
   13c6c:	b8800404 	addi	r2,r23,16
   13c70:	80c00017 	ldw	r3,0(r16)
   13c74:	10c00015 	stw	r3,0(r2)
   13c78:	80c00117 	ldw	r3,4(r16)
   13c7c:	10c00115 	stw	r3,4(r2)
   13c80:	80c00217 	ldw	r3,8(r16)
   13c84:	10c00215 	stw	r3,8(r2)
   13c88:	bc47883a 	add	r3,r23,r17
   13c8c:	e445c83a 	sub	r2,fp,r17
   13c90:	b0c00215 	stw	r3,8(r22)
   13c94:	10800054 	ori	r2,r2,1
   13c98:	18800115 	stw	r2,4(r3)
   13c9c:	b8800117 	ldw	r2,4(r23)
   13ca0:	a009883a 	mov	r4,r20
   13ca4:	1080004c 	andi	r2,r2,1
   13ca8:	1444b03a 	or	r2,r2,r17
   13cac:	b8800115 	stw	r2,4(r23)
   13cb0:	00152b80 	call	152b8 <__malloc_unlock>
   13cb4:	003f3e06 	br	139b0 <_realloc_r+0x190>
   13cb8:	80800217 	ldw	r2,8(r16)
   13cbc:	31800920 	cmpeqi	r6,r6,36
   13cc0:	98800215 	stw	r2,8(r19)
   13cc4:	80800317 	ldw	r2,12(r16)
   13cc8:	98800315 	stw	r2,12(r19)
   13ccc:	3000121e 	bne	r6,zero,13d18 <_realloc_r+0x4f8>
   13cd0:	80c00404 	addi	r3,r16,16
   13cd4:	98800404 	addi	r2,r19,16
   13cd8:	003f5c06 	br	13a4c <_realloc_r+0x22c>
   13cdc:	9005883a 	mov	r2,r18
   13ce0:	003f1c06 	br	13954 <_realloc_r+0x134>
   13ce4:	800b883a 	mov	r5,r16
   13ce8:	9009883a 	mov	r4,r18
   13cec:	00128c00 	call	128c0 <memmove>
   13cf0:	003f1e06 	br	1396c <_realloc_r+0x14c>
   13cf4:	9005883a 	mov	r2,r18
   13cf8:	003fb506 	br	13bd0 <_realloc_r+0x3b0>
   13cfc:	800b883a 	mov	r5,r16
   13d00:	9009883a 	mov	r4,r18
   13d04:	00128c00 	call	128c0 <memmove>
   13d08:	003fb706 	br	13be8 <_realloc_r+0x3c8>
   13d0c:	a009883a 	mov	r4,r20
   13d10:	00152b80 	call	152b8 <__malloc_unlock>
   13d14:	003f3706 	br	139f4 <_realloc_r+0x1d4>
   13d18:	81000417 	ldw	r4,16(r16)
   13d1c:	80c00604 	addi	r3,r16,24
   13d20:	98800604 	addi	r2,r19,24
   13d24:	99000415 	stw	r4,16(r19)
   13d28:	81000517 	ldw	r4,20(r16)
   13d2c:	99000515 	stw	r4,20(r19)
   13d30:	003f4606 	br	13a4c <_realloc_r+0x22c>
   13d34:	80800217 	ldw	r2,8(r16)
   13d38:	31800920 	cmpeqi	r6,r6,36
   13d3c:	b8800415 	stw	r2,16(r23)
   13d40:	80800317 	ldw	r2,12(r16)
   13d44:	b8800515 	stw	r2,20(r23)
   13d48:	30001b1e 	bne	r6,zero,13db8 <_realloc_r+0x598>
   13d4c:	84000404 	addi	r16,r16,16
   13d50:	b8800604 	addi	r2,r23,24
   13d54:	003eff06 	br	13954 <_realloc_r+0x134>
   13d58:	80800217 	ldw	r2,8(r16)
   13d5c:	31800920 	cmpeqi	r6,r6,36
   13d60:	b8800415 	stw	r2,16(r23)
   13d64:	80800317 	ldw	r2,12(r16)
   13d68:	b8800515 	stw	r2,20(r23)
   13d6c:	3000191e 	bne	r6,zero,13dd4 <_realloc_r+0x5b4>
   13d70:	84000404 	addi	r16,r16,16
   13d74:	b8800604 	addi	r2,r23,24
   13d78:	003f9506 	br	13bd0 <_realloc_r+0x3b0>
   13d7c:	9805883a 	mov	r2,r19
   13d80:	003fbb06 	br	13c70 <_realloc_r+0x450>
   13d84:	800b883a 	mov	r5,r16
   13d88:	9809883a 	mov	r4,r19
   13d8c:	00128c00 	call	128c0 <memmove>
   13d90:	003fbd06 	br	13c88 <_realloc_r+0x468>
   13d94:	80800217 	ldw	r2,8(r16)
   13d98:	31800920 	cmpeqi	r6,r6,36
   13d9c:	b8800415 	stw	r2,16(r23)
   13da0:	80800317 	ldw	r2,12(r16)
   13da4:	b8800515 	stw	r2,20(r23)
   13da8:	3000111e 	bne	r6,zero,13df0 <_realloc_r+0x5d0>
   13dac:	84000404 	addi	r16,r16,16
   13db0:	b8800604 	addi	r2,r23,24
   13db4:	003fae06 	br	13c70 <_realloc_r+0x450>
   13db8:	80c00417 	ldw	r3,16(r16)
   13dbc:	84000604 	addi	r16,r16,24
   13dc0:	b8800804 	addi	r2,r23,32
   13dc4:	b8c00615 	stw	r3,24(r23)
   13dc8:	80ffff17 	ldw	r3,-4(r16)
   13dcc:	b8c00715 	stw	r3,28(r23)
   13dd0:	003ee006 	br	13954 <_realloc_r+0x134>
   13dd4:	80c00417 	ldw	r3,16(r16)
   13dd8:	84000604 	addi	r16,r16,24
   13ddc:	b8800804 	addi	r2,r23,32
   13de0:	b8c00615 	stw	r3,24(r23)
   13de4:	80ffff17 	ldw	r3,-4(r16)
   13de8:	b8c00715 	stw	r3,28(r23)
   13dec:	003f7806 	br	13bd0 <_realloc_r+0x3b0>
   13df0:	80c00417 	ldw	r3,16(r16)
   13df4:	84000604 	addi	r16,r16,24
   13df8:	b8800804 	addi	r2,r23,32
   13dfc:	b8c00615 	stw	r3,24(r23)
   13e00:	80ffff17 	ldw	r3,-4(r16)
   13e04:	b8c00715 	stw	r3,28(r23)
   13e08:	003f9906 	br	13c70 <_realloc_r+0x450>

00013e0c <__sflush_r>:
   13e0c:	2880030b 	ldhu	r2,12(r5)
   13e10:	defffb04 	addi	sp,sp,-20
   13e14:	dcc00315 	stw	r19,12(sp)
   13e18:	dc000015 	stw	r16,0(sp)
   13e1c:	dfc00415 	stw	ra,16(sp)
   13e20:	dc800215 	stw	r18,8(sp)
   13e24:	dc400115 	stw	r17,4(sp)
   13e28:	10c0020c 	andi	r3,r2,8
   13e2c:	2821883a 	mov	r16,r5
   13e30:	2027883a 	mov	r19,r4
   13e34:	18003c1e 	bne	r3,zero,13f28 <__sflush_r+0x11c>
   13e38:	29000117 	ldw	r4,4(r5)
   13e3c:	10c20014 	ori	r3,r2,2048
   13e40:	28c0030d 	sth	r3,12(r5)
   13e44:	0100580e 	bge	zero,r4,13fa8 <__sflush_r+0x19c>
   13e48:	82000a17 	ldw	r8,40(r16)
   13e4c:	40003426 	beq	r8,zero,13f20 <__sflush_r+0x114>
   13e50:	9c400017 	ldw	r17,0(r19)
   13e54:	1084000c 	andi	r2,r2,4096
   13e58:	98000015 	stw	zero,0(r19)
   13e5c:	81400717 	ldw	r5,28(r16)
   13e60:	1000561e 	bne	r2,zero,13fbc <__sflush_r+0x1b0>
   13e64:	000d883a 	mov	r6,zero
   13e68:	01c00044 	movi	r7,1
   13e6c:	9809883a 	mov	r4,r19
   13e70:	403ee83a 	callr	r8
   13e74:	100d883a 	mov	r6,r2
   13e78:	10bfffd8 	cmpnei	r2,r2,-1
   13e7c:	10005b26 	beq	r2,zero,13fec <__sflush_r+0x1e0>
   13e80:	80c0030b 	ldhu	r3,12(r16)
   13e84:	82000a17 	ldw	r8,40(r16)
   13e88:	18c0010c 	andi	r3,r3,4
   13e8c:	18000626 	beq	r3,zero,13ea8 <__sflush_r+0x9c>
   13e90:	80c00117 	ldw	r3,4(r16)
   13e94:	80800c17 	ldw	r2,48(r16)
   13e98:	30cdc83a 	sub	r6,r6,r3
   13e9c:	10000226 	beq	r2,zero,13ea8 <__sflush_r+0x9c>
   13ea0:	80800f17 	ldw	r2,60(r16)
   13ea4:	308dc83a 	sub	r6,r6,r2
   13ea8:	81400717 	ldw	r5,28(r16)
   13eac:	000f883a 	mov	r7,zero
   13eb0:	9809883a 	mov	r4,r19
   13eb4:	403ee83a 	callr	r8
   13eb8:	10ffffd8 	cmpnei	r3,r2,-1
   13ebc:	1800411e 	bne	r3,zero,13fc4 <__sflush_r+0x1b8>
   13ec0:	99400017 	ldw	r5,0(r19)
   13ec4:	28c007b0 	cmpltui	r3,r5,30
   13ec8:	18002c26 	beq	r3,zero,13f7c <__sflush_r+0x170>
   13ecc:	00f7f034 	movhi	r3,57280
   13ed0:	18ffff84 	addi	r3,r3,-2
   13ed4:	1949d83a 	sra	r4,r3,r5
   13ed8:	80c0030b 	ldhu	r3,12(r16)
   13edc:	2100004c 	andi	r4,r4,1
   13ee0:	2000271e 	bne	r4,zero,13f80 <__sflush_r+0x174>
   13ee4:	81000417 	ldw	r4,16(r16)
   13ee8:	19bdffcc 	andi	r6,r3,63487
   13eec:	8180030d 	sth	r6,12(r16)
   13ef0:	80000115 	stw	zero,4(r16)
   13ef4:	81000015 	stw	r4,0(r16)
   13ef8:	18c4000c 	andi	r3,r3,4096
   13efc:	1800431e 	bne	r3,zero,1400c <__sflush_r+0x200>
   13f00:	81400c17 	ldw	r5,48(r16)
   13f04:	9c400015 	stw	r17,0(r19)
   13f08:	28000526 	beq	r5,zero,13f20 <__sflush_r+0x114>
   13f0c:	80801004 	addi	r2,r16,64
   13f10:	28800226 	beq	r5,r2,13f1c <__sflush_r+0x110>
   13f14:	9809883a 	mov	r4,r19
   13f18:	0012d500 	call	12d50 <_free_r>
   13f1c:	80000c15 	stw	zero,48(r16)
   13f20:	0005883a 	mov	r2,zero
   13f24:	00001906 	br	13f8c <__sflush_r+0x180>
   13f28:	2c800417 	ldw	r18,16(r5)
   13f2c:	903ffc26 	beq	r18,zero,13f20 <__sflush_r+0x114>
   13f30:	2c400017 	ldw	r17,0(r5)
   13f34:	108000cc 	andi	r2,r2,3
   13f38:	2c800015 	stw	r18,0(r5)
   13f3c:	8ca3c83a 	sub	r17,r17,r18
   13f40:	10001c1e 	bne	r2,zero,13fb4 <__sflush_r+0x1a8>
   13f44:	28800517 	ldw	r2,20(r5)
   13f48:	80800215 	stw	r2,8(r16)
   13f4c:	04400316 	blt	zero,r17,13f5c <__sflush_r+0x150>
   13f50:	003ff306 	br	13f20 <__sflush_r+0x114>
   13f54:	90a5883a 	add	r18,r18,r2
   13f58:	047ff10e 	bge	zero,r17,13f20 <__sflush_r+0x114>
   13f5c:	80800917 	ldw	r2,36(r16)
   13f60:	81400717 	ldw	r5,28(r16)
   13f64:	880f883a 	mov	r7,r17
   13f68:	900d883a 	mov	r6,r18
   13f6c:	9809883a 	mov	r4,r19
   13f70:	103ee83a 	callr	r2
   13f74:	88a3c83a 	sub	r17,r17,r2
   13f78:	00bff616 	blt	zero,r2,13f54 <__sflush_r+0x148>
   13f7c:	80c0030b 	ldhu	r3,12(r16)
   13f80:	18c01014 	ori	r3,r3,64
   13f84:	80c0030d 	sth	r3,12(r16)
   13f88:	00bfffc4 	movi	r2,-1
   13f8c:	dfc00417 	ldw	ra,16(sp)
   13f90:	dcc00317 	ldw	r19,12(sp)
   13f94:	dc800217 	ldw	r18,8(sp)
   13f98:	dc400117 	ldw	r17,4(sp)
   13f9c:	dc000017 	ldw	r16,0(sp)
   13fa0:	dec00504 	addi	sp,sp,20
   13fa4:	f800283a 	ret
   13fa8:	29000f17 	ldw	r4,60(r5)
   13fac:	013fa616 	blt	zero,r4,13e48 <__sflush_r+0x3c>
   13fb0:	003fdb06 	br	13f20 <__sflush_r+0x114>
   13fb4:	0005883a 	mov	r2,zero
   13fb8:	003fe306 	br	13f48 <__sflush_r+0x13c>
   13fbc:	81801417 	ldw	r6,80(r16)
   13fc0:	003fb106 	br	13e88 <__sflush_r+0x7c>
   13fc4:	80c0030b 	ldhu	r3,12(r16)
   13fc8:	81000417 	ldw	r4,16(r16)
   13fcc:	80000115 	stw	zero,4(r16)
   13fd0:	197dffcc 	andi	r5,r3,63487
   13fd4:	8140030d 	sth	r5,12(r16)
   13fd8:	81000015 	stw	r4,0(r16)
   13fdc:	18c4000c 	andi	r3,r3,4096
   13fe0:	183fc726 	beq	r3,zero,13f00 <__sflush_r+0xf4>
   13fe4:	80801415 	stw	r2,80(r16)
   13fe8:	003fc506 	br	13f00 <__sflush_r+0xf4>
   13fec:	98800017 	ldw	r2,0(r19)
   13ff0:	103fa326 	beq	r2,zero,13e80 <__sflush_r+0x74>
   13ff4:	10c00760 	cmpeqi	r3,r2,29
   13ff8:	1800021e 	bne	r3,zero,14004 <__sflush_r+0x1f8>
   13ffc:	10800598 	cmpnei	r2,r2,22
   14000:	103fde1e 	bne	r2,zero,13f7c <__sflush_r+0x170>
   14004:	9c400015 	stw	r17,0(r19)
   14008:	003fc506 	br	13f20 <__sflush_r+0x114>
   1400c:	283fbc1e 	bne	r5,zero,13f00 <__sflush_r+0xf4>
   14010:	003ff406 	br	13fe4 <__sflush_r+0x1d8>

00014014 <_fflush_r>:
   14014:	defffd04 	addi	sp,sp,-12
   14018:	dc000115 	stw	r16,4(sp)
   1401c:	dfc00215 	stw	ra,8(sp)
   14020:	2021883a 	mov	r16,r4
   14024:	20000226 	beq	r4,zero,14030 <_fflush_r+0x1c>
   14028:	20800d17 	ldw	r2,52(r4)
   1402c:	10000c26 	beq	r2,zero,14060 <_fflush_r+0x4c>
   14030:	2880030f 	ldh	r2,12(r5)
   14034:	1000051e 	bne	r2,zero,1404c <_fflush_r+0x38>
   14038:	0005883a 	mov	r2,zero
   1403c:	dfc00217 	ldw	ra,8(sp)
   14040:	dc000117 	ldw	r16,4(sp)
   14044:	dec00304 	addi	sp,sp,12
   14048:	f800283a 	ret
   1404c:	8009883a 	mov	r4,r16
   14050:	dfc00217 	ldw	ra,8(sp)
   14054:	dc000117 	ldw	r16,4(sp)
   14058:	dec00304 	addi	sp,sp,12
   1405c:	0013e0c1 	jmpi	13e0c <__sflush_r>
   14060:	d9400015 	stw	r5,0(sp)
   14064:	001442c0 	call	1442c <__sinit>
   14068:	d9400017 	ldw	r5,0(sp)
   1406c:	003ff006 	br	14030 <_fflush_r+0x1c>

00014070 <fflush>:
   14070:	20001826 	beq	r4,zero,140d4 <fflush+0x64>
   14074:	00800074 	movhi	r2,1
   14078:	200b883a 	mov	r5,r4
   1407c:	111b6c17 	ldw	r4,28080(r2)
   14080:	20000226 	beq	r4,zero,1408c <fflush+0x1c>
   14084:	20800d17 	ldw	r2,52(r4)
   14088:	10000526 	beq	r2,zero,140a0 <fflush+0x30>
   1408c:	2880030f 	ldh	r2,12(r5)
   14090:	1000021e 	bne	r2,zero,1409c <fflush+0x2c>
   14094:	0005883a 	mov	r2,zero
   14098:	f800283a 	ret
   1409c:	0013e0c1 	jmpi	13e0c <__sflush_r>
   140a0:	defffd04 	addi	sp,sp,-12
   140a4:	d9400115 	stw	r5,4(sp)
   140a8:	d9000015 	stw	r4,0(sp)
   140ac:	dfc00215 	stw	ra,8(sp)
   140b0:	001442c0 	call	1442c <__sinit>
   140b4:	d9400117 	ldw	r5,4(sp)
   140b8:	d9000017 	ldw	r4,0(sp)
   140bc:	2880030f 	ldh	r2,12(r5)
   140c0:	10000b1e 	bne	r2,zero,140f0 <fflush+0x80>
   140c4:	0005883a 	mov	r2,zero
   140c8:	dfc00217 	ldw	ra,8(sp)
   140cc:	dec00304 	addi	sp,sp,12
   140d0:	f800283a 	ret
   140d4:	01800074 	movhi	r6,1
   140d8:	01400074 	movhi	r5,1
   140dc:	01000074 	movhi	r4,1
   140e0:	319b6004 	addi	r6,r6,28032
   140e4:	29500504 	addi	r5,r5,16404
   140e8:	211a1704 	addi	r4,r4,26716
   140ec:	001448c1 	jmpi	1448c <_fwalk_sglue>
   140f0:	dfc00217 	ldw	ra,8(sp)
   140f4:	dec00304 	addi	sp,sp,12
   140f8:	0013e0c1 	jmpi	13e0c <__sflush_r>

000140fc <__fp_lock>:
   140fc:	0005883a 	mov	r2,zero
   14100:	f800283a 	ret

00014104 <stdio_exit_handler>:
   14104:	01800074 	movhi	r6,1
   14108:	01400074 	movhi	r5,1
   1410c:	01000074 	movhi	r4,1
   14110:	319b6004 	addi	r6,r6,28032
   14114:	29531f04 	addi	r5,r5,19580
   14118:	211a1704 	addi	r4,r4,26716
   1411c:	001448c1 	jmpi	1448c <_fwalk_sglue>

00014120 <cleanup_stdio>:
   14120:	21400117 	ldw	r5,4(r4)
   14124:	defffe04 	addi	sp,sp,-8
   14128:	008000b4 	movhi	r2,2
   1412c:	dc000015 	stw	r16,0(sp)
   14130:	dfc00115 	stw	ra,4(sp)
   14134:	10a20704 	addi	r2,r2,-30692
   14138:	2021883a 	mov	r16,r4
   1413c:	28800126 	beq	r5,r2,14144 <cleanup_stdio+0x24>
   14140:	0014c7c0 	call	14c7c <_fclose_r>
   14144:	81400217 	ldw	r5,8(r16)
   14148:	008000b4 	movhi	r2,2
   1414c:	10a22104 	addi	r2,r2,-30588
   14150:	28800226 	beq	r5,r2,1415c <cleanup_stdio+0x3c>
   14154:	8009883a 	mov	r4,r16
   14158:	0014c7c0 	call	14c7c <_fclose_r>
   1415c:	81400317 	ldw	r5,12(r16)
   14160:	008000b4 	movhi	r2,2
   14164:	10a23b04 	addi	r2,r2,-30484
   14168:	28800526 	beq	r5,r2,14180 <cleanup_stdio+0x60>
   1416c:	8009883a 	mov	r4,r16
   14170:	dfc00117 	ldw	ra,4(sp)
   14174:	dc000017 	ldw	r16,0(sp)
   14178:	dec00204 	addi	sp,sp,8
   1417c:	0014c7c1 	jmpi	14c7c <_fclose_r>
   14180:	dfc00117 	ldw	ra,4(sp)
   14184:	dc000017 	ldw	r16,0(sp)
   14188:	dec00204 	addi	sp,sp,8
   1418c:	f800283a 	ret

00014190 <__fp_unlock>:
   14190:	0005883a 	mov	r2,zero
   14194:	f800283a 	ret

00014198 <global_stdio_init.part.0>:
   14198:	00800074 	movhi	r2,1
   1419c:	defffa04 	addi	sp,sp,-24
   141a0:	00c000b4 	movhi	r3,2
   141a4:	10904104 	addi	r2,r2,16644
   141a8:	dc000015 	stw	r16,0(sp)
   141ac:	18a15315 	stw	r2,-31412(r3)
   141b0:	040000b4 	movhi	r16,2
   141b4:	008000b4 	movhi	r2,2
   141b8:	010000b4 	movhi	r4,2
   141bc:	84220704 	addi	r16,r16,-30692
   141c0:	dfc00515 	stw	ra,20(sp)
   141c4:	dd000415 	stw	r20,16(sp)
   141c8:	dcc00315 	stw	r19,12(sp)
   141cc:	dc800215 	stw	r18,8(sp)
   141d0:	dc400115 	stw	r17,4(sp)
   141d4:	01800204 	movi	r6,8
   141d8:	000b883a 	mov	r5,zero
   141dc:	21221e04 	addi	r4,r4,-30600
   141e0:	10220715 	stw	zero,-30692(r2)
   141e4:	00800104 	movi	r2,4
   141e8:	80000115 	stw	zero,4(r16)
   141ec:	80000215 	stw	zero,8(r16)
   141f0:	80001915 	stw	zero,100(r16)
   141f4:	80800315 	stw	r2,12(r16)
   141f8:	80000415 	stw	zero,16(r16)
   141fc:	80000515 	stw	zero,20(r16)
   14200:	80000615 	stw	zero,24(r16)
   14204:	00148a80 	call	148a8 <memset>
   14208:	05000074 	movhi	r20,1
   1420c:	04c00074 	movhi	r19,1
   14210:	04800074 	movhi	r18,1
   14214:	04400074 	movhi	r17,1
   14218:	00800074 	movhi	r2,1
   1421c:	010000b4 	movhi	r4,2
   14220:	a511da04 	addi	r20,r20,18280
   14224:	9cd1f104 	addi	r19,r19,18372
   14228:	94921104 	addi	r18,r18,18500
   1422c:	8c522804 	addi	r17,r17,18592
   14230:	10800284 	addi	r2,r2,10
   14234:	01800204 	movi	r6,8
   14238:	000b883a 	mov	r5,zero
   1423c:	21223804 	addi	r4,r4,-30496
   14240:	84000715 	stw	r16,28(r16)
   14244:	85000815 	stw	r20,32(r16)
   14248:	84c00915 	stw	r19,36(r16)
   1424c:	84800a15 	stw	r18,40(r16)
   14250:	84400b15 	stw	r17,44(r16)
   14254:	80001a15 	stw	zero,104(r16)
   14258:	80001b15 	stw	zero,108(r16)
   1425c:	80001c15 	stw	zero,112(r16)
   14260:	80003315 	stw	zero,204(r16)
   14264:	80801d15 	stw	r2,116(r16)
   14268:	80001e15 	stw	zero,120(r16)
   1426c:	80001f15 	stw	zero,124(r16)
   14270:	80002015 	stw	zero,128(r16)
   14274:	00148a80 	call	148a8 <memset>
   14278:	010000b4 	movhi	r4,2
   1427c:	00c000b4 	movhi	r3,2
   14280:	008000b4 	movhi	r2,2
   14284:	18e22104 	addi	r3,r3,-30588
   14288:	10800484 	addi	r2,r2,18
   1428c:	01800204 	movi	r6,8
   14290:	000b883a 	mov	r5,zero
   14294:	21225204 	addi	r4,r4,-30392
   14298:	80c02115 	stw	r3,132(r16)
   1429c:	85002215 	stw	r20,136(r16)
   142a0:	84c02315 	stw	r19,140(r16)
   142a4:	84802415 	stw	r18,144(r16)
   142a8:	84402515 	stw	r17,148(r16)
   142ac:	80003415 	stw	zero,208(r16)
   142b0:	80003515 	stw	zero,212(r16)
   142b4:	80003615 	stw	zero,216(r16)
   142b8:	80004d15 	stw	zero,308(r16)
   142bc:	80803715 	stw	r2,220(r16)
   142c0:	80003815 	stw	zero,224(r16)
   142c4:	80003915 	stw	zero,228(r16)
   142c8:	80003a15 	stw	zero,232(r16)
   142cc:	00148a80 	call	148a8 <memset>
   142d0:	008000b4 	movhi	r2,2
   142d4:	10a23b04 	addi	r2,r2,-30484
   142d8:	80803b15 	stw	r2,236(r16)
   142dc:	85003c15 	stw	r20,240(r16)
   142e0:	84c03d15 	stw	r19,244(r16)
   142e4:	84803e15 	stw	r18,248(r16)
   142e8:	84403f15 	stw	r17,252(r16)
   142ec:	dfc00517 	ldw	ra,20(sp)
   142f0:	dd000417 	ldw	r20,16(sp)
   142f4:	dcc00317 	ldw	r19,12(sp)
   142f8:	dc800217 	ldw	r18,8(sp)
   142fc:	dc400117 	ldw	r17,4(sp)
   14300:	dc000017 	ldw	r16,0(sp)
   14304:	dec00604 	addi	sp,sp,24
   14308:	f800283a 	ret

0001430c <__sfp>:
   1430c:	008000b4 	movhi	r2,2
   14310:	10a15317 	ldw	r2,-31412(r2)
   14314:	defffc04 	addi	sp,sp,-16
   14318:	dc800215 	stw	r18,8(sp)
   1431c:	dfc00315 	stw	ra,12(sp)
   14320:	dc400115 	stw	r17,4(sp)
   14324:	dc000015 	stw	r16,0(sp)
   14328:	2025883a 	mov	r18,r4
   1432c:	10003926 	beq	r2,zero,14414 <__sfp+0x108>
   14330:	04400074 	movhi	r17,1
   14334:	8c5b6004 	addi	r17,r17,28032
   14338:	88800117 	ldw	r2,4(r17)
   1433c:	8c000217 	ldw	r16,8(r17)
   14340:	10bfffc4 	addi	r2,r2,-1
   14344:	1000030e 	bge	r2,zero,14354 <__sfp+0x48>
   14348:	00001f06 	br	143c8 <__sfp+0xbc>
   1434c:	84001a04 	addi	r16,r16,104
   14350:	28001d26 	beq	r5,zero,143c8 <__sfp+0xbc>
   14354:	80c0030f 	ldh	r3,12(r16)
   14358:	10bfffc4 	addi	r2,r2,-1
   1435c:	117fffd8 	cmpnei	r5,r2,-1
   14360:	183ffa1e 	bne	r3,zero,1434c <__sfp+0x40>
   14364:	00bffff4 	movhi	r2,65535
   14368:	10800044 	addi	r2,r2,1
   1436c:	80800315 	stw	r2,12(r16)
   14370:	80001915 	stw	zero,100(r16)
   14374:	80000015 	stw	zero,0(r16)
   14378:	80000215 	stw	zero,8(r16)
   1437c:	80000115 	stw	zero,4(r16)
   14380:	80000415 	stw	zero,16(r16)
   14384:	80000515 	stw	zero,20(r16)
   14388:	80000615 	stw	zero,24(r16)
   1438c:	01800204 	movi	r6,8
   14390:	000b883a 	mov	r5,zero
   14394:	81001704 	addi	r4,r16,92
   14398:	00148a80 	call	148a8 <memset>
   1439c:	80000c15 	stw	zero,48(r16)
   143a0:	80000d15 	stw	zero,52(r16)
   143a4:	80001115 	stw	zero,68(r16)
   143a8:	80001215 	stw	zero,72(r16)
   143ac:	8005883a 	mov	r2,r16
   143b0:	dfc00317 	ldw	ra,12(sp)
   143b4:	dc800217 	ldw	r18,8(sp)
   143b8:	dc400117 	ldw	r17,4(sp)
   143bc:	dc000017 	ldw	r16,0(sp)
   143c0:	dec00404 	addi	sp,sp,16
   143c4:	f800283a 	ret
   143c8:	8c000017 	ldw	r16,0(r17)
   143cc:	80000226 	beq	r16,zero,143d8 <__sfp+0xcc>
   143d0:	8023883a 	mov	r17,r16
   143d4:	003fd806 	br	14338 <__sfp+0x2c>
   143d8:	01406b04 	movi	r5,428
   143dc:	9009883a 	mov	r4,r18
   143e0:	00130580 	call	13058 <_malloc_r>
   143e4:	1021883a 	mov	r16,r2
   143e8:	10000c26 	beq	r2,zero,1441c <__sfp+0x110>
   143ec:	10000015 	stw	zero,0(r2)
   143f0:	11000304 	addi	r4,r2,12
   143f4:	00800104 	movi	r2,4
   143f8:	80800115 	stw	r2,4(r16)
   143fc:	81000215 	stw	r4,8(r16)
   14400:	01806804 	movi	r6,416
   14404:	000b883a 	mov	r5,zero
   14408:	00148a80 	call	148a8 <memset>
   1440c:	8c000015 	stw	r16,0(r17)
   14410:	003fef06 	br	143d0 <__sfp+0xc4>
   14414:	00141980 	call	14198 <global_stdio_init.part.0>
   14418:	003fc506 	br	14330 <__sfp+0x24>
   1441c:	88000015 	stw	zero,0(r17)
   14420:	00800304 	movi	r2,12
   14424:	90800015 	stw	r2,0(r18)
   14428:	003fe006 	br	143ac <__sfp+0xa0>

0001442c <__sinit>:
   1442c:	20800d17 	ldw	r2,52(r4)
   14430:	10000126 	beq	r2,zero,14438 <__sinit+0xc>
   14434:	f800283a 	ret
   14438:	00c000b4 	movhi	r3,2
   1443c:	00800074 	movhi	r2,1
   14440:	18e15317 	ldw	r3,-31412(r3)
   14444:	10904804 	addi	r2,r2,16672
   14448:	20800d15 	stw	r2,52(r4)
   1444c:	183ff91e 	bne	r3,zero,14434 <__sinit+0x8>
   14450:	00141981 	jmpi	14198 <global_stdio_init.part.0>

00014454 <__sfp_lock_acquire>:
   14454:	f800283a 	ret

00014458 <__sfp_lock_release>:
   14458:	f800283a 	ret

0001445c <__fp_lock_all>:
   1445c:	01800074 	movhi	r6,1
   14460:	01400074 	movhi	r5,1
   14464:	319b6004 	addi	r6,r6,28032
   14468:	29503f04 	addi	r5,r5,16636
   1446c:	0009883a 	mov	r4,zero
   14470:	001448c1 	jmpi	1448c <_fwalk_sglue>

00014474 <__fp_unlock_all>:
   14474:	01800074 	movhi	r6,1
   14478:	01400074 	movhi	r5,1
   1447c:	319b6004 	addi	r6,r6,28032
   14480:	29506404 	addi	r5,r5,16784
   14484:	0009883a 	mov	r4,zero
   14488:	001448c1 	jmpi	1448c <_fwalk_sglue>

0001448c <_fwalk_sglue>:
   1448c:	defff904 	addi	sp,sp,-28
   14490:	dd400515 	stw	r21,20(sp)
   14494:	dd000415 	stw	r20,16(sp)
   14498:	dcc00315 	stw	r19,12(sp)
   1449c:	dc800215 	stw	r18,8(sp)
   144a0:	dfc00615 	stw	ra,24(sp)
   144a4:	dc400115 	stw	r17,4(sp)
   144a8:	dc000015 	stw	r16,0(sp)
   144ac:	2027883a 	mov	r19,r4
   144b0:	2829883a 	mov	r20,r5
   144b4:	3025883a 	mov	r18,r6
   144b8:	002b883a 	mov	r21,zero
   144bc:	94400117 	ldw	r17,4(r18)
   144c0:	94000217 	ldw	r16,8(r18)
   144c4:	8c7fffc4 	addi	r17,r17,-1
   144c8:	88000e16 	blt	r17,zero,14504 <_fwalk_sglue+0x78>
   144cc:	8080030b 	ldhu	r2,12(r16)
   144d0:	8c7fffc4 	addi	r17,r17,-1
   144d4:	108000b0 	cmpltui	r2,r2,2
   144d8:	1000071e 	bne	r2,zero,144f8 <_fwalk_sglue+0x6c>
   144dc:	8080038f 	ldh	r2,14(r16)
   144e0:	800b883a 	mov	r5,r16
   144e4:	9809883a 	mov	r4,r19
   144e8:	10bfffe0 	cmpeqi	r2,r2,-1
   144ec:	1000021e 	bne	r2,zero,144f8 <_fwalk_sglue+0x6c>
   144f0:	a03ee83a 	callr	r20
   144f4:	a8aab03a 	or	r21,r21,r2
   144f8:	88bfffd8 	cmpnei	r2,r17,-1
   144fc:	84001a04 	addi	r16,r16,104
   14500:	103ff21e 	bne	r2,zero,144cc <_fwalk_sglue+0x40>
   14504:	94800017 	ldw	r18,0(r18)
   14508:	903fec1e 	bne	r18,zero,144bc <_fwalk_sglue+0x30>
   1450c:	a805883a 	mov	r2,r21
   14510:	dfc00617 	ldw	ra,24(sp)
   14514:	dd400517 	ldw	r21,20(sp)
   14518:	dd000417 	ldw	r20,16(sp)
   1451c:	dcc00317 	ldw	r19,12(sp)
   14520:	dc800217 	ldw	r18,8(sp)
   14524:	dc400117 	ldw	r17,4(sp)
   14528:	dc000017 	ldw	r16,0(sp)
   1452c:	dec00704 	addi	sp,sp,28
   14530:	f800283a 	ret

00014534 <__smakebuf_r>:
   14534:	2880030b 	ldhu	r2,12(r5)
   14538:	deffe904 	addi	sp,sp,-92
   1453c:	dc001215 	stw	r16,72(sp)
   14540:	dfc01615 	stw	ra,88(sp)
   14544:	dcc01515 	stw	r19,84(sp)
   14548:	dc801415 	stw	r18,80(sp)
   1454c:	dc401315 	stw	r17,76(sp)
   14550:	10c0008c 	andi	r3,r2,2
   14554:	2821883a 	mov	r16,r5
   14558:	18000c26 	beq	r3,zero,1458c <__smakebuf_r+0x58>
   1455c:	288010c4 	addi	r2,r5,67
   14560:	28800015 	stw	r2,0(r5)
   14564:	28800415 	stw	r2,16(r5)
   14568:	00800044 	movi	r2,1
   1456c:	28800515 	stw	r2,20(r5)
   14570:	dfc01617 	ldw	ra,88(sp)
   14574:	dcc01517 	ldw	r19,84(sp)
   14578:	dc801417 	ldw	r18,80(sp)
   1457c:	dc401317 	ldw	r17,76(sp)
   14580:	dc001217 	ldw	r16,72(sp)
   14584:	dec01704 	addi	sp,sp,92
   14588:	f800283a 	ret
   1458c:	2940038f 	ldh	r5,14(r5)
   14590:	2023883a 	mov	r17,r4
   14594:	28002816 	blt	r5,zero,14638 <__smakebuf_r+0x104>
   14598:	d80d883a 	mov	r6,sp
   1459c:	0014a400 	call	14a40 <_fstat_r>
   145a0:	10002416 	blt	r2,zero,14634 <__smakebuf_r+0x100>
   145a4:	d8800117 	ldw	r2,4(sp)
   145a8:	10bc000c 	andi	r2,r2,61440
   145ac:	10880018 	cmpnei	r2,r2,8192
   145b0:	1000471e 	bne	r2,zero,146d0 <__smakebuf_r+0x19c>
   145b4:	8140038f 	ldh	r5,14(r16)
   145b8:	8809883a 	mov	r4,r17
   145bc:	0014aa00 	call	14aa0 <_isatty_r>
   145c0:	10000826 	beq	r2,zero,145e4 <__smakebuf_r+0xb0>
   145c4:	8080030b 	ldhu	r2,12(r16)
   145c8:	80c010c4 	addi	r3,r16,67
   145cc:	80c00015 	stw	r3,0(r16)
   145d0:	10800054 	ori	r2,r2,1
   145d4:	8080030d 	sth	r2,12(r16)
   145d8:	00800044 	movi	r2,1
   145dc:	80c00415 	stw	r3,16(r16)
   145e0:	80800515 	stw	r2,20(r16)
   145e4:	01410004 	movi	r5,1024
   145e8:	8809883a 	mov	r4,r17
   145ec:	00130580 	call	13058 <_malloc_r>
   145f0:	10002626 	beq	r2,zero,1468c <__smakebuf_r+0x158>
   145f4:	80c0030b 	ldhu	r3,12(r16)
   145f8:	8140038f 	ldh	r5,14(r16)
   145fc:	80800015 	stw	r2,0(r16)
   14600:	18c02014 	ori	r3,r3,128
   14604:	80800415 	stw	r2,16(r16)
   14608:	00810004 	movi	r2,1024
   1460c:	80c0030d 	sth	r3,12(r16)
   14610:	80800515 	stw	r2,20(r16)
   14614:	8809883a 	mov	r4,r17
   14618:	0014aa00 	call	14aa0 <_isatty_r>
   1461c:	80c0030b 	ldhu	r3,12(r16)
   14620:	1000271e 	bne	r2,zero,146c0 <__smakebuf_r+0x18c>
   14624:	00820004 	movi	r2,2048
   14628:	10c4b03a 	or	r2,r2,r3
   1462c:	8080030d 	sth	r2,12(r16)
   14630:	003fcf06 	br	14570 <__smakebuf_r+0x3c>
   14634:	8080030b 	ldhu	r2,12(r16)
   14638:	1080200c 	andi	r2,r2,128
   1463c:	10000d1e 	bne	r2,zero,14674 <__smakebuf_r+0x140>
   14640:	04c10004 	movi	r19,1024
   14644:	0025883a 	mov	r18,zero
   14648:	980b883a 	mov	r5,r19
   1464c:	8809883a 	mov	r4,r17
   14650:	00130580 	call	13058 <_malloc_r>
   14654:	10000d26 	beq	r2,zero,1468c <__smakebuf_r+0x158>
   14658:	80c0030b 	ldhu	r3,12(r16)
   1465c:	80800015 	stw	r2,0(r16)
   14660:	80800415 	stw	r2,16(r16)
   14664:	18c02014 	ori	r3,r3,128
   14668:	84c00515 	stw	r19,20(r16)
   1466c:	9005883a 	mov	r2,r18
   14670:	003fed06 	br	14628 <__smakebuf_r+0xf4>
   14674:	04c01004 	movi	r19,64
   14678:	980b883a 	mov	r5,r19
   1467c:	8809883a 	mov	r4,r17
   14680:	0025883a 	mov	r18,zero
   14684:	00130580 	call	13058 <_malloc_r>
   14688:	103ff31e 	bne	r2,zero,14658 <__smakebuf_r+0x124>
   1468c:	8080030b 	ldhu	r2,12(r16)
   14690:	10c0800c 	andi	r3,r2,512
   14694:	183fb61e 	bne	r3,zero,14570 <__smakebuf_r+0x3c>
   14698:	00ffff04 	movi	r3,-4
   1469c:	10c4703a 	and	r2,r2,r3
   146a0:	10800094 	ori	r2,r2,2
   146a4:	80c010c4 	addi	r3,r16,67
   146a8:	8080030d 	sth	r2,12(r16)
   146ac:	00800044 	movi	r2,1
   146b0:	80c00015 	stw	r3,0(r16)
   146b4:	80c00415 	stw	r3,16(r16)
   146b8:	80800515 	stw	r2,20(r16)
   146bc:	003fac06 	br	14570 <__smakebuf_r+0x3c>
   146c0:	18ffff0c 	andi	r3,r3,65532
   146c4:	00820004 	movi	r2,2048
   146c8:	18c00054 	ori	r3,r3,1
   146cc:	003fd606 	br	14628 <__smakebuf_r+0xf4>
   146d0:	04c10004 	movi	r19,1024
   146d4:	04820004 	movi	r18,2048
   146d8:	003fdb06 	br	14648 <__smakebuf_r+0x114>

000146dc <__swhatbuf_r>:
   146dc:	deffea04 	addi	sp,sp,-88
   146e0:	dc001215 	stw	r16,72(sp)
   146e4:	2821883a 	mov	r16,r5
   146e8:	2940038f 	ldh	r5,14(r5)
   146ec:	dc801415 	stw	r18,80(sp)
   146f0:	dc401315 	stw	r17,76(sp)
   146f4:	dfc01515 	stw	ra,84(sp)
   146f8:	3023883a 	mov	r17,r6
   146fc:	3825883a 	mov	r18,r7
   14700:	28001016 	blt	r5,zero,14744 <__swhatbuf_r+0x68>
   14704:	d80d883a 	mov	r6,sp
   14708:	0014a400 	call	14a40 <_fstat_r>
   1470c:	10000d16 	blt	r2,zero,14744 <__swhatbuf_r+0x68>
   14710:	d8c00117 	ldw	r3,4(sp)
   14714:	01010004 	movi	r4,1024
   14718:	00820004 	movi	r2,2048
   1471c:	18fc000c 	andi	r3,r3,61440
   14720:	18c80020 	cmpeqi	r3,r3,8192
   14724:	90c00015 	stw	r3,0(r18)
   14728:	89000015 	stw	r4,0(r17)
   1472c:	dfc01517 	ldw	ra,84(sp)
   14730:	dc801417 	ldw	r18,80(sp)
   14734:	dc401317 	ldw	r17,76(sp)
   14738:	dc001217 	ldw	r16,72(sp)
   1473c:	dec01604 	addi	sp,sp,88
   14740:	f800283a 	ret
   14744:	8080030b 	ldhu	r2,12(r16)
   14748:	0007883a 	mov	r3,zero
   1474c:	1080200c 	andi	r2,r2,128
   14750:	10000326 	beq	r2,zero,14760 <__swhatbuf_r+0x84>
   14754:	01001004 	movi	r4,64
   14758:	0005883a 	mov	r2,zero
   1475c:	003ff106 	br	14724 <__swhatbuf_r+0x48>
   14760:	01010004 	movi	r4,1024
   14764:	003fef06 	br	14724 <__swhatbuf_r+0x48>

00014768 <__sread>:
   14768:	defffe04 	addi	sp,sp,-8
   1476c:	dc000015 	stw	r16,0(sp)
   14770:	2821883a 	mov	r16,r5
   14774:	2940038f 	ldh	r5,14(r5)
   14778:	dfc00115 	stw	ra,4(sp)
   1477c:	0014b5c0 	call	14b5c <_read_r>
   14780:	10000716 	blt	r2,zero,147a0 <__sread+0x38>
   14784:	80c01417 	ldw	r3,80(r16)
   14788:	1887883a 	add	r3,r3,r2
   1478c:	80c01415 	stw	r3,80(r16)
   14790:	dfc00117 	ldw	ra,4(sp)
   14794:	dc000017 	ldw	r16,0(sp)
   14798:	dec00204 	addi	sp,sp,8
   1479c:	f800283a 	ret
   147a0:	80c0030b 	ldhu	r3,12(r16)
   147a4:	18fbffcc 	andi	r3,r3,61439
   147a8:	80c0030d 	sth	r3,12(r16)
   147ac:	dfc00117 	ldw	ra,4(sp)
   147b0:	dc000017 	ldw	r16,0(sp)
   147b4:	dec00204 	addi	sp,sp,8
   147b8:	f800283a 	ret

000147bc <__seofread>:
   147bc:	0005883a 	mov	r2,zero
   147c0:	f800283a 	ret

000147c4 <__swrite>:
   147c4:	2880030b 	ldhu	r2,12(r5)
   147c8:	defffb04 	addi	sp,sp,-20
   147cc:	dcc00315 	stw	r19,12(sp)
   147d0:	dc800215 	stw	r18,8(sp)
   147d4:	dc400115 	stw	r17,4(sp)
   147d8:	dc000015 	stw	r16,0(sp)
   147dc:	dfc00415 	stw	ra,16(sp)
   147e0:	10c0400c 	andi	r3,r2,256
   147e4:	2821883a 	mov	r16,r5
   147e8:	2023883a 	mov	r17,r4
   147ec:	3025883a 	mov	r18,r6
   147f0:	3827883a 	mov	r19,r7
   147f4:	18000d1e 	bne	r3,zero,1482c <__swrite+0x68>
   147f8:	8140038f 	ldh	r5,14(r16)
   147fc:	10bbffcc 	andi	r2,r2,61439
   14800:	980f883a 	mov	r7,r19
   14804:	900d883a 	mov	r6,r18
   14808:	8809883a 	mov	r4,r17
   1480c:	8080030d 	sth	r2,12(r16)
   14810:	dfc00417 	ldw	ra,16(sp)
   14814:	dcc00317 	ldw	r19,12(sp)
   14818:	dc800217 	ldw	r18,8(sp)
   1481c:	dc400117 	ldw	r17,4(sp)
   14820:	dc000017 	ldw	r16,0(sp)
   14824:	dec00504 	addi	sp,sp,20
   14828:	0014c181 	jmpi	14c18 <_write_r>
   1482c:	2940038f 	ldh	r5,14(r5)
   14830:	01c00084 	movi	r7,2
   14834:	000d883a 	mov	r6,zero
   14838:	0014af80 	call	14af8 <_lseek_r>
   1483c:	8080030b 	ldhu	r2,12(r16)
   14840:	003fed06 	br	147f8 <__swrite+0x34>

00014844 <__sseek>:
   14844:	defffe04 	addi	sp,sp,-8
   14848:	dc000015 	stw	r16,0(sp)
   1484c:	2821883a 	mov	r16,r5
   14850:	2940038f 	ldh	r5,14(r5)
   14854:	dfc00115 	stw	ra,4(sp)
   14858:	0014af80 	call	14af8 <_lseek_r>
   1485c:	10ffffd8 	cmpnei	r3,r2,-1
   14860:	18000826 	beq	r3,zero,14884 <__sseek+0x40>
   14864:	80c0030b 	ldhu	r3,12(r16)
   14868:	80801415 	stw	r2,80(r16)
   1486c:	18c40014 	ori	r3,r3,4096
   14870:	80c0030d 	sth	r3,12(r16)
   14874:	dfc00117 	ldw	ra,4(sp)
   14878:	dc000017 	ldw	r16,0(sp)
   1487c:	dec00204 	addi	sp,sp,8
   14880:	f800283a 	ret
   14884:	80c0030b 	ldhu	r3,12(r16)
   14888:	18fbffcc 	andi	r3,r3,61439
   1488c:	80c0030d 	sth	r3,12(r16)
   14890:	dfc00117 	ldw	ra,4(sp)
   14894:	dc000017 	ldw	r16,0(sp)
   14898:	dec00204 	addi	sp,sp,8
   1489c:	f800283a 	ret

000148a0 <__sclose>:
   148a0:	2940038f 	ldh	r5,14(r5)
   148a4:	00149e81 	jmpi	149e8 <_close_r>

000148a8 <memset>:
   148a8:	defffb04 	addi	sp,sp,-20
   148ac:	dc800215 	stw	r18,8(sp)
   148b0:	dc400115 	stw	r17,4(sp)
   148b4:	dfc00415 	stw	ra,16(sp)
   148b8:	dcc00315 	stw	r19,12(sp)
   148bc:	dc000015 	stw	r16,0(sp)
   148c0:	208000cc 	andi	r2,r4,3
   148c4:	2023883a 	mov	r17,r4
   148c8:	2825883a 	mov	r18,r5
   148cc:	10004026 	beq	r2,zero,149d0 <memset+0x128>
   148d0:	34ffffc4 	addi	r19,r6,-1
   148d4:	30003326 	beq	r6,zero,149a4 <memset+0xfc>
   148d8:	280f883a 	mov	r7,r5
   148dc:	2021883a 	mov	r16,r4
   148e0:	00000306 	br	148f0 <memset+0x48>
   148e4:	9cffffc4 	addi	r19,r19,-1
   148e8:	99bfffe0 	cmpeqi	r6,r19,-1
   148ec:	30002d1e 	bne	r6,zero,149a4 <memset+0xfc>
   148f0:	84000044 	addi	r16,r16,1
   148f4:	818000cc 	andi	r6,r16,3
   148f8:	81ffffc5 	stb	r7,-1(r16)
   148fc:	303ff91e 	bne	r6,zero,148e4 <memset+0x3c>
   14900:	98800128 	cmpgeui	r2,r19,4
   14904:	10002126 	beq	r2,zero,1498c <memset+0xe4>
   14908:	01404074 	movhi	r5,257
   1490c:	29404044 	addi	r5,r5,257
   14910:	91003fcc 	andi	r4,r18,255
   14914:	0014f300 	call	14f30 <__mulsi3>
   14918:	98c00430 	cmpltui	r3,r19,16
   1491c:	18002f1e 	bne	r3,zero,149dc <memset+0x134>
   14920:	99bffc04 	addi	r6,r19,-16
   14924:	300cd13a 	srli	r6,r6,4
   14928:	31800044 	addi	r6,r6,1
   1492c:	300c913a 	slli	r6,r6,4
   14930:	818d883a 	add	r6,r16,r6
   14934:	80800015 	stw	r2,0(r16)
   14938:	80800115 	stw	r2,4(r16)
   1493c:	80800215 	stw	r2,8(r16)
   14940:	80800315 	stw	r2,12(r16)
   14944:	84000404 	addi	r16,r16,16
   14948:	81bffa1e 	bne	r16,r6,14934 <memset+0x8c>
   1494c:	9900030c 	andi	r4,r19,12
   14950:	98c003cc 	andi	r3,r19,15
   14954:	20001b26 	beq	r4,zero,149c4 <memset+0x11c>
   14958:	3009883a 	mov	r4,r6
   1495c:	30cb883a 	add	r5,r6,r3
   14960:	21000104 	addi	r4,r4,4
   14964:	290fc83a 	sub	r7,r5,r4
   14968:	39c00128 	cmpgeui	r7,r7,4
   1496c:	20bfff15 	stw	r2,-4(r4)
   14970:	383ffb1e 	bne	r7,zero,14960 <memset+0xb8>
   14974:	1c3fff04 	addi	r16,r3,-4
   14978:	8020d0ba 	srli	r16,r16,2
   1497c:	1cc000cc 	andi	r19,r3,3
   14980:	84000044 	addi	r16,r16,1
   14984:	802090ba 	slli	r16,r16,2
   14988:	3421883a 	add	r16,r6,r16
   1498c:	98000526 	beq	r19,zero,149a4 <memset+0xfc>
   14990:	900b883a 	mov	r5,r18
   14994:	84c7883a 	add	r3,r16,r19
   14998:	84000044 	addi	r16,r16,1
   1499c:	817fffc5 	stb	r5,-1(r16)
   149a0:	1c3ffd1e 	bne	r3,r16,14998 <memset+0xf0>
   149a4:	8805883a 	mov	r2,r17
   149a8:	dfc00417 	ldw	ra,16(sp)
   149ac:	dcc00317 	ldw	r19,12(sp)
   149b0:	dc800217 	ldw	r18,8(sp)
   149b4:	dc400117 	ldw	r17,4(sp)
   149b8:	dc000017 	ldw	r16,0(sp)
   149bc:	dec00504 	addi	sp,sp,20
   149c0:	f800283a 	ret
   149c4:	1827883a 	mov	r19,r3
   149c8:	983ff11e 	bne	r19,zero,14990 <memset+0xe8>
   149cc:	003ff506 	br	149a4 <memset+0xfc>
   149d0:	2021883a 	mov	r16,r4
   149d4:	3027883a 	mov	r19,r6
   149d8:	003fc906 	br	14900 <memset+0x58>
   149dc:	800d883a 	mov	r6,r16
   149e0:	9807883a 	mov	r3,r19
   149e4:	003fdc06 	br	14958 <memset+0xb0>

000149e8 <_close_r>:
   149e8:	defffe04 	addi	sp,sp,-8
   149ec:	dc000015 	stw	r16,0(sp)
   149f0:	008000b4 	movhi	r2,2
   149f4:	2021883a 	mov	r16,r4
   149f8:	2809883a 	mov	r4,r5
   149fc:	dfc00115 	stw	ra,4(sp)
   14a00:	10215415 	stw	zero,-31408(r2)
   14a04:	00110f80 	call	110f8 <close>
   14a08:	10ffffd8 	cmpnei	r3,r2,-1
   14a0c:	18000426 	beq	r3,zero,14a20 <_close_r+0x38>
   14a10:	dfc00117 	ldw	ra,4(sp)
   14a14:	dc000017 	ldw	r16,0(sp)
   14a18:	dec00204 	addi	sp,sp,8
   14a1c:	f800283a 	ret
   14a20:	00c000b4 	movhi	r3,2
   14a24:	18e15417 	ldw	r3,-31408(r3)
   14a28:	183ff926 	beq	r3,zero,14a10 <_close_r+0x28>
   14a2c:	80c00015 	stw	r3,0(r16)
   14a30:	dfc00117 	ldw	ra,4(sp)
   14a34:	dc000017 	ldw	r16,0(sp)
   14a38:	dec00204 	addi	sp,sp,8
   14a3c:	f800283a 	ret

00014a40 <_fstat_r>:
   14a40:	2807883a 	mov	r3,r5
   14a44:	defffe04 	addi	sp,sp,-8
   14a48:	dc000015 	stw	r16,0(sp)
   14a4c:	008000b4 	movhi	r2,2
   14a50:	300b883a 	mov	r5,r6
   14a54:	2021883a 	mov	r16,r4
   14a58:	1809883a 	mov	r4,r3
   14a5c:	dfc00115 	stw	ra,4(sp)
   14a60:	10215415 	stw	zero,-31408(r2)
   14a64:	0014fd00 	call	14fd0 <fstat>
   14a68:	10ffffd8 	cmpnei	r3,r2,-1
   14a6c:	18000426 	beq	r3,zero,14a80 <_fstat_r+0x40>
   14a70:	dfc00117 	ldw	ra,4(sp)
   14a74:	dc000017 	ldw	r16,0(sp)
   14a78:	dec00204 	addi	sp,sp,8
   14a7c:	f800283a 	ret
   14a80:	00c000b4 	movhi	r3,2
   14a84:	18e15417 	ldw	r3,-31408(r3)
   14a88:	183ff926 	beq	r3,zero,14a70 <_fstat_r+0x30>
   14a8c:	80c00015 	stw	r3,0(r16)
   14a90:	dfc00117 	ldw	ra,4(sp)
   14a94:	dc000017 	ldw	r16,0(sp)
   14a98:	dec00204 	addi	sp,sp,8
   14a9c:	f800283a 	ret

00014aa0 <_isatty_r>:
   14aa0:	defffe04 	addi	sp,sp,-8
   14aa4:	dc000015 	stw	r16,0(sp)
   14aa8:	008000b4 	movhi	r2,2
   14aac:	2021883a 	mov	r16,r4
   14ab0:	2809883a 	mov	r4,r5
   14ab4:	dfc00115 	stw	ra,4(sp)
   14ab8:	10215415 	stw	zero,-31408(r2)
   14abc:	00150c80 	call	150c8 <isatty>
   14ac0:	10ffffd8 	cmpnei	r3,r2,-1
   14ac4:	18000426 	beq	r3,zero,14ad8 <_isatty_r+0x38>
   14ac8:	dfc00117 	ldw	ra,4(sp)
   14acc:	dc000017 	ldw	r16,0(sp)
   14ad0:	dec00204 	addi	sp,sp,8
   14ad4:	f800283a 	ret
   14ad8:	00c000b4 	movhi	r3,2
   14adc:	18e15417 	ldw	r3,-31408(r3)
   14ae0:	183ff926 	beq	r3,zero,14ac8 <_isatty_r+0x28>
   14ae4:	80c00015 	stw	r3,0(r16)
   14ae8:	dfc00117 	ldw	ra,4(sp)
   14aec:	dc000017 	ldw	r16,0(sp)
   14af0:	dec00204 	addi	sp,sp,8
   14af4:	f800283a 	ret

00014af8 <_lseek_r>:
   14af8:	2807883a 	mov	r3,r5
   14afc:	defffe04 	addi	sp,sp,-8
   14b00:	dc000015 	stw	r16,0(sp)
   14b04:	300b883a 	mov	r5,r6
   14b08:	008000b4 	movhi	r2,2
   14b0c:	380d883a 	mov	r6,r7
   14b10:	2021883a 	mov	r16,r4
   14b14:	1809883a 	mov	r4,r3
   14b18:	dfc00115 	stw	ra,4(sp)
   14b1c:	10215415 	stw	zero,-31408(r2)
   14b20:	00151b40 	call	151b4 <lseek>
   14b24:	10ffffd8 	cmpnei	r3,r2,-1
   14b28:	18000426 	beq	r3,zero,14b3c <_lseek_r+0x44>
   14b2c:	dfc00117 	ldw	ra,4(sp)
   14b30:	dc000017 	ldw	r16,0(sp)
   14b34:	dec00204 	addi	sp,sp,8
   14b38:	f800283a 	ret
   14b3c:	00c000b4 	movhi	r3,2
   14b40:	18e15417 	ldw	r3,-31408(r3)
   14b44:	183ff926 	beq	r3,zero,14b2c <_lseek_r+0x34>
   14b48:	80c00015 	stw	r3,0(r16)
   14b4c:	dfc00117 	ldw	ra,4(sp)
   14b50:	dc000017 	ldw	r16,0(sp)
   14b54:	dec00204 	addi	sp,sp,8
   14b58:	f800283a 	ret

00014b5c <_read_r>:
   14b5c:	2807883a 	mov	r3,r5
   14b60:	defffe04 	addi	sp,sp,-8
   14b64:	dc000015 	stw	r16,0(sp)
   14b68:	300b883a 	mov	r5,r6
   14b6c:	008000b4 	movhi	r2,2
   14b70:	380d883a 	mov	r6,r7
   14b74:	2021883a 	mov	r16,r4
   14b78:	1809883a 	mov	r4,r3
   14b7c:	dfc00115 	stw	ra,4(sp)
   14b80:	10215415 	stw	zero,-31408(r2)
   14b84:	00153180 	call	15318 <read>
   14b88:	10ffffd8 	cmpnei	r3,r2,-1
   14b8c:	18000426 	beq	r3,zero,14ba0 <_read_r+0x44>
   14b90:	dfc00117 	ldw	ra,4(sp)
   14b94:	dc000017 	ldw	r16,0(sp)
   14b98:	dec00204 	addi	sp,sp,8
   14b9c:	f800283a 	ret
   14ba0:	00c000b4 	movhi	r3,2
   14ba4:	18e15417 	ldw	r3,-31408(r3)
   14ba8:	183ff926 	beq	r3,zero,14b90 <_read_r+0x34>
   14bac:	80c00015 	stw	r3,0(r16)
   14bb0:	dfc00117 	ldw	ra,4(sp)
   14bb4:	dc000017 	ldw	r16,0(sp)
   14bb8:	dec00204 	addi	sp,sp,8
   14bbc:	f800283a 	ret

00014bc0 <_sbrk_r>:
   14bc0:	defffe04 	addi	sp,sp,-8
   14bc4:	dc000015 	stw	r16,0(sp)
   14bc8:	008000b4 	movhi	r2,2
   14bcc:	2021883a 	mov	r16,r4
   14bd0:	2809883a 	mov	r4,r5
   14bd4:	dfc00115 	stw	ra,4(sp)
   14bd8:	10215415 	stw	zero,-31408(r2)
   14bdc:	00154200 	call	15420 <sbrk>
   14be0:	10ffffd8 	cmpnei	r3,r2,-1
   14be4:	18000426 	beq	r3,zero,14bf8 <_sbrk_r+0x38>
   14be8:	dfc00117 	ldw	ra,4(sp)
   14bec:	dc000017 	ldw	r16,0(sp)
   14bf0:	dec00204 	addi	sp,sp,8
   14bf4:	f800283a 	ret
   14bf8:	00c000b4 	movhi	r3,2
   14bfc:	18e15417 	ldw	r3,-31408(r3)
   14c00:	183ff926 	beq	r3,zero,14be8 <_sbrk_r+0x28>
   14c04:	80c00015 	stw	r3,0(r16)
   14c08:	dfc00117 	ldw	ra,4(sp)
   14c0c:	dc000017 	ldw	r16,0(sp)
   14c10:	dec00204 	addi	sp,sp,8
   14c14:	f800283a 	ret

00014c18 <_write_r>:
   14c18:	2807883a 	mov	r3,r5
   14c1c:	defffe04 	addi	sp,sp,-8
   14c20:	dc000015 	stw	r16,0(sp)
   14c24:	300b883a 	mov	r5,r6
   14c28:	008000b4 	movhi	r2,2
   14c2c:	380d883a 	mov	r6,r7
   14c30:	2021883a 	mov	r16,r4
   14c34:	1809883a 	mov	r4,r3
   14c38:	dfc00115 	stw	ra,4(sp)
   14c3c:	10215415 	stw	zero,-31408(r2)
   14c40:	00155140 	call	15514 <write>
   14c44:	10ffffd8 	cmpnei	r3,r2,-1
   14c48:	18000426 	beq	r3,zero,14c5c <_write_r+0x44>
   14c4c:	dfc00117 	ldw	ra,4(sp)
   14c50:	dc000017 	ldw	r16,0(sp)
   14c54:	dec00204 	addi	sp,sp,8
   14c58:	f800283a 	ret
   14c5c:	00c000b4 	movhi	r3,2
   14c60:	18e15417 	ldw	r3,-31408(r3)
   14c64:	183ff926 	beq	r3,zero,14c4c <_write_r+0x34>
   14c68:	80c00015 	stw	r3,0(r16)
   14c6c:	dfc00117 	ldw	ra,4(sp)
   14c70:	dc000017 	ldw	r16,0(sp)
   14c74:	dec00204 	addi	sp,sp,8
   14c78:	f800283a 	ret

00014c7c <_fclose_r>:
   14c7c:	defffc04 	addi	sp,sp,-16
   14c80:	dfc00315 	stw	ra,12(sp)
   14c84:	dc800215 	stw	r18,8(sp)
   14c88:	dc400115 	stw	r17,4(sp)
   14c8c:	dc000015 	stw	r16,0(sp)
   14c90:	28000726 	beq	r5,zero,14cb0 <_fclose_r+0x34>
   14c94:	2821883a 	mov	r16,r5
   14c98:	2023883a 	mov	r17,r4
   14c9c:	20000226 	beq	r4,zero,14ca8 <_fclose_r+0x2c>
   14ca0:	20800d17 	ldw	r2,52(r4)
   14ca4:	10002f26 	beq	r2,zero,14d64 <_fclose_r+0xe8>
   14ca8:	8080030f 	ldh	r2,12(r16)
   14cac:	1000081e 	bne	r2,zero,14cd0 <_fclose_r+0x54>
   14cb0:	0025883a 	mov	r18,zero
   14cb4:	9005883a 	mov	r2,r18
   14cb8:	dfc00317 	ldw	ra,12(sp)
   14cbc:	dc800217 	ldw	r18,8(sp)
   14cc0:	dc400117 	ldw	r17,4(sp)
   14cc4:	dc000017 	ldw	r16,0(sp)
   14cc8:	dec00404 	addi	sp,sp,16
   14ccc:	f800283a 	ret
   14cd0:	800b883a 	mov	r5,r16
   14cd4:	8809883a 	mov	r4,r17
   14cd8:	0013e0c0 	call	13e0c <__sflush_r>
   14cdc:	80c00b17 	ldw	r3,44(r16)
   14ce0:	1025883a 	mov	r18,r2
   14ce4:	18000426 	beq	r3,zero,14cf8 <_fclose_r+0x7c>
   14ce8:	81400717 	ldw	r5,28(r16)
   14cec:	8809883a 	mov	r4,r17
   14cf0:	183ee83a 	callr	r3
   14cf4:	10001316 	blt	r2,zero,14d44 <_fclose_r+0xc8>
   14cf8:	8080030b 	ldhu	r2,12(r16)
   14cfc:	1080200c 	andi	r2,r2,128
   14d00:	1000141e 	bne	r2,zero,14d54 <_fclose_r+0xd8>
   14d04:	81400c17 	ldw	r5,48(r16)
   14d08:	28000526 	beq	r5,zero,14d20 <_fclose_r+0xa4>
   14d0c:	80801004 	addi	r2,r16,64
   14d10:	28800226 	beq	r5,r2,14d1c <_fclose_r+0xa0>
   14d14:	8809883a 	mov	r4,r17
   14d18:	0012d500 	call	12d50 <_free_r>
   14d1c:	80000c15 	stw	zero,48(r16)
   14d20:	81401117 	ldw	r5,68(r16)
   14d24:	28000326 	beq	r5,zero,14d34 <_fclose_r+0xb8>
   14d28:	8809883a 	mov	r4,r17
   14d2c:	0012d500 	call	12d50 <_free_r>
   14d30:	80001115 	stw	zero,68(r16)
   14d34:	00144540 	call	14454 <__sfp_lock_acquire>
   14d38:	8000030d 	sth	zero,12(r16)
   14d3c:	00144580 	call	14458 <__sfp_lock_release>
   14d40:	003fdc06 	br	14cb4 <_fclose_r+0x38>
   14d44:	8080030b 	ldhu	r2,12(r16)
   14d48:	04bfffc4 	movi	r18,-1
   14d4c:	1080200c 	andi	r2,r2,128
   14d50:	103fec26 	beq	r2,zero,14d04 <_fclose_r+0x88>
   14d54:	81400417 	ldw	r5,16(r16)
   14d58:	8809883a 	mov	r4,r17
   14d5c:	0012d500 	call	12d50 <_free_r>
   14d60:	003fe806 	br	14d04 <_fclose_r+0x88>
   14d64:	001442c0 	call	1442c <__sinit>
   14d68:	003fcf06 	br	14ca8 <_fclose_r+0x2c>

00014d6c <fclose>:
   14d6c:	00800074 	movhi	r2,1
   14d70:	200b883a 	mov	r5,r4
   14d74:	111b6c17 	ldw	r4,28080(r2)
   14d78:	0014c7c1 	jmpi	14c7c <_fclose_r>

00014d7c <__divsi3>:
   14d7c:	20001a16 	blt	r4,zero,14de8 <__divsi3+0x6c>
   14d80:	000f883a 	mov	r7,zero
   14d84:	2800020e 	bge	r5,zero,14d90 <__divsi3+0x14>
   14d88:	014bc83a 	sub	r5,zero,r5
   14d8c:	39c0005c 	xori	r7,r7,1
   14d90:	200d883a 	mov	r6,r4
   14d94:	00c00044 	movi	r3,1
   14d98:	2900092e 	bgeu	r5,r4,14dc0 <__divsi3+0x44>
   14d9c:	00800804 	movi	r2,32
   14da0:	00c00044 	movi	r3,1
   14da4:	00000106 	br	14dac <__divsi3+0x30>
   14da8:	10001226 	beq	r2,zero,14df4 <__divsi3+0x78>
   14dac:	294b883a 	add	r5,r5,r5
   14db0:	10bfffc4 	addi	r2,r2,-1
   14db4:	18c7883a 	add	r3,r3,r3
   14db8:	293ffb36 	bltu	r5,r4,14da8 <__divsi3+0x2c>
   14dbc:	18000d26 	beq	r3,zero,14df4 <__divsi3+0x78>
   14dc0:	0005883a 	mov	r2,zero
   14dc4:	31400236 	bltu	r6,r5,14dd0 <__divsi3+0x54>
   14dc8:	314dc83a 	sub	r6,r6,r5
   14dcc:	10c4b03a 	or	r2,r2,r3
   14dd0:	1806d07a 	srli	r3,r3,1
   14dd4:	280ad07a 	srli	r5,r5,1
   14dd8:	183ffa1e 	bne	r3,zero,14dc4 <__divsi3+0x48>
   14ddc:	38000126 	beq	r7,zero,14de4 <__divsi3+0x68>
   14de0:	0085c83a 	sub	r2,zero,r2
   14de4:	f800283a 	ret
   14de8:	0109c83a 	sub	r4,zero,r4
   14dec:	01c00044 	movi	r7,1
   14df0:	003fe406 	br	14d84 <__divsi3+0x8>
   14df4:	0005883a 	mov	r2,zero
   14df8:	003ff806 	br	14ddc <__divsi3+0x60>

00014dfc <__modsi3>:
   14dfc:	20001716 	blt	r4,zero,14e5c <__modsi3+0x60>
   14e00:	000f883a 	mov	r7,zero
   14e04:	2005883a 	mov	r2,r4
   14e08:	2800010e 	bge	r5,zero,14e10 <__modsi3+0x14>
   14e0c:	014bc83a 	sub	r5,zero,r5
   14e10:	00c00044 	movi	r3,1
   14e14:	2900092e 	bgeu	r5,r4,14e3c <__modsi3+0x40>
   14e18:	01800804 	movi	r6,32
   14e1c:	00c00044 	movi	r3,1
   14e20:	00000106 	br	14e28 <__modsi3+0x2c>
   14e24:	30001026 	beq	r6,zero,14e68 <__modsi3+0x6c>
   14e28:	294b883a 	add	r5,r5,r5
   14e2c:	31bfffc4 	addi	r6,r6,-1
   14e30:	18c7883a 	add	r3,r3,r3
   14e34:	293ffb36 	bltu	r5,r4,14e24 <__modsi3+0x28>
   14e38:	18000b26 	beq	r3,zero,14e68 <__modsi3+0x6c>
   14e3c:	1806d07a 	srli	r3,r3,1
   14e40:	11400136 	bltu	r2,r5,14e48 <__modsi3+0x4c>
   14e44:	1145c83a 	sub	r2,r2,r5
   14e48:	280ad07a 	srli	r5,r5,1
   14e4c:	183ffb1e 	bne	r3,zero,14e3c <__modsi3+0x40>
   14e50:	38000126 	beq	r7,zero,14e58 <__modsi3+0x5c>
   14e54:	0085c83a 	sub	r2,zero,r2
   14e58:	f800283a 	ret
   14e5c:	0109c83a 	sub	r4,zero,r4
   14e60:	01c00044 	movi	r7,1
   14e64:	003fe706 	br	14e04 <__modsi3+0x8>
   14e68:	2005883a 	mov	r2,r4
   14e6c:	003ff806 	br	14e50 <__modsi3+0x54>

00014e70 <__udivsi3>:
   14e70:	200d883a 	mov	r6,r4
   14e74:	2900152e 	bgeu	r5,r4,14ecc <__udivsi3+0x5c>
   14e78:	28001416 	blt	r5,zero,14ecc <__udivsi3+0x5c>
   14e7c:	00800804 	movi	r2,32
   14e80:	00c00044 	movi	r3,1
   14e84:	00000206 	br	14e90 <__udivsi3+0x20>
   14e88:	10000e26 	beq	r2,zero,14ec4 <__udivsi3+0x54>
   14e8c:	28000416 	blt	r5,zero,14ea0 <__udivsi3+0x30>
   14e90:	294b883a 	add	r5,r5,r5
   14e94:	10bfffc4 	addi	r2,r2,-1
   14e98:	18c7883a 	add	r3,r3,r3
   14e9c:	293ffa36 	bltu	r5,r4,14e88 <__udivsi3+0x18>
   14ea0:	18000826 	beq	r3,zero,14ec4 <__udivsi3+0x54>
   14ea4:	0005883a 	mov	r2,zero
   14ea8:	31400236 	bltu	r6,r5,14eb4 <__udivsi3+0x44>
   14eac:	314dc83a 	sub	r6,r6,r5
   14eb0:	10c4b03a 	or	r2,r2,r3
   14eb4:	1806d07a 	srli	r3,r3,1
   14eb8:	280ad07a 	srli	r5,r5,1
   14ebc:	183ffa1e 	bne	r3,zero,14ea8 <__udivsi3+0x38>
   14ec0:	f800283a 	ret
   14ec4:	0005883a 	mov	r2,zero
   14ec8:	f800283a 	ret
   14ecc:	00c00044 	movi	r3,1
   14ed0:	003ff406 	br	14ea4 <__udivsi3+0x34>

00014ed4 <__umodsi3>:
   14ed4:	2005883a 	mov	r2,r4
   14ed8:	2900132e 	bgeu	r5,r4,14f28 <__umodsi3+0x54>
   14edc:	28001216 	blt	r5,zero,14f28 <__umodsi3+0x54>
   14ee0:	01800804 	movi	r6,32
   14ee4:	00c00044 	movi	r3,1
   14ee8:	00000206 	br	14ef4 <__umodsi3+0x20>
   14eec:	30000c26 	beq	r6,zero,14f20 <__umodsi3+0x4c>
   14ef0:	28000416 	blt	r5,zero,14f04 <__umodsi3+0x30>
   14ef4:	294b883a 	add	r5,r5,r5
   14ef8:	31bfffc4 	addi	r6,r6,-1
   14efc:	18c7883a 	add	r3,r3,r3
   14f00:	293ffa36 	bltu	r5,r4,14eec <__umodsi3+0x18>
   14f04:	18000626 	beq	r3,zero,14f20 <__umodsi3+0x4c>
   14f08:	1806d07a 	srli	r3,r3,1
   14f0c:	11400136 	bltu	r2,r5,14f14 <__umodsi3+0x40>
   14f10:	1145c83a 	sub	r2,r2,r5
   14f14:	280ad07a 	srli	r5,r5,1
   14f18:	183ffb1e 	bne	r3,zero,14f08 <__umodsi3+0x34>
   14f1c:	f800283a 	ret
   14f20:	2005883a 	mov	r2,r4
   14f24:	f800283a 	ret
   14f28:	00c00044 	movi	r3,1
   14f2c:	003ff606 	br	14f08 <__umodsi3+0x34>

00014f30 <__mulsi3>:
   14f30:	0005883a 	mov	r2,zero
   14f34:	20000726 	beq	r4,zero,14f54 <__mulsi3+0x24>
   14f38:	20c0004c 	andi	r3,r4,1
   14f3c:	2008d07a 	srli	r4,r4,1
   14f40:	18000126 	beq	r3,zero,14f48 <__mulsi3+0x18>
   14f44:	1145883a 	add	r2,r2,r5
   14f48:	294b883a 	add	r5,r5,r5
   14f4c:	203ffa1e 	bne	r4,zero,14f38 <__mulsi3+0x8>
   14f50:	f800283a 	ret
   14f54:	f800283a 	ret

00014f58 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   14f58:	defffd04 	addi	sp,sp,-12
   14f5c:	df000215 	stw	fp,8(sp)
   14f60:	df000204 	addi	fp,sp,8
   14f64:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   14f68:	0001883a 	nop
   14f6c:	e0bffe17 	ldw	r2,-8(fp)
   14f70:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   14f74:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   14f78:	10000226 	beq	r2,zero,14f84 <_exit+0x2c>
    ALT_SIM_FAIL();
   14f7c:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
   14f80:	00000106 	br	14f88 <_exit+0x30>
    ALT_SIM_PASS();
   14f84:	002af0b0 	cmpltui	zero,zero,43970
}
   14f88:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   14f8c:	0001883a 	nop
   14f90:	003ffe06 	br	14f8c <_exit+0x34>

00014f94 <alt_get_errno>:
        return 0;
    default:
        return -1;
    }

#if !defined(ALT_STDIN_PRESENT) && !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
   14f94:	defffe04 	addi	sp,sp,-8
   14f98:	dfc00115 	stw	ra,4(sp)
   14f9c:	df000015 	stw	fp,0(sp)
   14fa0:	d839883a 	mov	fp,sp
    /* Generate a link time warning, should this function ever be called. */
   14fa4:	d0a00517 	ldw	r2,-32748(gp)
   14fa8:	10000326 	beq	r2,zero,14fb8 <alt_get_errno+0x24>
   14fac:	d0a00517 	ldw	r2,-32748(gp)
   14fb0:	103ee83a 	callr	r2
   14fb4:	00000106 	br	14fbc <alt_get_errno+0x28>
   14fb8:	d0a5f104 	addi	r2,gp,-26684
    ALT_STUB_WARNING(fstat);
   14fbc:	e037883a 	mov	sp,fp
   14fc0:	dfc00117 	ldw	ra,4(sp)
   14fc4:	df000017 	ldw	fp,0(sp)
   14fc8:	dec00204 	addi	sp,sp,8
   14fcc:	f800283a 	ret

00014fd0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   14fd0:	defffb04 	addi	sp,sp,-20
   14fd4:	dfc00415 	stw	ra,16(sp)
   14fd8:	df000315 	stw	fp,12(sp)
   14fdc:	df000304 	addi	fp,sp,12
   14fe0:	e13ffe15 	stw	r4,-8(fp)
   14fe4:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   14fe8:	e0bffe17 	ldw	r2,-8(fp)
   14fec:	10000916 	blt	r2,zero,15014 <fstat+0x44>
   14ff0:	e0fffe17 	ldw	r3,-8(fp)
   14ff4:	1805883a 	mov	r2,r3
   14ff8:	1085883a 	add	r2,r2,r2
   14ffc:	10c5883a 	add	r2,r2,r3
   15000:	100490ba 	slli	r2,r2,2
   15004:	00c00074 	movhi	r3,1
   15008:	18d9b704 	addi	r3,r3,26332
   1500c:	10c5883a 	add	r2,r2,r3
   15010:	00000106 	br	15018 <fstat+0x48>
   15014:	0005883a 	mov	r2,zero
   15018:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   1501c:	e0bfff17 	ldw	r2,-4(fp)
   15020:	10001026 	beq	r2,zero,15064 <fstat+0x94>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   15024:	e0bfff17 	ldw	r2,-4(fp)
   15028:	10800017 	ldw	r2,0(r2)
   1502c:	10800817 	ldw	r2,32(r2)
   15030:	10000726 	beq	r2,zero,15050 <fstat+0x80>
    {
      return fd->dev->fstat(fd, st);
   15034:	e0bfff17 	ldw	r2,-4(fp)
   15038:	10800017 	ldw	r2,0(r2)
   1503c:	10800817 	ldw	r2,32(r2)
   15040:	e17ffd17 	ldw	r5,-12(fp)
   15044:	e13fff17 	ldw	r4,-4(fp)
   15048:	103ee83a 	callr	r2
   1504c:	00000a06 	br	15078 <fstat+0xa8>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   15050:	e0bffd17 	ldw	r2,-12(fp)
   15054:	00c80004 	movi	r3,8192
   15058:	10c00115 	stw	r3,4(r2)
      return 0;
   1505c:	0005883a 	mov	r2,zero
   15060:	00000506 	br	15078 <fstat+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   15064:	0014f940 	call	14f94 <alt_get_errno>
   15068:	1007883a 	mov	r3,r2
   1506c:	00801444 	movi	r2,81
   15070:	18800015 	stw	r2,0(r3)
    return -1;
   15074:	00bfffc4 	movi	r2,-1
  }
}
   15078:	e037883a 	mov	sp,fp
   1507c:	dfc00117 	ldw	ra,4(sp)
   15080:	df000017 	ldw	fp,0(sp)
   15084:	dec00204 	addi	sp,sp,8
   15088:	f800283a 	ret

0001508c <alt_get_errno>:
 * refers to a terminal device or not. If it is a terminal device then the
 * return value is one, otherwise it is zero.  
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
   1508c:	defffe04 	addi	sp,sp,-8
   15090:	dfc00115 	stw	ra,4(sp)
   15094:	df000015 	stw	fp,0(sp)
   15098:	d839883a 	mov	fp,sp
int ALT_ISATTY (int file)
   1509c:	d0a00517 	ldw	r2,-32748(gp)
   150a0:	10000326 	beq	r2,zero,150b0 <alt_get_errno+0x24>
   150a4:	d0a00517 	ldw	r2,-32748(gp)
   150a8:	103ee83a 	callr	r2
   150ac:	00000106 	br	150b4 <alt_get_errno+0x28>
   150b0:	d0a5f104 	addi	r2,gp,-26684
{
   150b4:	e037883a 	mov	sp,fp
   150b8:	dfc00117 	ldw	ra,4(sp)
   150bc:	df000017 	ldw	fp,0(sp)
   150c0:	dec00204 	addi	sp,sp,8
   150c4:	f800283a 	ret

000150c8 <isatty>:
   150c8:	deffea04 	addi	sp,sp,-88
   150cc:	dfc01515 	stw	ra,84(sp)
   150d0:	df001415 	stw	fp,80(sp)
   150d4:	df001404 	addi	fp,sp,80
   150d8:	e13fec15 	stw	r4,-80(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   150dc:	e0bfec17 	ldw	r2,-80(fp)
   150e0:	10000916 	blt	r2,zero,15108 <isatty+0x40>
   150e4:	e0ffec17 	ldw	r3,-80(fp)
   150e8:	1805883a 	mov	r2,r3
   150ec:	1085883a 	add	r2,r2,r2
   150f0:	10c5883a 	add	r2,r2,r3
   150f4:	100490ba 	slli	r2,r2,2
   150f8:	00c00074 	movhi	r3,1
   150fc:	18d9b704 	addi	r3,r3,26332
   15100:	10c5883a 	add	r2,r2,r3
   15104:	00000106 	br	1510c <isatty+0x44>
   15108:	0005883a 	mov	r2,zero
   1510c:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   15110:	e0bfff17 	ldw	r2,-4(fp)
   15114:	10000e26 	beq	r2,zero,15150 <isatty+0x88>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   15118:	e0bfff17 	ldw	r2,-4(fp)
   1511c:	10800017 	ldw	r2,0(r2)
   15120:	10800817 	ldw	r2,32(r2)
   15124:	1000021e 	bne	r2,zero,15130 <isatty+0x68>
    {
      return 1;
   15128:	00800044 	movi	r2,1
   1512c:	00000d06 	br	15164 <isatty+0x9c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   15130:	e0bfed04 	addi	r2,fp,-76
   15134:	100b883a 	mov	r5,r2
   15138:	e13fec17 	ldw	r4,-80(fp)
   1513c:	0014fd00 	call	14fd0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   15140:	e0bfee17 	ldw	r2,-72(fp)
   15144:	10880020 	cmpeqi	r2,r2,8192
   15148:	10803fcc 	andi	r2,r2,255
   1514c:	00000506 	br	15164 <isatty+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   15150:	001508c0 	call	1508c <alt_get_errno>
   15154:	1007883a 	mov	r3,r2
   15158:	00801444 	movi	r2,81
   1515c:	18800015 	stw	r2,0(r3)
    return 0;
   15160:	0005883a 	mov	r2,zero
  }
}
   15164:	e037883a 	mov	sp,fp
   15168:	dfc00117 	ldw	ra,4(sp)
   1516c:	df000017 	ldw	fp,0(sp)
   15170:	dec00204 	addi	sp,sp,8
   15174:	f800283a 	ret

00015178 <alt_get_errno>:
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   15178:	defffe04 	addi	sp,sp,-8
   1517c:	dfc00115 	stw	ra,4(sp)
   15180:	df000015 	stw	fp,0(sp)
   15184:	d839883a 	mov	fp,sp
  
   15188:	d0a00517 	ldw	r2,-32748(gp)
   1518c:	10000326 	beq	r2,zero,1519c <alt_get_errno+0x24>
   15190:	d0a00517 	ldw	r2,-32748(gp)
   15194:	103ee83a 	callr	r2
   15198:	00000106 	br	151a0 <alt_get_errno+0x28>
   1519c:	d0a5f104 	addi	r2,gp,-26684
  if (fd) 
   151a0:	e037883a 	mov	sp,fp
   151a4:	dfc00117 	ldw	ra,4(sp)
   151a8:	df000017 	ldw	fp,0(sp)
   151ac:	dec00204 	addi	sp,sp,8
   151b0:	f800283a 	ret

000151b4 <lseek>:
{
   151b4:	defff904 	addi	sp,sp,-28
   151b8:	dfc00615 	stw	ra,24(sp)
   151bc:	df000515 	stw	fp,20(sp)
   151c0:	df000504 	addi	fp,sp,20
   151c4:	e13ffd15 	stw	r4,-12(fp)
   151c8:	e17ffc15 	stw	r5,-16(fp)
   151cc:	e1bffb15 	stw	r6,-20(fp)
  off_t   rc = 0; 
   151d0:	e03fff15 	stw	zero,-4(fp)
  fd = (file < 0) ? NULL : &alt_fd_list[file];
   151d4:	e0bffd17 	ldw	r2,-12(fp)
   151d8:	10000916 	blt	r2,zero,15200 <lseek+0x4c>
   151dc:	e0fffd17 	ldw	r3,-12(fp)
   151e0:	1805883a 	mov	r2,r3
   151e4:	1085883a 	add	r2,r2,r2
   151e8:	10c5883a 	add	r2,r2,r3
   151ec:	100490ba 	slli	r2,r2,2
   151f0:	00c00074 	movhi	r3,1
   151f4:	18d9b704 	addi	r3,r3,26332
   151f8:	10c5883a 	add	r2,r2,r3
   151fc:	00000106 	br	15204 <lseek+0x50>
   15200:	0005883a 	mov	r2,zero
   15204:	e0bffe15 	stw	r2,-8(fp)
  if (fd) 
   15208:	e0bffe17 	ldw	r2,-8(fp)
   1520c:	10001026 	beq	r2,zero,15250 <lseek+0x9c>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   15210:	e0bffe17 	ldw	r2,-8(fp)
   15214:	10800017 	ldw	r2,0(r2)
   15218:	10800717 	ldw	r2,28(r2)
   1521c:	10000926 	beq	r2,zero,15244 <lseek+0x90>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   15220:	e0bffe17 	ldw	r2,-8(fp)
   15224:	10800017 	ldw	r2,0(r2)
   15228:	10800717 	ldw	r2,28(r2)
   1522c:	e1bffb17 	ldw	r6,-20(fp)
   15230:	e17ffc17 	ldw	r5,-16(fp)
   15234:	e13ffe17 	ldw	r4,-8(fp)
   15238:	103ee83a 	callr	r2
   1523c:	e0bfff15 	stw	r2,-4(fp)
   15240:	00000506 	br	15258 <lseek+0xa4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   15244:	00bfde84 	movi	r2,-134
   15248:	e0bfff15 	stw	r2,-4(fp)
   1524c:	00000206 	br	15258 <lseek+0xa4>
    }
  }
  else  
  {
    rc = -EBADFD;
   15250:	00bfebc4 	movi	r2,-81
   15254:	e0bfff15 	stw	r2,-4(fp)
  }

  if (rc < 0)
   15258:	e0bfff17 	ldw	r2,-4(fp)
   1525c:	1000070e 	bge	r2,zero,1527c <lseek+0xc8>
  {
    ALT_ERRNO = -rc;
   15260:	00151780 	call	15178 <alt_get_errno>
   15264:	1007883a 	mov	r3,r2
   15268:	e0bfff17 	ldw	r2,-4(fp)
   1526c:	0085c83a 	sub	r2,zero,r2
   15270:	18800015 	stw	r2,0(r3)
    rc = -1;
   15274:	00bfffc4 	movi	r2,-1
   15278:	e0bfff15 	stw	r2,-4(fp)
  }

  return rc;
   1527c:	e0bfff17 	ldw	r2,-4(fp)
}
   15280:	e037883a 	mov	sp,fp
   15284:	dfc00117 	ldw	ra,4(sp)
   15288:	df000017 	ldw	fp,0(sp)
   1528c:	dec00204 	addi	sp,sp,8
   15290:	f800283a 	ret

00015294 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   15294:	defffe04 	addi	sp,sp,-8
   15298:	df000115 	stw	fp,4(sp)
   1529c:	df000104 	addi	fp,sp,4
   152a0:	e13fff15 	stw	r4,-4(fp)
}
   152a4:	0001883a 	nop
   152a8:	e037883a 	mov	sp,fp
   152ac:	df000017 	ldw	fp,0(sp)
   152b0:	dec00104 	addi	sp,sp,4
   152b4:	f800283a 	ret

000152b8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   152b8:	defffe04 	addi	sp,sp,-8
   152bc:	df000115 	stw	fp,4(sp)
   152c0:	df000104 	addi	fp,sp,4
   152c4:	e13fff15 	stw	r4,-4(fp)
}
   152c8:	0001883a 	nop
   152cc:	e037883a 	mov	sp,fp
   152d0:	df000017 	ldw	fp,0(sp)
   152d4:	dec00104 	addi	sp,sp,4
   152d8:	f800283a 	ret

000152dc <alt_get_errno>:
        return -1;
    }
}

#else /* !ALT_USE_DIRECT_DRIVERS */

   152dc:	defffe04 	addi	sp,sp,-8
   152e0:	dfc00115 	stw	ra,4(sp)
   152e4:	df000015 	stw	fp,0(sp)
   152e8:	d839883a 	mov	fp,sp
int ALT_READ (int file, void *ptr, size_t len)
   152ec:	d0a00517 	ldw	r2,-32748(gp)
   152f0:	10000326 	beq	r2,zero,15300 <alt_get_errno+0x24>
   152f4:	d0a00517 	ldw	r2,-32748(gp)
   152f8:	103ee83a 	callr	r2
   152fc:	00000106 	br	15304 <alt_get_errno+0x28>
   15300:	d0a5f104 	addi	r2,gp,-26684
{
   15304:	e037883a 	mov	sp,fp
   15308:	dfc00117 	ldw	ra,4(sp)
   1530c:	df000017 	ldw	fp,0(sp)
   15310:	dec00204 	addi	sp,sp,8
   15314:	f800283a 	ret

00015318 <read>:
   15318:	defff904 	addi	sp,sp,-28
   1531c:	dfc00615 	stw	ra,24(sp)
   15320:	df000515 	stw	fp,20(sp)
   15324:	df000504 	addi	fp,sp,20
   15328:	e13ffd15 	stw	r4,-12(fp)
   1532c:	e17ffc15 	stw	r5,-16(fp)
   15330:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   15334:	e0bffd17 	ldw	r2,-12(fp)
   15338:	10000916 	blt	r2,zero,15360 <read+0x48>
   1533c:	e0fffd17 	ldw	r3,-12(fp)
   15340:	1805883a 	mov	r2,r3
   15344:	1085883a 	add	r2,r2,r2
   15348:	10c5883a 	add	r2,r2,r3
   1534c:	100490ba 	slli	r2,r2,2
   15350:	00c00074 	movhi	r3,1
   15354:	18d9b704 	addi	r3,r3,26332
   15358:	10c5883a 	add	r2,r2,r3
   1535c:	00000106 	br	15364 <read+0x4c>
   15360:	0005883a 	mov	r2,zero
   15364:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   15368:	e0bfff17 	ldw	r2,-4(fp)
   1536c:	10002226 	beq	r2,zero,153f8 <read+0xe0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   15370:	e0bfff17 	ldw	r2,-4(fp)
   15374:	10800217 	ldw	r2,8(r2)
   15378:	108000cc 	andi	r2,r2,3
   1537c:	10800060 	cmpeqi	r2,r2,1
   15380:	1000181e 	bne	r2,zero,153e4 <read+0xcc>
        (fd->dev->read))
   15384:	e0bfff17 	ldw	r2,-4(fp)
   15388:	10800017 	ldw	r2,0(r2)
   1538c:	10800517 	ldw	r2,20(r2)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   15390:	10001426 	beq	r2,zero,153e4 <read+0xcc>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   15394:	e0bfff17 	ldw	r2,-4(fp)
   15398:	10800017 	ldw	r2,0(r2)
   1539c:	10800517 	ldw	r2,20(r2)
   153a0:	e0fffb17 	ldw	r3,-20(fp)
   153a4:	180d883a 	mov	r6,r3
   153a8:	e17ffc17 	ldw	r5,-16(fp)
   153ac:	e13fff17 	ldw	r4,-4(fp)
   153b0:	103ee83a 	callr	r2
   153b4:	e0bffe15 	stw	r2,-8(fp)
   153b8:	e0bffe17 	ldw	r2,-8(fp)
   153bc:	1000070e 	bge	r2,zero,153dc <read+0xc4>
        {
          ALT_ERRNO = -rval;
   153c0:	00152dc0 	call	152dc <alt_get_errno>
   153c4:	1007883a 	mov	r3,r2
   153c8:	e0bffe17 	ldw	r2,-8(fp)
   153cc:	0085c83a 	sub	r2,zero,r2
   153d0:	18800015 	stw	r2,0(r3)
          return -1;
   153d4:	00bfffc4 	movi	r2,-1
   153d8:	00000c06 	br	1540c <read+0xf4>
        }
        return rval;
   153dc:	e0bffe17 	ldw	r2,-8(fp)
   153e0:	00000a06 	br	1540c <read+0xf4>
      }
      else
      {
        ALT_ERRNO = EACCES;
   153e4:	00152dc0 	call	152dc <alt_get_errno>
   153e8:	1007883a 	mov	r3,r2
   153ec:	00800344 	movi	r2,13
   153f0:	18800015 	stw	r2,0(r3)
   153f4:	00000406 	br	15408 <read+0xf0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   153f8:	00152dc0 	call	152dc <alt_get_errno>
   153fc:	1007883a 	mov	r3,r2
   15400:	00801444 	movi	r2,81
   15404:	18800015 	stw	r2,0(r3)
  }
  return -1;
   15408:	00bfffc4 	movi	r2,-1
}
   1540c:	e037883a 	mov	sp,fp
   15410:	dfc00117 	ldw	ra,4(sp)
   15414:	df000017 	ldw	fp,0(sp)
   15418:	dec00204 	addi	sp,sp,8
   1541c:	f800283a 	ret

00015420 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   15420:	defff904 	addi	sp,sp,-28
   15424:	df000615 	stw	fp,24(sp)
   15428:	df000604 	addi	fp,sp,24
   1542c:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
   15430:	0005303a 	rdctl	r2,status
   15434:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15438:	e0fffd17 	ldw	r3,-12(fp)
   1543c:	00bfff84 	movi	r2,-2
   15440:	1884703a 	and	r2,r3,r2
   15444:	1001703a 	wrctl	status,r2
  return context;
   15448:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   1544c:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   15450:	d0a00c17 	ldw	r2,-32720(gp)
   15454:	10c000c4 	addi	r3,r2,3
   15458:	00bfff04 	movi	r2,-4
   1545c:	1884703a 	and	r2,r3,r2
   15460:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   15464:	d0e00c17 	ldw	r3,-32720(gp)
   15468:	e0bffa17 	ldw	r2,-24(fp)
   1546c:	1887883a 	add	r3,r3,r2
   15470:	008000b4 	movhi	r2,2
   15474:	10a80004 	addi	r2,r2,-24576
   15478:	10c0072e 	bgeu	r2,r3,15498 <sbrk+0x78>
   1547c:	e0bfff17 	ldw	r2,-4(fp)
   15480:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   15484:	e0bffc17 	ldw	r2,-16(fp)
   15488:	1001703a 	wrctl	status,r2
}
   1548c:	0001883a 	nop
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   15490:	00bfffc4 	movi	r2,-1
   15494:	00000c06 	br	154c8 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   15498:	d0a00c17 	ldw	r2,-32720(gp)
   1549c:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
   154a0:	d0e00c17 	ldw	r3,-32720(gp)
   154a4:	e0bffa17 	ldw	r2,-24(fp)
   154a8:	1885883a 	add	r2,r3,r2
   154ac:	d0a00c15 	stw	r2,-32720(gp)
   154b0:	e0bfff17 	ldw	r2,-4(fp)
   154b4:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   154b8:	e0bffb17 	ldw	r2,-20(fp)
   154bc:	1001703a 	wrctl	status,r2
}
   154c0:	0001883a 	nop

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   154c4:	e0bffe17 	ldw	r2,-8(fp)
} 
   154c8:	e037883a 	mov	sp,fp
   154cc:	df000017 	ldw	fp,0(sp)
   154d0:	dec00104 	addi	sp,sp,4
   154d4:	f800283a 	ret

000154d8 <alt_get_errno>:
#ifdef ALT_STDOUT_PRESENT
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
   154d8:	defffe04 	addi	sp,sp,-8
   154dc:	dfc00115 	stw	ra,4(sp)
   154e0:	df000015 	stw	fp,0(sp)
   154e4:	d839883a 	mov	fp,sp
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
   154e8:	d0a00517 	ldw	r2,-32748(gp)
   154ec:	10000326 	beq	r2,zero,154fc <alt_get_errno+0x24>
   154f0:	d0a00517 	ldw	r2,-32748(gp)
   154f4:	103ee83a 	callr	r2
   154f8:	00000106 	br	15500 <alt_get_errno+0x28>
   154fc:	d0a5f104 	addi	r2,gp,-26684
#endif /* ALT_STDERR_PRESENT */
   15500:	e037883a 	mov	sp,fp
   15504:	dfc00117 	ldw	ra,4(sp)
   15508:	df000017 	ldw	fp,0(sp)
   1550c:	dec00204 	addi	sp,sp,8
   15510:	f800283a 	ret

00015514 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   15514:	defff904 	addi	sp,sp,-28
   15518:	dfc00615 	stw	ra,24(sp)
   1551c:	df000515 	stw	fp,20(sp)
   15520:	df000504 	addi	fp,sp,20
   15524:	e13ffd15 	stw	r4,-12(fp)
   15528:	e17ffc15 	stw	r5,-16(fp)
   1552c:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   15530:	e0bffd17 	ldw	r2,-12(fp)
   15534:	10000916 	blt	r2,zero,1555c <write+0x48>
   15538:	e0fffd17 	ldw	r3,-12(fp)
   1553c:	1805883a 	mov	r2,r3
   15540:	1085883a 	add	r2,r2,r2
   15544:	10c5883a 	add	r2,r2,r3
   15548:	100490ba 	slli	r2,r2,2
   1554c:	00c00074 	movhi	r3,1
   15550:	18d9b704 	addi	r3,r3,26332
   15554:	10c5883a 	add	r2,r2,r3
   15558:	00000106 	br	15560 <write+0x4c>
   1555c:	0005883a 	mov	r2,zero
   15560:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   15564:	e0bfff17 	ldw	r2,-4(fp)
   15568:	10002126 	beq	r2,zero,155f0 <write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   1556c:	e0bfff17 	ldw	r2,-4(fp)
   15570:	10800217 	ldw	r2,8(r2)
   15574:	108000cc 	andi	r2,r2,3
   15578:	10001826 	beq	r2,zero,155dc <write+0xc8>
   1557c:	e0bfff17 	ldw	r2,-4(fp)
   15580:	10800017 	ldw	r2,0(r2)
   15584:	10800617 	ldw	r2,24(r2)
   15588:	10001426 	beq	r2,zero,155dc <write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   1558c:	e0bfff17 	ldw	r2,-4(fp)
   15590:	10800017 	ldw	r2,0(r2)
   15594:	10800617 	ldw	r2,24(r2)
   15598:	e0fffb17 	ldw	r3,-20(fp)
   1559c:	180d883a 	mov	r6,r3
   155a0:	e17ffc17 	ldw	r5,-16(fp)
   155a4:	e13fff17 	ldw	r4,-4(fp)
   155a8:	103ee83a 	callr	r2
   155ac:	e0bffe15 	stw	r2,-8(fp)
   155b0:	e0bffe17 	ldw	r2,-8(fp)
   155b4:	1000070e 	bge	r2,zero,155d4 <write+0xc0>
      {
        ALT_ERRNO = -rval;
   155b8:	00154d80 	call	154d8 <alt_get_errno>
   155bc:	1007883a 	mov	r3,r2
   155c0:	e0bffe17 	ldw	r2,-8(fp)
   155c4:	0085c83a 	sub	r2,zero,r2
   155c8:	18800015 	stw	r2,0(r3)
        return -1;
   155cc:	00bfffc4 	movi	r2,-1
   155d0:	00000c06 	br	15604 <write+0xf0>
      }
      return rval;
   155d4:	e0bffe17 	ldw	r2,-8(fp)
   155d8:	00000a06 	br	15604 <write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
   155dc:	00154d80 	call	154d8 <alt_get_errno>
   155e0:	1007883a 	mov	r3,r2
   155e4:	00800344 	movi	r2,13
   155e8:	18800015 	stw	r2,0(r3)
   155ec:	00000406 	br	15600 <write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   155f0:	00154d80 	call	154d8 <alt_get_errno>
   155f4:	1007883a 	mov	r3,r2
   155f8:	00801444 	movi	r2,81
   155fc:	18800015 	stw	r2,0(r3)
  }
  return -1;
   15600:	00bfffc4 	movi	r2,-1
}
   15604:	e037883a 	mov	sp,fp
   15608:	dfc00117 	ldw	ra,4(sp)
   1560c:	df000017 	ldw	fp,0(sp)
   15610:	dec00204 	addi	sp,sp,8
   15614:	f800283a 	ret
