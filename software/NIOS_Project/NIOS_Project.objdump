
NIOS_Project.elf:     file format elf32-littlenios2
NIOS_Project.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010224

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x000058fc memsz 0x000058fc flags r-x
    LOAD off    0x0000691c vaddr 0x0001591c paddr 0x0001708c align 2**12
         filesz 0x00001770 memsz 0x00001770 flags rw-
    LOAD off    0x000007fc vaddr 0x000187fc paddr 0x000187fc align 2**12
         filesz 0x00000000 memsz 0x00000428 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000204  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000056bc  00010224  00010224  00001224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000003c  000158e0  000158e0  000068e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001770  0001591c  0001708c  0000691c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000428  000187fc  000187fc  000087fc  2**2
                  ALLOC, SMALL_DATA
  6 .RAM          00000000  00018c24  00018c24  0000808c  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  0000808c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000a58  00000000  00000000  000080c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   00014982  00000000  00000000  00008b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000068cb  00000000  00000000  0001d49a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   00006025  00000000  00000000  00023d65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  000015d4  00000000  00000000  00029d8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    00001aa5  00000000  00000000  0002b360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_alt_sim_info 00000040  00000000  00000000  0002ce08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000070  00000000  00000000  0002ce48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line_str 000013a6  00000000  00000000  0002ceb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loclists 000041d6  00000000  00000000  0002e25e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000005e0  00000000  00000000  00032434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .thread_model 00000003  00000000  00000000  0003504e  2**0
                  CONTENTS, READONLY
 20 .cpu          00000004  00000000  00000000  00035051  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  00035055  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  00035056  2**0
                  CONTENTS, READONLY
 23 .sysid_hash   00000004  00000000  00000000  00035057  2**0
                  CONTENTS, READONLY
 24 .sysid_base   00000004  00000000  00000000  0003505b  2**0
                  CONTENTS, READONLY
 25 .sysid_time   00000004  00000000  00000000  0003505f  2**0
                  CONTENTS, READONLY
 26 .stderr_dev   00000005  00000000  00000000  00035063  2**0
                  CONTENTS, READONLY
 27 .stdin_dev    00000005  00000000  00000000  00035068  2**0
                  CONTENTS, READONLY
 28 .stdout_dev   00000005  00000000  00000000  0003506d  2**0
                  CONTENTS, READONLY
 29 .sopc_system_name 00000015  00000000  00000000  00035072  2**0
                  CONTENTS, READONLY
 30 .quartus_project_dir 0000004c  00000000  00000000  00035087  2**0
                  CONTENTS, READONLY
 31 .jdi          0000527d  00000000  00000000  000350d3  2**0
                  CONTENTS, READONLY
 32 .sopcinfo     00048f38  00000000  00000000  0003a350  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010224 l    d  .text	00000000 .text
000158e0 l    d  .rodata	00000000 .rodata
0001591c l    d  .rwdata	00000000 .rwdata
000187fc l    d  .bss	00000000 .bss
00018c24 l    d  .RAM	00000000 .RAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    df *ABS*	00000000 crt0.o
0001025c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00017054 l     O .rwdata	00000001 invert_me.0
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 impure.c
00000000 l    df *ABS*	00000000 findfp.c
00010498 l     F .text	00000008 __fp_lock
000104a0 l     F .text	0000001c stdio_exit_handler
000104bc l     F .text	00000070 cleanup_stdio
0001052c l     F .text	00000008 __fp_unlock
00010534 l     F .text	00000174 global_stdio_init.part.0
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 freer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 reallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_close.c
000132b4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
000133cc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00013434 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0001352c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00013618 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00013704 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
000138e4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0001707c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00013b80 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00013cc0 l     F .text	00000034 alt_dev_reg
00015ff4 l     O .rwdata	00001060 DEBUG
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00013fa4 l     F .text	00000214 altera_avalon_jtag_uart_irq
000141b8 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00014adc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00014f40 l     F .text	000000d4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00015090 l     F .text	0000003c alt_get_errno
000150cc l     F .text	000000dc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00018830 g     O .bss	00000004 alt_instruction_exception_handler
00012f38 g     F .text	00000058 _isatty_r
00013820 g     F .text	0000007c alt_main
00010320 g     F .text	000000d0 _puts_r
00018994 g     O .bss	00000100 alt_irq
00011578 g     F .text	00000064 _lseek_r
0001708c g       *ABS*	00000000 __flash_rwdata_start
00018c24 g       *ABS*	00000000 __alt_heap_start
00010e4c g     F .text	0000005c __sseek
000107c8 g     F .text	00000028 __sinit
000138c0 g     F .text	00000024 __malloc_unlock
000111f0 g     F .text	00000128 memmove
000154d8 g     F .text	00000024 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
00018800 g     O .bss	00000004 __stdio_exit_handler
00010020 g       *ABS*	00000000 __flash_exceptions_start
00012ed8 g     F .text	00000060 _fstat_r
000187fc g     O .bss	00000004 errno
00010dc4 g     F .text	00000008 __seofread
00018818 g     O .bss	00000004 alt_argv
0001f054 g       *ABS*	00000000 _gp
00013b50 g     F .text	00000030 usleep
00015e74 g     O .rwdata	00000180 alt_fd_list
000154fc g     F .text	00000090 alt_find_dev
000110f0 g     F .text	00000100 memcpy
00015014 g     F .text	0000007c alt_io_redirect
000158e0 g       *ABS*	00000000 __DTOR_END__
000103f0 g     F .text	00000010 puts
0001574c g     F .text	00000074 alt_exception_cause_generated_bad_addr
000143bc g     F .text	00000220 altera_avalon_jtag_uart_read
000131f4 g     F .text	00000064 .hidden __udivsi3
00013568 g     F .text	000000b0 isatty
0001880c g     O .bss	00000004 __malloc_top_pad
00010828 g     F .text	000004a0 __sfvwrite_r
00012f90 g     F .text	00000058 _sbrk_r
000115dc g     F .text	00000064 _read_r
00017074 g     O .rwdata	00000004 alt_max_fd
000128b4 g     F .text	000000f0 _fclose_r
00012c18 g     F .text	0000008c fflush
00018808 g     O .bss	00000004 __malloc_max_sbrked_mem
00013740 g     F .text	000000e0 lseek
000122c8 g     F .text	000005ec _realloc_r
00018c24 g       *ABS*	00000000 __bss_end
00014e58 g     F .text	000000e8 alt_iic_isr_register
000153ac g     F .text	0000012c alt_tick
000107f8 g     F .text	00000018 __fp_lock_all
00014e0c g     F .text	0000004c alt_ic_irq_enabled
00015308 g     F .text	000000a4 alt_alarm_stop
00018820 g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	000000c8 alt_irq_handler
00015e4c g     O .rwdata	00000028 alt_dev_null
000114b0 g     F .text	000000c8 _reclaim_reent
00014abc g     F .text	00000020 alt_dcache_flush_all
0001708c g       *ABS*	00000000 __ram_rwdata_end
00018834 g     O .bss	00000138 __sf
0001706c g     O .rwdata	00000008 alt_dev_list
00013bbc g     F .text	00000104 write
0001591c g       *ABS*	00000000 __ram_rodata_end
00013470 g     F .text	000000bc fstat
00013258 g     F .text	0000005c .hidden __umodsi3
00018c24 g       *ABS*	00000000 end
00013ee4 g     F .text	000000c0 altera_avalon_jtag_uart_init
000101c4 g     F .exceptions	00000060 alt_instruction_exception_entry
000158e0 g       *ABS*	00000000 __CTOR_LIST__
0001a000 g       *ABS*	00000000 __alt_stack_pointer
000145dc g     F .text	00000228 altera_avalon_jtag_uart_write
000107f0 g     F .text	00000004 __sfp_lock_acquire
00010ff4 g     F .text	000000fc memchr
000117f8 g     F .text	00000308 _free_r
00012fe8 g     F .text	00000118 __call_exitprocs
00018a94 g     O .bss	00000190 __atexit0
0001705c g     O .rwdata	00000004 __malloc_sbrk_base
00010224 g     F .text	0000003c _start
00018824 g     O .bss	00000004 _alt_tick_rate
00018828 g     O .bss	00000008 _alt_nticks
00013920 g     F .text	00000108 read
00013d30 g     F .text	00000050 alt_sys_init
0001584c g     F .text	00000094 __register_exitproc
00014260 g     F .text	00000068 altera_avalon_jtag_uart_close
000102f8 g     F .text	00000028 .hidden __mulsi3
0001591c g       *ABS*	00000000 __ram_rwdata_start
000158e0 g       *ABS*	00000000 __ram_rodata_start
0001896c g     O .bss	00000028 __malloc_current_mallinfo
00013d80 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00015694 g     F .text	000000b8 alt_get_fd
00014964 g     F .text	00000158 alt_busy_sleep
00011458 g     F .text	00000058 _close_r
000157d4 g     F .text	00000078 memcmp
00013e40 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00018c24 g       *ABS*	00000000 __alt_stack_base
00013e90 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00010eb0 g     F .text	00000144 __swsetup_r
000106a8 g     F .text	00000120 __sfp
00015a44 g     O .rwdata	00000408 __malloc_av_
00018810 g     O .bss	00000004 __atexit
00010d70 g     F .text	00000054 __sread
0001558c g     F .text	00000108 alt_find_file
00014b18 g     F .text	000000a8 alt_dev_llist_insert
0001389c g     F .text	00000024 __malloc_lock
00013a98 g     F .text	000000b8 sbrk
00012bbc g     F .text	0000005c _fflush_r
000187fc g       *ABS*	00000000 __bss_start
00011318 g     F .text	00000140 memset
000102a0 g     F .text	00000058 main
00010000 g       *ABS*	00000000 __alt_mem_RAM
00010260 g     F .text	00000040 delay_ms
0001881c g     O .bss	00000004 alt_envp
00018804 g     O .bss	00000004 __malloc_max_total_mem
00013de0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00010ea8 g     F .text	00000008 __sclose
0001a000 g       *ABS*	00000000 __alt_heap_limit
000129a4 g     F .text	00000010 fclose
00011b00 g     F .text	000007c8 _malloc_r
00017078 g     O .rwdata	00000004 alt_errno
00013100 g     F .text	00000080 .hidden __divsi3
000116d4 g     F .text	00000124 _malloc_trim_r
000158e0 g       *ABS*	00000000 __CTOR_END__
000158e0 g       *ABS*	00000000 __flash_rodata_start
000158e0 g       *ABS*	00000000 __DTOR_LIST__
00013cf4 g     F .text	0000003c alt_irq_init
00013a28 g     F .text	00000070 alt_release_fd
000157c0 g     F .text	00000014 atexit
00011640 g     F .text	00000064 _write_r
00017058 g     O .rwdata	00000004 _impure_ptr
00018814 g     O .bss	00000004 alt_argc
000129b4 g     F .text	00000208 __sflush_r
00014c24 g     F .text	00000064 _do_dtors
00010cc8 g     F .text	000000a8 _fwalk_sglue
00010020 g       .exceptions	00000000 alt_irq_entry
00010810 g     F .text	00000018 __fp_unlock_all
00017064 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00012e4c g     F .text	0000008c __swhatbuf_r
00014ca8 g     F .text	00000050 alt_ic_isr_register
00015a38 g     O .rwdata	0000000c __sglue
0001708c g       *ABS*	00000000 _edata
00018c24 g       *ABS*	00000000 _end
00010224 g       *ABS*	00000000 __ram_exceptions_end
000142c8 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00014d80 g     F .text	0000008c alt_ic_irq_disable
00010dcc g     F .text	00000080 __swrite
00017060 g     O .rwdata	00000004 __malloc_trim_threshold
000116a4 g     F .text	00000030 exit
00013180 g     F .text	00000074 .hidden __modsi3
0001591c g     O .rwdata	0000011c _impure_data
0001a000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
000107f4 g     F .text	00000004 __sfp_lock_release
000133f8 g     F .text	0000003c _exit
00014804 g     F .text	00000160 alt_alarm_start
00012ca4 g     F .text	000001a8 __smakebuf_r
00010400 g     F .text	00000098 strlen
000151a8 g     F .text	00000160 open
00014c88 g     F .text	00000020 alt_icache_flush_all
00017080 g     O .rwdata	00000004 alt_priority_mask
00014cf8 g     F .text	00000088 alt_ic_irq_enable
00017084 g     O .rwdata	00000008 alt_alarm_list
00014bc0 g     F .text	00000064 _do_ctors
000132f0 g     F .text	000000dc close
00013680 g     F .text	00000084 alt_load



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08408914 	ori	at,at,548
    jmp r1
   10008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
   10094:	e93fff04 	addi	r4,ea,-4
   10098:	00101c40 	call	101c4 <alt_instruction_exception_entry>
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>
   100a0:	ebffff04 	addi	r15,ea,-4
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defff904 	addi	sp,sp,-28
   10100:	dfc00615 	stw	ra,24(sp)
   10104:	df000515 	stw	fp,20(sp)
   10108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   1010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10110:	0005313a 	rdctl	r2,ipending
   10114:	e0bffc15 	stw	r2,-16(fp)

  return active;
   10118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1011c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   10120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10124:	00800044 	movi	r2,1
   10128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1012c:	e0ffff17 	ldw	r3,-4(fp)
   10130:	e0bffe17 	ldw	r2,-8(fp)
   10134:	1884703a 	and	r2,r3,r2
   10138:	10001126 	beq	r2,zero,10180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1013c:	e0bffd17 	ldw	r2,-12(fp)
   10140:	100690fa 	slli	r3,r2,3
   10144:	008000b4 	movhi	r2,2
   10148:	1885883a 	add	r2,r3,r2
   1014c:	10e26517 	ldw	r3,-30316(r2)
   10150:	e0bffd17 	ldw	r2,-12(fp)
   10154:	100890fa 	slli	r4,r2,3
   10158:	008000b4 	movhi	r2,2
   1015c:	2085883a 	add	r2,r4,r2
   10160:	10a26617 	ldw	r2,-30312(r2)
   10164:	1009883a 	mov	r4,r2
   10168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   1016c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
   10170:	0005313a 	rdctl	r2,ipending
   10174:	e0bffb15 	stw	r2,-20(fp)
  return active;
   10178:	e0bffb17 	ldw	r2,-20(fp)
   1017c:	00000706 	br	1019c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
   10180:	e0bffe17 	ldw	r2,-8(fp)
   10184:	1085883a 	add	r2,r2,r2
   10188:	e0bffe15 	stw	r2,-8(fp)
      i++;
   1018c:	e0bffd17 	ldw	r2,-12(fp)
   10190:	10800044 	addi	r2,r2,1
   10194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
   10198:	003fe406 	br	1012c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
   1019c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   101a0:	e0bfff17 	ldw	r2,-4(fp)
   101a4:	103fde1e 	bne	r2,zero,10120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   101a8:	0001883a 	nop
}
   101ac:	0001883a 	nop
   101b0:	e037883a 	mov	sp,fp
   101b4:	dfc00117 	ldw	ra,4(sp)
   101b8:	df000017 	ldw	fp,0(sp)
   101bc:	dec00204 	addi	sp,sp,8
   101c0:	f800283a 	ret

000101c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   101c4:	defffb04 	addi	sp,sp,-20
   101c8:	dfc00415 	stw	ra,16(sp)
   101cc:	df000315 	stw	fp,12(sp)
   101d0:	df000304 	addi	fp,sp,12
   101d4:	e13ffd15 	stw	r4,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   101d8:	00bfffc4 	movi	r2,-1
   101dc:	e0bfff15 	stw	r2,-4(fp)
  badaddr = 0;
   101e0:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   101e4:	d0a5f717 	ldw	r2,-26660(gp)
   101e8:	10000726 	beq	r2,zero,10208 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   101ec:	d0a5f717 	ldw	r2,-26660(gp)
   101f0:	e0ffff17 	ldw	r3,-4(fp)
   101f4:	e1bffe17 	ldw	r6,-8(fp)
   101f8:	e17ffd17 	ldw	r5,-12(fp)
   101fc:	1809883a 	mov	r4,r3
   10200:	103ee83a 	callr	r2
   10204:	00000206 	br	10210 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10208:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   1020c:	0005883a 	mov	r2,zero
}
   10210:	e037883a 	mov	sp,fp
   10214:	dfc00117 	ldw	ra,4(sp)
   10218:	df000017 	ldw	fp,0(sp)
   1021c:	dec00204 	addi	sp,sp,8
   10220:	f800283a 	ret

Disassembly of section .text:

00010224 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10224:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   10228:	dee80014 	ori	sp,sp,40960
    movhi gp, %hi(_gp)
   1022c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   10230:	d6bc1514 	ori	gp,gp,61524
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10234:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10238:	10a1ff14 	ori	r2,r2,34812

    movhi r3, %hi(__bss_end)
   1023c:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   10240:	18e30914 	ori	r3,r3,35876

    beq r2, r3, 1f
   10244:	10c00326 	beq	r2,r3,10254 <_start+0x30>

0:
    stw zero, (r2)
   10248:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   1024c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   10250:	10fffd36 	bltu	r2,r3,10248 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10254:	00136800 	call	13680 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10258:	00138200 	call	13820 <alt_main>

0001025c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   1025c:	003fff06 	br	1025c <alt_after_alt_main>

00010260 <delay_ms>:
#include "system.h"
#include "stdint.h"
#include "altera_avalon_pio_regs.h"


void delay_ms(int milliseconds) {
   10260:	defffd04 	addi	sp,sp,-12
   10264:	dfc00215 	stw	ra,8(sp)
   10268:	df000115 	stw	fp,4(sp)
   1026c:	df000104 	addi	fp,sp,4
   10270:	e13fff15 	stw	r4,-4(fp)
    usleep(milliseconds * 1000);  // Convert to microseconds
   10274:	0140fa04 	movi	r5,1000
   10278:	e13fff17 	ldw	r4,-4(fp)
   1027c:	00102f80 	call	102f8 <__mulsi3>
   10280:	1009883a 	mov	r4,r2
   10284:	0013b500 	call	13b50 <usleep>
}
   10288:	0001883a 	nop
   1028c:	e037883a 	mov	sp,fp
   10290:	dfc00117 	ldw	ra,4(sp)
   10294:	df000017 	ldw	fp,0(sp)
   10298:	dec00204 	addi	sp,sp,8
   1029c:	f800283a 	ret

000102a0 <main>:

int main()
{
   102a0:	defffd04 	addi	sp,sp,-12
   102a4:	dfc00215 	stw	ra,8(sp)
   102a8:	df000115 	stw	fp,4(sp)
   102ac:	df000104 	addi	fp,sp,4
  printf("Hello from Nios II!\n");
   102b0:	01000074 	movhi	r4,1
   102b4:	21163804 	addi	r4,r4,22752
   102b8:	00103f00 	call	103f0 <puts>
  uint8_t out = 0;
   102bc:	e03fffc5 	stb	zero,-1(fp)
  static volatile uint8_t invert_me = 1;

  while(1){
  	  out = IORD_ALTERA_AVALON_PIO_DATA(ESC_EEPDONE_INPUT_BASE);
   102c0:	008000b4 	movhi	r2,2
   102c4:	10840c37 	ldwio	r2,4144(r2)
   102c8:	e0bfffc5 	stb	r2,-1(fp)
  	  IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, invert_me);
   102cc:	d0a00003 	ldbu	r2,-32768(gp)
   102d0:	10c03fcc 	andi	r3,r2,255
   102d4:	008000b4 	movhi	r2,2
   102d8:	10c40835 	stwio	r3,4128(r2)
  	  delay_ms(1000);
   102dc:	0100fa04 	movi	r4,1000
   102e0:	00102600 	call	10260 <delay_ms>
  	  invert_me = ~invert_me;
   102e4:	d0a00003 	ldbu	r2,-32768(gp)
   102e8:	0084303a 	nor	r2,zero,r2
   102ec:	d0a00005 	stb	r2,-32768(gp)
  	  out = IORD_ALTERA_AVALON_PIO_DATA(ESC_EEPDONE_INPUT_BASE);
   102f0:	0001883a 	nop
   102f4:	003ff206 	br	102c0 <main+0x20>

000102f8 <__mulsi3>:
   102f8:	0005883a 	mov	r2,zero
   102fc:	20000726 	beq	r4,zero,1031c <__mulsi3+0x24>
   10300:	20c0004c 	andi	r3,r4,1
   10304:	2008d07a 	srli	r4,r4,1
   10308:	18000126 	beq	r3,zero,10310 <__mulsi3+0x18>
   1030c:	1145883a 	add	r2,r2,r5
   10310:	294b883a 	add	r5,r5,r5
   10314:	203ffa1e 	bne	r4,zero,10300 <__mulsi3+0x8>
   10318:	f800283a 	ret
   1031c:	f800283a 	ret

00010320 <_puts_r>:
   10320:	defff504 	addi	sp,sp,-44
   10324:	dc000815 	stw	r16,32(sp)
   10328:	2021883a 	mov	r16,r4
   1032c:	2809883a 	mov	r4,r5
   10330:	dc400915 	stw	r17,36(sp)
   10334:	dfc00a15 	stw	ra,40(sp)
   10338:	2823883a 	mov	r17,r5
   1033c:	00104000 	call	10400 <strlen>
   10340:	11000044 	addi	r4,r2,1
   10344:	d8800515 	stw	r2,20(sp)
   10348:	00800044 	movi	r2,1
   1034c:	00c00074 	movhi	r3,1
   10350:	d8800715 	stw	r2,28(sp)
   10354:	d8800404 	addi	r2,sp,16
   10358:	18d63d04 	addi	r3,r3,22772
   1035c:	d8800115 	stw	r2,4(sp)
   10360:	00800084 	movi	r2,2
   10364:	dc400415 	stw	r17,16(sp)
   10368:	d8c00615 	stw	r3,24(sp)
   1036c:	d9000315 	stw	r4,12(sp)
   10370:	d8800215 	stw	r2,8(sp)
   10374:	81400217 	ldw	r5,8(r16)
   10378:	80000226 	beq	r16,zero,10384 <_puts_r+0x64>
   1037c:	80800d17 	ldw	r2,52(r16)
   10380:	10001426 	beq	r2,zero,103d4 <_puts_r+0xb4>
   10384:	2880030b 	ldhu	r2,12(r5)
   10388:	10c8000c 	andi	r3,r2,8192
   1038c:	1800061e 	bne	r3,zero,103a8 <_puts_r+0x88>
   10390:	28c01917 	ldw	r3,100(r5)
   10394:	0137ffc4 	movi	r4,-8193
   10398:	10880014 	ori	r2,r2,8192
   1039c:	1906703a 	and	r3,r3,r4
   103a0:	2880030d 	sth	r2,12(r5)
   103a4:	28c01915 	stw	r3,100(r5)
   103a8:	d9800104 	addi	r6,sp,4
   103ac:	8009883a 	mov	r4,r16
   103b0:	00108280 	call	10828 <__sfvwrite_r>
   103b4:	1007883a 	mov	r3,r2
   103b8:	00800284 	movi	r2,10
   103bc:	18000a1e 	bne	r3,zero,103e8 <_puts_r+0xc8>
   103c0:	dfc00a17 	ldw	ra,40(sp)
   103c4:	dc400917 	ldw	r17,36(sp)
   103c8:	dc000817 	ldw	r16,32(sp)
   103cc:	dec00b04 	addi	sp,sp,44
   103d0:	f800283a 	ret
   103d4:	8009883a 	mov	r4,r16
   103d8:	d9400015 	stw	r5,0(sp)
   103dc:	00107c80 	call	107c8 <__sinit>
   103e0:	d9400017 	ldw	r5,0(sp)
   103e4:	003fe706 	br	10384 <_puts_r+0x64>
   103e8:	00bfffc4 	movi	r2,-1
   103ec:	003ff406 	br	103c0 <_puts_r+0xa0>

000103f0 <puts>:
   103f0:	00800074 	movhi	r2,1
   103f4:	200b883a 	mov	r5,r4
   103f8:	111c1617 	ldw	r4,28760(r2)
   103fc:	00103201 	jmpi	10320 <_puts_r>

00010400 <strlen>:
   10400:	208000cc 	andi	r2,r4,3
   10404:	10000926 	beq	r2,zero,1042c <strlen+0x2c>
   10408:	2005883a 	mov	r2,r4
   1040c:	00000306 	br	1041c <strlen+0x1c>
   10410:	10800044 	addi	r2,r2,1
   10414:	10c000cc 	andi	r3,r2,3
   10418:	18000526 	beq	r3,zero,10430 <strlen+0x30>
   1041c:	10c00007 	ldb	r3,0(r2)
   10420:	183ffb1e 	bne	r3,zero,10410 <strlen+0x10>
   10424:	1105c83a 	sub	r2,r2,r4
   10428:	f800283a 	ret
   1042c:	2005883a 	mov	r2,r4
   10430:	11400017 	ldw	r5,0(r2)
   10434:	01ffbff4 	movhi	r7,65279
   10438:	39ffbfc4 	addi	r7,r7,-257
   1043c:	29c7883a 	add	r3,r5,r7
   10440:	01a02074 	movhi	r6,32897
   10444:	014a303a 	nor	r5,zero,r5
   10448:	1946703a 	and	r3,r3,r5
   1044c:	31a02004 	addi	r6,r6,-32640
   10450:	1986703a 	and	r3,r3,r6
   10454:	1800071e 	bne	r3,zero,10474 <strlen+0x74>
   10458:	11400117 	ldw	r5,4(r2)
   1045c:	10800104 	addi	r2,r2,4
   10460:	29c7883a 	add	r3,r5,r7
   10464:	014a303a 	nor	r5,zero,r5
   10468:	1946703a 	and	r3,r3,r5
   1046c:	1986703a 	and	r3,r3,r6
   10470:	183ff926 	beq	r3,zero,10458 <strlen+0x58>
   10474:	10c00007 	ldb	r3,0(r2)
   10478:	183fea26 	beq	r3,zero,10424 <strlen+0x24>
   1047c:	10c00047 	ldb	r3,1(r2)
   10480:	10800044 	addi	r2,r2,1
   10484:	183fe726 	beq	r3,zero,10424 <strlen+0x24>
   10488:	10c00047 	ldb	r3,1(r2)
   1048c:	10800044 	addi	r2,r2,1
   10490:	183ffa1e 	bne	r3,zero,1047c <strlen+0x7c>
   10494:	003fe306 	br	10424 <strlen+0x24>

00010498 <__fp_lock>:
   10498:	0005883a 	mov	r2,zero
   1049c:	f800283a 	ret

000104a0 <stdio_exit_handler>:
   104a0:	01800074 	movhi	r6,1
   104a4:	01400074 	movhi	r5,1
   104a8:	01000074 	movhi	r4,1
   104ac:	31968e04 	addi	r6,r6,23096
   104b0:	294a2d04 	addi	r5,r5,10420
   104b4:	21164704 	addi	r4,r4,22812
   104b8:	0010cc81 	jmpi	10cc8 <_fwalk_sglue>

000104bc <cleanup_stdio>:
   104bc:	21400117 	ldw	r5,4(r4)
   104c0:	defffe04 	addi	sp,sp,-8
   104c4:	008000b4 	movhi	r2,2
   104c8:	dc000015 	stw	r16,0(sp)
   104cc:	dfc00115 	stw	ra,4(sp)
   104d0:	10a20d04 	addi	r2,r2,-30668
   104d4:	2021883a 	mov	r16,r4
   104d8:	28800126 	beq	r5,r2,104e0 <cleanup_stdio+0x24>
   104dc:	00128b40 	call	128b4 <_fclose_r>
   104e0:	81400217 	ldw	r5,8(r16)
   104e4:	008000b4 	movhi	r2,2
   104e8:	10a22704 	addi	r2,r2,-30564
   104ec:	28800226 	beq	r5,r2,104f8 <cleanup_stdio+0x3c>
   104f0:	8009883a 	mov	r4,r16
   104f4:	00128b40 	call	128b4 <_fclose_r>
   104f8:	81400317 	ldw	r5,12(r16)
   104fc:	008000b4 	movhi	r2,2
   10500:	10a24104 	addi	r2,r2,-30460
   10504:	28800526 	beq	r5,r2,1051c <cleanup_stdio+0x60>
   10508:	8009883a 	mov	r4,r16
   1050c:	dfc00117 	ldw	ra,4(sp)
   10510:	dc000017 	ldw	r16,0(sp)
   10514:	dec00204 	addi	sp,sp,8
   10518:	00128b41 	jmpi	128b4 <_fclose_r>
   1051c:	dfc00117 	ldw	ra,4(sp)
   10520:	dc000017 	ldw	r16,0(sp)
   10524:	dec00204 	addi	sp,sp,8
   10528:	f800283a 	ret

0001052c <__fp_unlock>:
   1052c:	0005883a 	mov	r2,zero
   10530:	f800283a 	ret

00010534 <global_stdio_init.part.0>:
   10534:	00800074 	movhi	r2,1
   10538:	defffa04 	addi	sp,sp,-24
   1053c:	00c000b4 	movhi	r3,2
   10540:	10812804 	addi	r2,r2,1184
   10544:	dc000015 	stw	r16,0(sp)
   10548:	18a20015 	stw	r2,-30720(r3)
   1054c:	040000b4 	movhi	r16,2
   10550:	008000b4 	movhi	r2,2
   10554:	010000b4 	movhi	r4,2
   10558:	84220d04 	addi	r16,r16,-30668
   1055c:	dfc00515 	stw	ra,20(sp)
   10560:	dd000415 	stw	r20,16(sp)
   10564:	dcc00315 	stw	r19,12(sp)
   10568:	dc800215 	stw	r18,8(sp)
   1056c:	dc400115 	stw	r17,4(sp)
   10570:	01800204 	movi	r6,8
   10574:	000b883a 	mov	r5,zero
   10578:	21222404 	addi	r4,r4,-30576
   1057c:	10220d15 	stw	zero,-30668(r2)
   10580:	00800104 	movi	r2,4
   10584:	80000115 	stw	zero,4(r16)
   10588:	80000215 	stw	zero,8(r16)
   1058c:	80001915 	stw	zero,100(r16)
   10590:	80800315 	stw	r2,12(r16)
   10594:	80000415 	stw	zero,16(r16)
   10598:	80000515 	stw	zero,20(r16)
   1059c:	80000615 	stw	zero,24(r16)
   105a0:	00113180 	call	11318 <memset>
   105a4:	05000074 	movhi	r20,1
   105a8:	04c00074 	movhi	r19,1
   105ac:	04800074 	movhi	r18,1
   105b0:	04400074 	movhi	r17,1
   105b4:	00800074 	movhi	r2,1
   105b8:	010000b4 	movhi	r4,2
   105bc:	a5035c04 	addi	r20,r20,3440
   105c0:	9cc37304 	addi	r19,r19,3532
   105c4:	94839304 	addi	r18,r18,3660
   105c8:	8c43aa04 	addi	r17,r17,3752
   105cc:	10800284 	addi	r2,r2,10
   105d0:	01800204 	movi	r6,8
   105d4:	000b883a 	mov	r5,zero
   105d8:	21223e04 	addi	r4,r4,-30472
   105dc:	84000715 	stw	r16,28(r16)
   105e0:	85000815 	stw	r20,32(r16)
   105e4:	84c00915 	stw	r19,36(r16)
   105e8:	84800a15 	stw	r18,40(r16)
   105ec:	84400b15 	stw	r17,44(r16)
   105f0:	80001a15 	stw	zero,104(r16)
   105f4:	80001b15 	stw	zero,108(r16)
   105f8:	80001c15 	stw	zero,112(r16)
   105fc:	80003315 	stw	zero,204(r16)
   10600:	80801d15 	stw	r2,116(r16)
   10604:	80001e15 	stw	zero,120(r16)
   10608:	80001f15 	stw	zero,124(r16)
   1060c:	80002015 	stw	zero,128(r16)
   10610:	00113180 	call	11318 <memset>
   10614:	010000b4 	movhi	r4,2
   10618:	00c000b4 	movhi	r3,2
   1061c:	008000b4 	movhi	r2,2
   10620:	18e22704 	addi	r3,r3,-30564
   10624:	10800484 	addi	r2,r2,18
   10628:	01800204 	movi	r6,8
   1062c:	000b883a 	mov	r5,zero
   10630:	21225804 	addi	r4,r4,-30368
   10634:	80c02115 	stw	r3,132(r16)
   10638:	85002215 	stw	r20,136(r16)
   1063c:	84c02315 	stw	r19,140(r16)
   10640:	84802415 	stw	r18,144(r16)
   10644:	84402515 	stw	r17,148(r16)
   10648:	80003415 	stw	zero,208(r16)
   1064c:	80003515 	stw	zero,212(r16)
   10650:	80003615 	stw	zero,216(r16)
   10654:	80004d15 	stw	zero,308(r16)
   10658:	80803715 	stw	r2,220(r16)
   1065c:	80003815 	stw	zero,224(r16)
   10660:	80003915 	stw	zero,228(r16)
   10664:	80003a15 	stw	zero,232(r16)
   10668:	00113180 	call	11318 <memset>
   1066c:	008000b4 	movhi	r2,2
   10670:	10a24104 	addi	r2,r2,-30460
   10674:	80803b15 	stw	r2,236(r16)
   10678:	85003c15 	stw	r20,240(r16)
   1067c:	84c03d15 	stw	r19,244(r16)
   10680:	84803e15 	stw	r18,248(r16)
   10684:	84403f15 	stw	r17,252(r16)
   10688:	dfc00517 	ldw	ra,20(sp)
   1068c:	dd000417 	ldw	r20,16(sp)
   10690:	dcc00317 	ldw	r19,12(sp)
   10694:	dc800217 	ldw	r18,8(sp)
   10698:	dc400117 	ldw	r17,4(sp)
   1069c:	dc000017 	ldw	r16,0(sp)
   106a0:	dec00604 	addi	sp,sp,24
   106a4:	f800283a 	ret

000106a8 <__sfp>:
   106a8:	008000b4 	movhi	r2,2
   106ac:	10a20017 	ldw	r2,-30720(r2)
   106b0:	defffc04 	addi	sp,sp,-16
   106b4:	dc800215 	stw	r18,8(sp)
   106b8:	dfc00315 	stw	ra,12(sp)
   106bc:	dc400115 	stw	r17,4(sp)
   106c0:	dc000015 	stw	r16,0(sp)
   106c4:	2025883a 	mov	r18,r4
   106c8:	10003926 	beq	r2,zero,107b0 <__sfp+0x108>
   106cc:	04400074 	movhi	r17,1
   106d0:	8c568e04 	addi	r17,r17,23096
   106d4:	88800117 	ldw	r2,4(r17)
   106d8:	8c000217 	ldw	r16,8(r17)
   106dc:	10bfffc4 	addi	r2,r2,-1
   106e0:	1000030e 	bge	r2,zero,106f0 <__sfp+0x48>
   106e4:	00001f06 	br	10764 <__sfp+0xbc>
   106e8:	84001a04 	addi	r16,r16,104
   106ec:	28001d26 	beq	r5,zero,10764 <__sfp+0xbc>
   106f0:	80c0030f 	ldh	r3,12(r16)
   106f4:	10bfffc4 	addi	r2,r2,-1
   106f8:	117fffd8 	cmpnei	r5,r2,-1
   106fc:	183ffa1e 	bne	r3,zero,106e8 <__sfp+0x40>
   10700:	00bffff4 	movhi	r2,65535
   10704:	10800044 	addi	r2,r2,1
   10708:	80800315 	stw	r2,12(r16)
   1070c:	80001915 	stw	zero,100(r16)
   10710:	80000015 	stw	zero,0(r16)
   10714:	80000215 	stw	zero,8(r16)
   10718:	80000115 	stw	zero,4(r16)
   1071c:	80000415 	stw	zero,16(r16)
   10720:	80000515 	stw	zero,20(r16)
   10724:	80000615 	stw	zero,24(r16)
   10728:	01800204 	movi	r6,8
   1072c:	000b883a 	mov	r5,zero
   10730:	81001704 	addi	r4,r16,92
   10734:	00113180 	call	11318 <memset>
   10738:	80000c15 	stw	zero,48(r16)
   1073c:	80000d15 	stw	zero,52(r16)
   10740:	80001115 	stw	zero,68(r16)
   10744:	80001215 	stw	zero,72(r16)
   10748:	8005883a 	mov	r2,r16
   1074c:	dfc00317 	ldw	ra,12(sp)
   10750:	dc800217 	ldw	r18,8(sp)
   10754:	dc400117 	ldw	r17,4(sp)
   10758:	dc000017 	ldw	r16,0(sp)
   1075c:	dec00404 	addi	sp,sp,16
   10760:	f800283a 	ret
   10764:	8c000017 	ldw	r16,0(r17)
   10768:	80000226 	beq	r16,zero,10774 <__sfp+0xcc>
   1076c:	8023883a 	mov	r17,r16
   10770:	003fd806 	br	106d4 <__sfp+0x2c>
   10774:	01406b04 	movi	r5,428
   10778:	9009883a 	mov	r4,r18
   1077c:	0011b000 	call	11b00 <_malloc_r>
   10780:	1021883a 	mov	r16,r2
   10784:	10000c26 	beq	r2,zero,107b8 <__sfp+0x110>
   10788:	10000015 	stw	zero,0(r2)
   1078c:	11000304 	addi	r4,r2,12
   10790:	00800104 	movi	r2,4
   10794:	80800115 	stw	r2,4(r16)
   10798:	81000215 	stw	r4,8(r16)
   1079c:	01806804 	movi	r6,416
   107a0:	000b883a 	mov	r5,zero
   107a4:	00113180 	call	11318 <memset>
   107a8:	8c000015 	stw	r16,0(r17)
   107ac:	003fef06 	br	1076c <__sfp+0xc4>
   107b0:	00105340 	call	10534 <global_stdio_init.part.0>
   107b4:	003fc506 	br	106cc <__sfp+0x24>
   107b8:	88000015 	stw	zero,0(r17)
   107bc:	00800304 	movi	r2,12
   107c0:	90800015 	stw	r2,0(r18)
   107c4:	003fe006 	br	10748 <__sfp+0xa0>

000107c8 <__sinit>:
   107c8:	20800d17 	ldw	r2,52(r4)
   107cc:	10000126 	beq	r2,zero,107d4 <__sinit+0xc>
   107d0:	f800283a 	ret
   107d4:	00c000b4 	movhi	r3,2
   107d8:	00800074 	movhi	r2,1
   107dc:	18e20017 	ldw	r3,-30720(r3)
   107e0:	10812f04 	addi	r2,r2,1212
   107e4:	20800d15 	stw	r2,52(r4)
   107e8:	183ff91e 	bne	r3,zero,107d0 <__sinit+0x8>
   107ec:	00105341 	jmpi	10534 <global_stdio_init.part.0>

000107f0 <__sfp_lock_acquire>:
   107f0:	f800283a 	ret

000107f4 <__sfp_lock_release>:
   107f4:	f800283a 	ret

000107f8 <__fp_lock_all>:
   107f8:	01800074 	movhi	r6,1
   107fc:	01400074 	movhi	r5,1
   10800:	31968e04 	addi	r6,r6,23096
   10804:	29412604 	addi	r5,r5,1176
   10808:	0009883a 	mov	r4,zero
   1080c:	0010cc81 	jmpi	10cc8 <_fwalk_sglue>

00010810 <__fp_unlock_all>:
   10810:	01800074 	movhi	r6,1
   10814:	01400074 	movhi	r5,1
   10818:	31968e04 	addi	r6,r6,23096
   1081c:	29414b04 	addi	r5,r5,1324
   10820:	0009883a 	mov	r4,zero
   10824:	0010cc81 	jmpi	10cc8 <_fwalk_sglue>

00010828 <__sfvwrite_r>:
   10828:	30800217 	ldw	r2,8(r6)
   1082c:	1000c426 	beq	r2,zero,10b40 <__sfvwrite_r+0x318>
   10830:	2a80030b 	ldhu	r10,12(r5)
   10834:	defff504 	addi	sp,sp,-44
   10838:	df000915 	stw	fp,36(sp)
   1083c:	dcc00415 	stw	r19,16(sp)
   10840:	dc000115 	stw	r16,4(sp)
   10844:	dfc00a15 	stw	ra,40(sp)
   10848:	ddc00815 	stw	r23,32(sp)
   1084c:	dd800715 	stw	r22,28(sp)
   10850:	dd400615 	stw	r21,24(sp)
   10854:	dd000515 	stw	r20,20(sp)
   10858:	dc800315 	stw	r18,12(sp)
   1085c:	dc400215 	stw	r17,8(sp)
   10860:	5080020c 	andi	r2,r10,8
   10864:	3039883a 	mov	fp,r6
   10868:	2027883a 	mov	r19,r4
   1086c:	2821883a 	mov	r16,r5
   10870:	10002226 	beq	r2,zero,108fc <__sfvwrite_r+0xd4>
   10874:	28800417 	ldw	r2,16(r5)
   10878:	10002026 	beq	r2,zero,108fc <__sfvwrite_r+0xd4>
   1087c:	5080008c 	andi	r2,r10,2
   10880:	e4400017 	ldw	r17,0(fp)
   10884:	10002526 	beq	r2,zero,1091c <__sfvwrite_r+0xf4>
   10888:	80800917 	ldw	r2,36(r16)
   1088c:	81400717 	ldw	r5,28(r16)
   10890:	05600034 	movhi	r21,32768
   10894:	0029883a 	mov	r20,zero
   10898:	0025883a 	mov	r18,zero
   1089c:	ad7f0004 	addi	r21,r21,-1024
   108a0:	a00d883a 	mov	r6,r20
   108a4:	9809883a 	mov	r4,r19
   108a8:	90001026 	beq	r18,zero,108ec <__sfvwrite_r+0xc4>
   108ac:	900f883a 	mov	r7,r18
   108b0:	ac80012e 	bgeu	r21,r18,108b8 <__sfvwrite_r+0x90>
   108b4:	a80f883a 	mov	r7,r21
   108b8:	103ee83a 	callr	r2
   108bc:	00809b0e 	bge	zero,r2,10b2c <__sfvwrite_r+0x304>
   108c0:	e0c00217 	ldw	r3,8(fp)
   108c4:	a0a9883a 	add	r20,r20,r2
   108c8:	90a5c83a 	sub	r18,r18,r2
   108cc:	1885c83a 	sub	r2,r3,r2
   108d0:	e0800215 	stw	r2,8(fp)
   108d4:	10008426 	beq	r2,zero,10ae8 <__sfvwrite_r+0x2c0>
   108d8:	80800917 	ldw	r2,36(r16)
   108dc:	81400717 	ldw	r5,28(r16)
   108e0:	a00d883a 	mov	r6,r20
   108e4:	9809883a 	mov	r4,r19
   108e8:	903ff01e 	bne	r18,zero,108ac <__sfvwrite_r+0x84>
   108ec:	8d000017 	ldw	r20,0(r17)
   108f0:	8c800117 	ldw	r18,4(r17)
   108f4:	8c400204 	addi	r17,r17,8
   108f8:	003fe906 	br	108a0 <__sfvwrite_r+0x78>
   108fc:	800b883a 	mov	r5,r16
   10900:	9809883a 	mov	r4,r19
   10904:	0010eb00 	call	10eb0 <__swsetup_r>
   10908:	10008b1e 	bne	r2,zero,10b38 <__sfvwrite_r+0x310>
   1090c:	8280030b 	ldhu	r10,12(r16)
   10910:	e4400017 	ldw	r17,0(fp)
   10914:	5080008c 	andi	r2,r10,2
   10918:	103fdb1e 	bne	r2,zero,10888 <__sfvwrite_r+0x60>
   1091c:	5080004c 	andi	r2,r10,1
   10920:	1000501e 	bne	r2,zero,10a64 <__sfvwrite_r+0x23c>
   10924:	00a00034 	movhi	r2,32768
   10928:	81c00017 	ldw	r7,0(r16)
   1092c:	80c00217 	ldw	r3,8(r16)
   10930:	10bfffc4 	addi	r2,r2,-1
   10934:	002d883a 	mov	r22,zero
   10938:	0025883a 	mov	r18,zero
   1093c:	d8800015 	stw	r2,0(sp)
   10940:	3809883a 	mov	r4,r7
   10944:	1829883a 	mov	r20,r3
   10948:	90004226 	beq	r18,zero,10a54 <__sfvwrite_r+0x22c>
   1094c:	5080800c 	andi	r2,r10,512
   10950:	10009526 	beq	r2,zero,10ba8 <__sfvwrite_r+0x380>
   10954:	182b883a 	mov	r21,r3
   10958:	90c0ba36 	bltu	r18,r3,10c44 <__sfvwrite_r+0x41c>
   1095c:	5081200c 	andi	r2,r10,1152
   10960:	10002626 	beq	r2,zero,109fc <__sfvwrite_r+0x1d4>
   10964:	80c00517 	ldw	r3,20(r16)
   10968:	81400417 	ldw	r5,16(r16)
   1096c:	18c5883a 	add	r2,r3,r3
   10970:	10c5883a 	add	r2,r2,r3
   10974:	1006d7fa 	srli	r3,r2,31
   10978:	396bc83a 	sub	r21,r7,r5
   1097c:	a9000044 	addi	r4,r21,1
   10980:	1887883a 	add	r3,r3,r2
   10984:	1829d07a 	srai	r20,r3,1
   10988:	2485883a 	add	r2,r4,r18
   1098c:	a00d883a 	mov	r6,r20
   10990:	a080022e 	bgeu	r20,r2,1099c <__sfvwrite_r+0x174>
   10994:	1029883a 	mov	r20,r2
   10998:	100d883a 	mov	r6,r2
   1099c:	5281000c 	andi	r10,r10,1024
   109a0:	5000b626 	beq	r10,zero,10c7c <__sfvwrite_r+0x454>
   109a4:	300b883a 	mov	r5,r6
   109a8:	9809883a 	mov	r4,r19
   109ac:	0011b000 	call	11b00 <_malloc_r>
   109b0:	102f883a 	mov	r23,r2
   109b4:	1000c026 	beq	r2,zero,10cb8 <__sfvwrite_r+0x490>
   109b8:	81400417 	ldw	r5,16(r16)
   109bc:	a80d883a 	mov	r6,r21
   109c0:	1009883a 	mov	r4,r2
   109c4:	00110f00 	call	110f0 <memcpy>
   109c8:	8080030b 	ldhu	r2,12(r16)
   109cc:	00fedfc4 	movi	r3,-1153
   109d0:	10c4703a 	and	r2,r2,r3
   109d4:	10802014 	ori	r2,r2,128
   109d8:	8080030d 	sth	r2,12(r16)
   109dc:	a54fc83a 	sub	r7,r20,r21
   109e0:	bd49883a 	add	r4,r23,r21
   109e4:	85000515 	stw	r20,20(r16)
   109e8:	85c00415 	stw	r23,16(r16)
   109ec:	81000015 	stw	r4,0(r16)
   109f0:	9029883a 	mov	r20,r18
   109f4:	81c00215 	stw	r7,8(r16)
   109f8:	902b883a 	mov	r21,r18
   109fc:	a80d883a 	mov	r6,r21
   10a00:	b00b883a 	mov	r5,r22
   10a04:	00111f00 	call	111f0 <memmove>
   10a08:	80c00217 	ldw	r3,8(r16)
   10a0c:	81c00017 	ldw	r7,0(r16)
   10a10:	902f883a 	mov	r23,r18
   10a14:	1d07c83a 	sub	r3,r3,r20
   10a18:	3d4d883a 	add	r6,r7,r21
   10a1c:	80c00215 	stw	r3,8(r16)
   10a20:	81800015 	stw	r6,0(r16)
   10a24:	0025883a 	mov	r18,zero
   10a28:	e0800217 	ldw	r2,8(fp)
   10a2c:	b5ed883a 	add	r22,r22,r23
   10a30:	15c5c83a 	sub	r2,r2,r23
   10a34:	e0800215 	stw	r2,8(fp)
   10a38:	10002b26 	beq	r2,zero,10ae8 <__sfvwrite_r+0x2c0>
   10a3c:	81c00017 	ldw	r7,0(r16)
   10a40:	80c00217 	ldw	r3,8(r16)
   10a44:	8280030b 	ldhu	r10,12(r16)
   10a48:	3809883a 	mov	r4,r7
   10a4c:	1829883a 	mov	r20,r3
   10a50:	903fbe1e 	bne	r18,zero,1094c <__sfvwrite_r+0x124>
   10a54:	8d800017 	ldw	r22,0(r17)
   10a58:	8c800117 	ldw	r18,4(r17)
   10a5c:	8c400204 	addi	r17,r17,8
   10a60:	003fb706 	br	10940 <__sfvwrite_r+0x118>
   10a64:	002f883a 	mov	r23,zero
   10a68:	0005883a 	mov	r2,zero
   10a6c:	002d883a 	mov	r22,zero
   10a70:	002b883a 	mov	r21,zero
   10a74:	a8003426 	beq	r21,zero,10b48 <__sfvwrite_r+0x320>
   10a78:	10003826 	beq	r2,zero,10b5c <__sfvwrite_r+0x334>
   10a7c:	b829883a 	mov	r20,r23
   10a80:	ad00012e 	bgeu	r21,r20,10a88 <__sfvwrite_r+0x260>
   10a84:	a829883a 	mov	r20,r21
   10a88:	81000017 	ldw	r4,0(r16)
   10a8c:	80800417 	ldw	r2,16(r16)
   10a90:	84800217 	ldw	r18,8(r16)
   10a94:	81c00517 	ldw	r7,20(r16)
   10a98:	1100022e 	bgeu	r2,r4,10aa4 <__sfvwrite_r+0x27c>
   10a9c:	91e5883a 	add	r18,r18,r7
   10aa0:	95003616 	blt	r18,r20,10b7c <__sfvwrite_r+0x354>
   10aa4:	a1c06a16 	blt	r20,r7,10c50 <__sfvwrite_r+0x428>
   10aa8:	80800917 	ldw	r2,36(r16)
   10aac:	81400717 	ldw	r5,28(r16)
   10ab0:	b00d883a 	mov	r6,r22
   10ab4:	9809883a 	mov	r4,r19
   10ab8:	103ee83a 	callr	r2
   10abc:	1025883a 	mov	r18,r2
   10ac0:	00801a0e 	bge	zero,r2,10b2c <__sfvwrite_r+0x304>
   10ac4:	bcafc83a 	sub	r23,r23,r18
   10ac8:	b8001426 	beq	r23,zero,10b1c <__sfvwrite_r+0x2f4>
   10acc:	00800044 	movi	r2,1
   10ad0:	e0c00217 	ldw	r3,8(fp)
   10ad4:	b4ad883a 	add	r22,r22,r18
   10ad8:	acabc83a 	sub	r21,r21,r18
   10adc:	1c87c83a 	sub	r3,r3,r18
   10ae0:	e0c00215 	stw	r3,8(fp)
   10ae4:	183fe31e 	bne	r3,zero,10a74 <__sfvwrite_r+0x24c>
   10ae8:	0005883a 	mov	r2,zero
   10aec:	dfc00a17 	ldw	ra,40(sp)
   10af0:	df000917 	ldw	fp,36(sp)
   10af4:	ddc00817 	ldw	r23,32(sp)
   10af8:	dd800717 	ldw	r22,28(sp)
   10afc:	dd400617 	ldw	r21,24(sp)
   10b00:	dd000517 	ldw	r20,20(sp)
   10b04:	dcc00417 	ldw	r19,16(sp)
   10b08:	dc800317 	ldw	r18,12(sp)
   10b0c:	dc400217 	ldw	r17,8(sp)
   10b10:	dc000117 	ldw	r16,4(sp)
   10b14:	dec00b04 	addi	sp,sp,44
   10b18:	f800283a 	ret
   10b1c:	800b883a 	mov	r5,r16
   10b20:	9809883a 	mov	r4,r19
   10b24:	0012bbc0 	call	12bbc <_fflush_r>
   10b28:	103fe926 	beq	r2,zero,10ad0 <__sfvwrite_r+0x2a8>
   10b2c:	8080030b 	ldhu	r2,12(r16)
   10b30:	10801014 	ori	r2,r2,64
   10b34:	8080030d 	sth	r2,12(r16)
   10b38:	00bfffc4 	movi	r2,-1
   10b3c:	003feb06 	br	10aec <__sfvwrite_r+0x2c4>
   10b40:	0005883a 	mov	r2,zero
   10b44:	f800283a 	ret
   10b48:	8d400117 	ldw	r21,4(r17)
   10b4c:	8805883a 	mov	r2,r17
   10b50:	8c400204 	addi	r17,r17,8
   10b54:	a83ffc26 	beq	r21,zero,10b48 <__sfvwrite_r+0x320>
   10b58:	15800017 	ldw	r22,0(r2)
   10b5c:	a80d883a 	mov	r6,r21
   10b60:	01400284 	movi	r5,10
   10b64:	b009883a 	mov	r4,r22
   10b68:	0010ff40 	call	10ff4 <memchr>
   10b6c:	10004f26 	beq	r2,zero,10cac <__sfvwrite_r+0x484>
   10b70:	10800044 	addi	r2,r2,1
   10b74:	15afc83a 	sub	r23,r2,r22
   10b78:	003fc006 	br	10a7c <__sfvwrite_r+0x254>
   10b7c:	b00b883a 	mov	r5,r22
   10b80:	900d883a 	mov	r6,r18
   10b84:	00111f00 	call	111f0 <memmove>
   10b88:	80800017 	ldw	r2,0(r16)
   10b8c:	800b883a 	mov	r5,r16
   10b90:	9809883a 	mov	r4,r19
   10b94:	1485883a 	add	r2,r2,r18
   10b98:	80800015 	stw	r2,0(r16)
   10b9c:	0012bbc0 	call	12bbc <_fflush_r>
   10ba0:	103fc826 	beq	r2,zero,10ac4 <__sfvwrite_r+0x29c>
   10ba4:	003fe106 	br	10b2c <__sfvwrite_r+0x304>
   10ba8:	80800417 	ldw	r2,16(r16)
   10bac:	11c01236 	bltu	r2,r7,10bf8 <__sfvwrite_r+0x3d0>
   10bb0:	81400517 	ldw	r5,20(r16)
   10bb4:	91401036 	bltu	r18,r5,10bf8 <__sfvwrite_r+0x3d0>
   10bb8:	00a00034 	movhi	r2,32768
   10bbc:	902f883a 	mov	r23,r18
   10bc0:	90800136 	bltu	r18,r2,10bc8 <__sfvwrite_r+0x3a0>
   10bc4:	ddc00017 	ldw	r23,0(sp)
   10bc8:	b809883a 	mov	r4,r23
   10bcc:	00131800 	call	13180 <__modsi3>
   10bd0:	80c00917 	ldw	r3,36(r16)
   10bd4:	81400717 	ldw	r5,28(r16)
   10bd8:	b88fc83a 	sub	r7,r23,r2
   10bdc:	b00d883a 	mov	r6,r22
   10be0:	9809883a 	mov	r4,r19
   10be4:	183ee83a 	callr	r3
   10be8:	102f883a 	mov	r23,r2
   10bec:	00bfcf0e 	bge	zero,r2,10b2c <__sfvwrite_r+0x304>
   10bf0:	95e5c83a 	sub	r18,r18,r23
   10bf4:	003f8c06 	br	10a28 <__sfvwrite_r+0x200>
   10bf8:	182f883a 	mov	r23,r3
   10bfc:	90c0012e 	bgeu	r18,r3,10c04 <__sfvwrite_r+0x3dc>
   10c00:	902f883a 	mov	r23,r18
   10c04:	3809883a 	mov	r4,r7
   10c08:	b80d883a 	mov	r6,r23
   10c0c:	b00b883a 	mov	r5,r22
   10c10:	00111f00 	call	111f0 <memmove>
   10c14:	80c00217 	ldw	r3,8(r16)
   10c18:	81c00017 	ldw	r7,0(r16)
   10c1c:	1dc7c83a 	sub	r3,r3,r23
   10c20:	3dcf883a 	add	r7,r7,r23
   10c24:	80c00215 	stw	r3,8(r16)
   10c28:	81c00015 	stw	r7,0(r16)
   10c2c:	183ff01e 	bne	r3,zero,10bf0 <__sfvwrite_r+0x3c8>
   10c30:	800b883a 	mov	r5,r16
   10c34:	9809883a 	mov	r4,r19
   10c38:	0012bbc0 	call	12bbc <_fflush_r>
   10c3c:	103fec26 	beq	r2,zero,10bf0 <__sfvwrite_r+0x3c8>
   10c40:	003fba06 	br	10b2c <__sfvwrite_r+0x304>
   10c44:	9029883a 	mov	r20,r18
   10c48:	902b883a 	mov	r21,r18
   10c4c:	003f6b06 	br	109fc <__sfvwrite_r+0x1d4>
   10c50:	a00d883a 	mov	r6,r20
   10c54:	b00b883a 	mov	r5,r22
   10c58:	00111f00 	call	111f0 <memmove>
   10c5c:	80c00217 	ldw	r3,8(r16)
   10c60:	80800017 	ldw	r2,0(r16)
   10c64:	a025883a 	mov	r18,r20
   10c68:	1d07c83a 	sub	r3,r3,r20
   10c6c:	1505883a 	add	r2,r2,r20
   10c70:	80c00215 	stw	r3,8(r16)
   10c74:	80800015 	stw	r2,0(r16)
   10c78:	003f9206 	br	10ac4 <__sfvwrite_r+0x29c>
   10c7c:	9809883a 	mov	r4,r19
   10c80:	00122c80 	call	122c8 <_realloc_r>
   10c84:	102f883a 	mov	r23,r2
   10c88:	103f541e 	bne	r2,zero,109dc <__sfvwrite_r+0x1b4>
   10c8c:	81400417 	ldw	r5,16(r16)
   10c90:	9809883a 	mov	r4,r19
   10c94:	00117f80 	call	117f8 <_free_r>
   10c98:	8080030b 	ldhu	r2,12(r16)
   10c9c:	00c00304 	movi	r3,12
   10ca0:	98c00015 	stw	r3,0(r19)
   10ca4:	10bfdfcc 	andi	r2,r2,65407
   10ca8:	003fa106 	br	10b30 <__sfvwrite_r+0x308>
   10cac:	ad000044 	addi	r20,r21,1
   10cb0:	a02f883a 	mov	r23,r20
   10cb4:	003f7206 	br	10a80 <__sfvwrite_r+0x258>
   10cb8:	00c00304 	movi	r3,12
   10cbc:	8080030b 	ldhu	r2,12(r16)
   10cc0:	98c00015 	stw	r3,0(r19)
   10cc4:	003f9a06 	br	10b30 <__sfvwrite_r+0x308>

00010cc8 <_fwalk_sglue>:
   10cc8:	defff904 	addi	sp,sp,-28
   10ccc:	dd400515 	stw	r21,20(sp)
   10cd0:	dd000415 	stw	r20,16(sp)
   10cd4:	dcc00315 	stw	r19,12(sp)
   10cd8:	dc800215 	stw	r18,8(sp)
   10cdc:	dfc00615 	stw	ra,24(sp)
   10ce0:	dc400115 	stw	r17,4(sp)
   10ce4:	dc000015 	stw	r16,0(sp)
   10ce8:	2027883a 	mov	r19,r4
   10cec:	2829883a 	mov	r20,r5
   10cf0:	3025883a 	mov	r18,r6
   10cf4:	002b883a 	mov	r21,zero
   10cf8:	94400117 	ldw	r17,4(r18)
   10cfc:	94000217 	ldw	r16,8(r18)
   10d00:	8c7fffc4 	addi	r17,r17,-1
   10d04:	88000e16 	blt	r17,zero,10d40 <_fwalk_sglue+0x78>
   10d08:	8080030b 	ldhu	r2,12(r16)
   10d0c:	8c7fffc4 	addi	r17,r17,-1
   10d10:	108000b0 	cmpltui	r2,r2,2
   10d14:	1000071e 	bne	r2,zero,10d34 <_fwalk_sglue+0x6c>
   10d18:	8080038f 	ldh	r2,14(r16)
   10d1c:	800b883a 	mov	r5,r16
   10d20:	9809883a 	mov	r4,r19
   10d24:	10bfffe0 	cmpeqi	r2,r2,-1
   10d28:	1000021e 	bne	r2,zero,10d34 <_fwalk_sglue+0x6c>
   10d2c:	a03ee83a 	callr	r20
   10d30:	a8aab03a 	or	r21,r21,r2
   10d34:	88bfffd8 	cmpnei	r2,r17,-1
   10d38:	84001a04 	addi	r16,r16,104
   10d3c:	103ff21e 	bne	r2,zero,10d08 <_fwalk_sglue+0x40>
   10d40:	94800017 	ldw	r18,0(r18)
   10d44:	903fec1e 	bne	r18,zero,10cf8 <_fwalk_sglue+0x30>
   10d48:	a805883a 	mov	r2,r21
   10d4c:	dfc00617 	ldw	ra,24(sp)
   10d50:	dd400517 	ldw	r21,20(sp)
   10d54:	dd000417 	ldw	r20,16(sp)
   10d58:	dcc00317 	ldw	r19,12(sp)
   10d5c:	dc800217 	ldw	r18,8(sp)
   10d60:	dc400117 	ldw	r17,4(sp)
   10d64:	dc000017 	ldw	r16,0(sp)
   10d68:	dec00704 	addi	sp,sp,28
   10d6c:	f800283a 	ret

00010d70 <__sread>:
   10d70:	defffe04 	addi	sp,sp,-8
   10d74:	dc000015 	stw	r16,0(sp)
   10d78:	2821883a 	mov	r16,r5
   10d7c:	2940038f 	ldh	r5,14(r5)
   10d80:	dfc00115 	stw	ra,4(sp)
   10d84:	00115dc0 	call	115dc <_read_r>
   10d88:	10000716 	blt	r2,zero,10da8 <__sread+0x38>
   10d8c:	80c01417 	ldw	r3,80(r16)
   10d90:	1887883a 	add	r3,r3,r2
   10d94:	80c01415 	stw	r3,80(r16)
   10d98:	dfc00117 	ldw	ra,4(sp)
   10d9c:	dc000017 	ldw	r16,0(sp)
   10da0:	dec00204 	addi	sp,sp,8
   10da4:	f800283a 	ret
   10da8:	80c0030b 	ldhu	r3,12(r16)
   10dac:	18fbffcc 	andi	r3,r3,61439
   10db0:	80c0030d 	sth	r3,12(r16)
   10db4:	dfc00117 	ldw	ra,4(sp)
   10db8:	dc000017 	ldw	r16,0(sp)
   10dbc:	dec00204 	addi	sp,sp,8
   10dc0:	f800283a 	ret

00010dc4 <__seofread>:
   10dc4:	0005883a 	mov	r2,zero
   10dc8:	f800283a 	ret

00010dcc <__swrite>:
   10dcc:	2880030b 	ldhu	r2,12(r5)
   10dd0:	defffb04 	addi	sp,sp,-20
   10dd4:	dcc00315 	stw	r19,12(sp)
   10dd8:	dc800215 	stw	r18,8(sp)
   10ddc:	dc400115 	stw	r17,4(sp)
   10de0:	dc000015 	stw	r16,0(sp)
   10de4:	dfc00415 	stw	ra,16(sp)
   10de8:	10c0400c 	andi	r3,r2,256
   10dec:	2821883a 	mov	r16,r5
   10df0:	2023883a 	mov	r17,r4
   10df4:	3025883a 	mov	r18,r6
   10df8:	3827883a 	mov	r19,r7
   10dfc:	18000d1e 	bne	r3,zero,10e34 <__swrite+0x68>
   10e00:	8140038f 	ldh	r5,14(r16)
   10e04:	10bbffcc 	andi	r2,r2,61439
   10e08:	980f883a 	mov	r7,r19
   10e0c:	900d883a 	mov	r6,r18
   10e10:	8809883a 	mov	r4,r17
   10e14:	8080030d 	sth	r2,12(r16)
   10e18:	dfc00417 	ldw	ra,16(sp)
   10e1c:	dcc00317 	ldw	r19,12(sp)
   10e20:	dc800217 	ldw	r18,8(sp)
   10e24:	dc400117 	ldw	r17,4(sp)
   10e28:	dc000017 	ldw	r16,0(sp)
   10e2c:	dec00504 	addi	sp,sp,20
   10e30:	00116401 	jmpi	11640 <_write_r>
   10e34:	2940038f 	ldh	r5,14(r5)
   10e38:	01c00084 	movi	r7,2
   10e3c:	000d883a 	mov	r6,zero
   10e40:	00115780 	call	11578 <_lseek_r>
   10e44:	8080030b 	ldhu	r2,12(r16)
   10e48:	003fed06 	br	10e00 <__swrite+0x34>

00010e4c <__sseek>:
   10e4c:	defffe04 	addi	sp,sp,-8
   10e50:	dc000015 	stw	r16,0(sp)
   10e54:	2821883a 	mov	r16,r5
   10e58:	2940038f 	ldh	r5,14(r5)
   10e5c:	dfc00115 	stw	ra,4(sp)
   10e60:	00115780 	call	11578 <_lseek_r>
   10e64:	10ffffd8 	cmpnei	r3,r2,-1
   10e68:	18000826 	beq	r3,zero,10e8c <__sseek+0x40>
   10e6c:	80c0030b 	ldhu	r3,12(r16)
   10e70:	80801415 	stw	r2,80(r16)
   10e74:	18c40014 	ori	r3,r3,4096
   10e78:	80c0030d 	sth	r3,12(r16)
   10e7c:	dfc00117 	ldw	ra,4(sp)
   10e80:	dc000017 	ldw	r16,0(sp)
   10e84:	dec00204 	addi	sp,sp,8
   10e88:	f800283a 	ret
   10e8c:	80c0030b 	ldhu	r3,12(r16)
   10e90:	18fbffcc 	andi	r3,r3,61439
   10e94:	80c0030d 	sth	r3,12(r16)
   10e98:	dfc00117 	ldw	ra,4(sp)
   10e9c:	dc000017 	ldw	r16,0(sp)
   10ea0:	dec00204 	addi	sp,sp,8
   10ea4:	f800283a 	ret

00010ea8 <__sclose>:
   10ea8:	2940038f 	ldh	r5,14(r5)
   10eac:	00114581 	jmpi	11458 <_close_r>

00010eb0 <__swsetup_r>:
   10eb0:	00800074 	movhi	r2,1
   10eb4:	109c1617 	ldw	r2,28760(r2)
   10eb8:	defffd04 	addi	sp,sp,-12
   10ebc:	dc400115 	stw	r17,4(sp)
   10ec0:	dc000015 	stw	r16,0(sp)
   10ec4:	dfc00215 	stw	ra,8(sp)
   10ec8:	2023883a 	mov	r17,r4
   10ecc:	2821883a 	mov	r16,r5
   10ed0:	10000226 	beq	r2,zero,10edc <__swsetup_r+0x2c>
   10ed4:	10c00d17 	ldw	r3,52(r2)
   10ed8:	18003f26 	beq	r3,zero,10fd8 <__swsetup_r+0x128>
   10edc:	80c0030b 	ldhu	r3,12(r16)
   10ee0:	1880020c 	andi	r2,r3,8
   10ee4:	10001a26 	beq	r2,zero,10f50 <__swsetup_r+0xa0>
   10ee8:	80800417 	ldw	r2,16(r16)
   10eec:	10002126 	beq	r2,zero,10f74 <__swsetup_r+0xc4>
   10ef0:	1900004c 	andi	r4,r3,1
   10ef4:	20000b1e 	bne	r4,zero,10f24 <__swsetup_r+0x74>
   10ef8:	1900008c 	andi	r4,r3,2
   10efc:	2000261e 	bne	r4,zero,10f98 <__swsetup_r+0xe8>
   10f00:	81000517 	ldw	r4,20(r16)
   10f04:	81000215 	stw	r4,8(r16)
   10f08:	10000b26 	beq	r2,zero,10f38 <__swsetup_r+0x88>
   10f0c:	0005883a 	mov	r2,zero
   10f10:	dfc00217 	ldw	ra,8(sp)
   10f14:	dc400117 	ldw	r17,4(sp)
   10f18:	dc000017 	ldw	r16,0(sp)
   10f1c:	dec00304 	addi	sp,sp,12
   10f20:	f800283a 	ret
   10f24:	81000517 	ldw	r4,20(r16)
   10f28:	80000215 	stw	zero,8(r16)
   10f2c:	0109c83a 	sub	r4,zero,r4
   10f30:	81000615 	stw	r4,24(r16)
   10f34:	103ff51e 	bne	r2,zero,10f0c <__swsetup_r+0x5c>
   10f38:	1900200c 	andi	r4,r3,128
   10f3c:	203ff426 	beq	r4,zero,10f10 <__swsetup_r+0x60>
   10f40:	18c01014 	ori	r3,r3,64
   10f44:	80c0030d 	sth	r3,12(r16)
   10f48:	00bfffc4 	movi	r2,-1
   10f4c:	003ff006 	br	10f10 <__swsetup_r+0x60>
   10f50:	1880040c 	andi	r2,r3,16
   10f54:	10002326 	beq	r2,zero,10fe4 <__swsetup_r+0x134>
   10f58:	1880010c 	andi	r2,r3,4
   10f5c:	1000101e 	bne	r2,zero,10fa0 <__swsetup_r+0xf0>
   10f60:	80800417 	ldw	r2,16(r16)
   10f64:	19000214 	ori	r4,r3,8
   10f68:	8100030d 	sth	r4,12(r16)
   10f6c:	2007883a 	mov	r3,r4
   10f70:	103fdf1e 	bne	r2,zero,10ef0 <__swsetup_r+0x40>
   10f74:	1900a00c 	andi	r4,r3,640
   10f78:	21008020 	cmpeqi	r4,r4,512
   10f7c:	203fdc1e 	bne	r4,zero,10ef0 <__swsetup_r+0x40>
   10f80:	800b883a 	mov	r5,r16
   10f84:	8809883a 	mov	r4,r17
   10f88:	0012ca40 	call	12ca4 <__smakebuf_r>
   10f8c:	80c0030b 	ldhu	r3,12(r16)
   10f90:	80800417 	ldw	r2,16(r16)
   10f94:	003fd606 	br	10ef0 <__swsetup_r+0x40>
   10f98:	0009883a 	mov	r4,zero
   10f9c:	003fd906 	br	10f04 <__swsetup_r+0x54>
   10fa0:	81400c17 	ldw	r5,48(r16)
   10fa4:	28000626 	beq	r5,zero,10fc0 <__swsetup_r+0x110>
   10fa8:	80801004 	addi	r2,r16,64
   10fac:	28800326 	beq	r5,r2,10fbc <__swsetup_r+0x10c>
   10fb0:	8809883a 	mov	r4,r17
   10fb4:	00117f80 	call	117f8 <_free_r>
   10fb8:	80c0030b 	ldhu	r3,12(r16)
   10fbc:	80000c15 	stw	zero,48(r16)
   10fc0:	80800417 	ldw	r2,16(r16)
   10fc4:	013ff6c4 	movi	r4,-37
   10fc8:	20c6703a 	and	r3,r4,r3
   10fcc:	80000115 	stw	zero,4(r16)
   10fd0:	80800015 	stw	r2,0(r16)
   10fd4:	003fe306 	br	10f64 <__swsetup_r+0xb4>
   10fd8:	1009883a 	mov	r4,r2
   10fdc:	00107c80 	call	107c8 <__sinit>
   10fe0:	003fbe06 	br	10edc <__swsetup_r+0x2c>
   10fe4:	00800244 	movi	r2,9
   10fe8:	88800015 	stw	r2,0(r17)
   10fec:	18c01014 	ori	r3,r3,64
   10ff0:	003fd406 	br	10f44 <__swsetup_r+0x94>

00010ff4 <memchr>:
   10ff4:	defffc04 	addi	sp,sp,-16
   10ff8:	dc000015 	stw	r16,0(sp)
   10ffc:	2021883a 	mov	r16,r4
   11000:	dc800215 	stw	r18,8(sp)
   11004:	dfc00315 	stw	ra,12(sp)
   11008:	dc400115 	stw	r17,4(sp)
   1100c:	808000cc 	andi	r2,r16,3
   11010:	2809883a 	mov	r4,r5
   11014:	2825883a 	mov	r18,r5
   11018:	10000e26 	beq	r2,zero,11054 <memchr+0x60>
   1101c:	347fffc4 	addi	r17,r6,-1
   11020:	30001726 	beq	r6,zero,11080 <memchr+0x8c>
   11024:	28c03fcc 	andi	r3,r5,255
   11028:	00000606 	br	11044 <memchr+0x50>
   1102c:	84000044 	addi	r16,r16,1
   11030:	808000cc 	andi	r2,r16,3
   11034:	10000826 	beq	r2,zero,11058 <memchr+0x64>
   11038:	8c7fffc4 	addi	r17,r17,-1
   1103c:	88bfffe0 	cmpeqi	r2,r17,-1
   11040:	10000f1e 	bne	r2,zero,11080 <memchr+0x8c>
   11044:	80800003 	ldbu	r2,0(r16)
   11048:	10fff81e 	bne	r2,r3,1102c <memchr+0x38>
   1104c:	8005883a 	mov	r2,r16
   11050:	00000c06 	br	11084 <memchr+0x90>
   11054:	3023883a 	mov	r17,r6
   11058:	88800130 	cmpltui	r2,r17,4
   1105c:	10000f26 	beq	r2,zero,1109c <memchr+0xa8>
   11060:	88000726 	beq	r17,zero,11080 <memchr+0x8c>
   11064:	8463883a 	add	r17,r16,r17
   11068:	8005883a 	mov	r2,r16
   1106c:	90c03fcc 	andi	r3,r18,255
   11070:	11000003 	ldbu	r4,0(r2)
   11074:	20c00326 	beq	r4,r3,11084 <memchr+0x90>
   11078:	10800044 	addi	r2,r2,1
   1107c:	88bffc1e 	bne	r17,r2,11070 <memchr+0x7c>
   11080:	0005883a 	mov	r2,zero
   11084:	dfc00317 	ldw	ra,12(sp)
   11088:	dc800217 	ldw	r18,8(sp)
   1108c:	dc400117 	ldw	r17,4(sp)
   11090:	dc000017 	ldw	r16,0(sp)
   11094:	dec00404 	addi	sp,sp,16
   11098:	f800283a 	ret
   1109c:	01404074 	movhi	r5,257
   110a0:	29404044 	addi	r5,r5,257
   110a4:	21003fcc 	andi	r4,r4,255
   110a8:	00102f80 	call	102f8 <__mulsi3>
   110ac:	01bfbff4 	movhi	r6,65279
   110b0:	01602074 	movhi	r5,32897
   110b4:	31bfbfc4 	addi	r6,r6,-257
   110b8:	29602004 	addi	r5,r5,-32640
   110bc:	00000406 	br	110d0 <memchr+0xdc>
   110c0:	8c7fff04 	addi	r17,r17,-4
   110c4:	88c00128 	cmpgeui	r3,r17,4
   110c8:	84000104 	addi	r16,r16,4
   110cc:	183fe426 	beq	r3,zero,11060 <memchr+0x6c>
   110d0:	80c00017 	ldw	r3,0(r16)
   110d4:	10c6f03a 	xor	r3,r2,r3
   110d8:	1989883a 	add	r4,r3,r6
   110dc:	00c6303a 	nor	r3,zero,r3
   110e0:	20c6703a 	and	r3,r4,r3
   110e4:	1946703a 	and	r3,r3,r5
   110e8:	183ff526 	beq	r3,zero,110c0 <memchr+0xcc>
   110ec:	003fdc06 	br	11060 <memchr+0x6c>

000110f0 <memcpy>:
   110f0:	30c00428 	cmpgeui	r3,r6,16
   110f4:	2005883a 	mov	r2,r4
   110f8:	18000b1e 	bne	r3,zero,11128 <memcpy+0x38>
   110fc:	2007883a 	mov	r3,r4
   11100:	31ffffc4 	addi	r7,r6,-1
   11104:	30003426 	beq	r6,zero,111d8 <memcpy+0xe8>
   11108:	39c00044 	addi	r7,r7,1
   1110c:	19cf883a 	add	r7,r3,r7
   11110:	29800003 	ldbu	r6,0(r5)
   11114:	18c00044 	addi	r3,r3,1
   11118:	29400044 	addi	r5,r5,1
   1111c:	19bfffc5 	stb	r6,-1(r3)
   11120:	19fffb1e 	bne	r3,r7,11110 <memcpy+0x20>
   11124:	f800283a 	ret
   11128:	2146b03a 	or	r3,r4,r5
   1112c:	18c000cc 	andi	r3,r3,3
   11130:	18002a1e 	bne	r3,zero,111dc <memcpy+0xec>
   11134:	333ffc04 	addi	r12,r6,-16
   11138:	6018d13a 	srli	r12,r12,4
   1113c:	2811883a 	mov	r8,r5
   11140:	200f883a 	mov	r7,r4
   11144:	63000044 	addi	r12,r12,1
   11148:	6018913a 	slli	r12,r12,4
   1114c:	2307883a 	add	r3,r4,r12
   11150:	42c00017 	ldw	r11,0(r8)
   11154:	42800117 	ldw	r10,4(r8)
   11158:	42400217 	ldw	r9,8(r8)
   1115c:	41000317 	ldw	r4,12(r8)
   11160:	39c00404 	addi	r7,r7,16
   11164:	3afffc15 	stw	r11,-16(r7)
   11168:	3abffd15 	stw	r10,-12(r7)
   1116c:	3a7ffe15 	stw	r9,-8(r7)
   11170:	393fff15 	stw	r4,-4(r7)
   11174:	42000404 	addi	r8,r8,16
   11178:	38fff51e 	bne	r7,r3,11150 <memcpy+0x60>
   1117c:	3100030c 	andi	r4,r6,12
   11180:	2b0b883a 	add	r5,r5,r12
   11184:	324003cc 	andi	r9,r6,15
   11188:	20001726 	beq	r4,zero,111e8 <memcpy+0xf8>
   1118c:	2811883a 	mov	r8,r5
   11190:	1809883a 	mov	r4,r3
   11194:	1a57883a 	add	r11,r3,r9
   11198:	42800017 	ldw	r10,0(r8)
   1119c:	21000104 	addi	r4,r4,4
   111a0:	590fc83a 	sub	r7,r11,r4
   111a4:	39c00128 	cmpgeui	r7,r7,4
   111a8:	22bfff15 	stw	r10,-4(r4)
   111ac:	42000104 	addi	r8,r8,4
   111b0:	383ff91e 	bne	r7,zero,11198 <memcpy+0xa8>
   111b4:	493fff04 	addi	r4,r9,-4
   111b8:	2008d0ba 	srli	r4,r4,2
   111bc:	318000cc 	andi	r6,r6,3
   111c0:	31ffffc4 	addi	r7,r6,-1
   111c4:	21000044 	addi	r4,r4,1
   111c8:	200890ba 	slli	r4,r4,2
   111cc:	1907883a 	add	r3,r3,r4
   111d0:	290b883a 	add	r5,r5,r4
   111d4:	303fcc1e 	bne	r6,zero,11108 <memcpy+0x18>
   111d8:	f800283a 	ret
   111dc:	31ffffc4 	addi	r7,r6,-1
   111e0:	2007883a 	mov	r3,r4
   111e4:	003fc806 	br	11108 <memcpy+0x18>
   111e8:	480d883a 	mov	r6,r9
   111ec:	003fc406 	br	11100 <memcpy+0x10>

000111f0 <memmove>:
   111f0:	2005883a 	mov	r2,r4
   111f4:	29000a2e 	bgeu	r5,r4,11220 <memmove+0x30>
   111f8:	298f883a 	add	r7,r5,r6
   111fc:	21c0082e 	bgeu	r4,r7,11220 <memmove+0x30>
   11200:	2187883a 	add	r3,r4,r6
   11204:	30001226 	beq	r6,zero,11250 <memmove+0x60>
   11208:	397fffc3 	ldbu	r5,-1(r7)
   1120c:	18ffffc4 	addi	r3,r3,-1
   11210:	39ffffc4 	addi	r7,r7,-1
   11214:	19400005 	stb	r5,0(r3)
   11218:	10fffb1e 	bne	r2,r3,11208 <memmove+0x18>
   1121c:	f800283a 	ret
   11220:	30c00428 	cmpgeui	r3,r6,16
   11224:	18000b1e 	bne	r3,zero,11254 <memmove+0x64>
   11228:	1007883a 	mov	r3,r2
   1122c:	31ffffc4 	addi	r7,r6,-1
   11230:	30003626 	beq	r6,zero,1130c <memmove+0x11c>
   11234:	39c00044 	addi	r7,r7,1
   11238:	19cf883a 	add	r7,r3,r7
   1123c:	29800003 	ldbu	r6,0(r5)
   11240:	18c00044 	addi	r3,r3,1
   11244:	29400044 	addi	r5,r5,1
   11248:	19bfffc5 	stb	r6,-1(r3)
   1124c:	19fffb1e 	bne	r3,r7,1123c <memmove+0x4c>
   11250:	f800283a 	ret
   11254:	1146b03a 	or	r3,r2,r5
   11258:	18c000cc 	andi	r3,r3,3
   1125c:	1800281e 	bne	r3,zero,11300 <memmove+0x110>
   11260:	313ffc04 	addi	r4,r6,-16
   11264:	2008d13a 	srli	r4,r4,4
   11268:	2811883a 	mov	r8,r5
   1126c:	100f883a 	mov	r7,r2
   11270:	21000044 	addi	r4,r4,1
   11274:	2008913a 	slli	r4,r4,4
   11278:	1107883a 	add	r3,r2,r4
   1127c:	42400017 	ldw	r9,0(r8)
   11280:	42000404 	addi	r8,r8,16
   11284:	39c00404 	addi	r7,r7,16
   11288:	3a7ffc15 	stw	r9,-16(r7)
   1128c:	427ffd17 	ldw	r9,-12(r8)
   11290:	3a7ffd15 	stw	r9,-12(r7)
   11294:	427ffe17 	ldw	r9,-8(r8)
   11298:	3a7ffe15 	stw	r9,-8(r7)
   1129c:	427fff17 	ldw	r9,-4(r8)
   112a0:	3a7fff15 	stw	r9,-4(r7)
   112a4:	38fff51e 	bne	r7,r3,1127c <memmove+0x8c>
   112a8:	31c0030c 	andi	r7,r6,12
   112ac:	290b883a 	add	r5,r5,r4
   112b0:	324003cc 	andi	r9,r6,15
   112b4:	38001626 	beq	r7,zero,11310 <memmove+0x120>
   112b8:	2809883a 	mov	r4,r5
   112bc:	180f883a 	mov	r7,r3
   112c0:	1a57883a 	add	r11,r3,r9
   112c4:	22800017 	ldw	r10,0(r4)
   112c8:	39c00104 	addi	r7,r7,4
   112cc:	59d1c83a 	sub	r8,r11,r7
   112d0:	42000128 	cmpgeui	r8,r8,4
   112d4:	3abfff15 	stw	r10,-4(r7)
   112d8:	21000104 	addi	r4,r4,4
   112dc:	403ff91e 	bne	r8,zero,112c4 <memmove+0xd4>
   112e0:	493fff04 	addi	r4,r9,-4
   112e4:	2008d0ba 	srli	r4,r4,2
   112e8:	318000cc 	andi	r6,r6,3
   112ec:	21000044 	addi	r4,r4,1
   112f0:	200890ba 	slli	r4,r4,2
   112f4:	1907883a 	add	r3,r3,r4
   112f8:	290b883a 	add	r5,r5,r4
   112fc:	003fcb06 	br	1122c <memmove+0x3c>
   11300:	31ffffc4 	addi	r7,r6,-1
   11304:	1007883a 	mov	r3,r2
   11308:	003fca06 	br	11234 <memmove+0x44>
   1130c:	f800283a 	ret
   11310:	480d883a 	mov	r6,r9
   11314:	003fc506 	br	1122c <memmove+0x3c>

00011318 <memset>:
   11318:	defffb04 	addi	sp,sp,-20
   1131c:	dc800215 	stw	r18,8(sp)
   11320:	dc400115 	stw	r17,4(sp)
   11324:	dfc00415 	stw	ra,16(sp)
   11328:	dcc00315 	stw	r19,12(sp)
   1132c:	dc000015 	stw	r16,0(sp)
   11330:	208000cc 	andi	r2,r4,3
   11334:	2023883a 	mov	r17,r4
   11338:	2825883a 	mov	r18,r5
   1133c:	10004026 	beq	r2,zero,11440 <memset+0x128>
   11340:	34ffffc4 	addi	r19,r6,-1
   11344:	30003326 	beq	r6,zero,11414 <memset+0xfc>
   11348:	280f883a 	mov	r7,r5
   1134c:	2021883a 	mov	r16,r4
   11350:	00000306 	br	11360 <memset+0x48>
   11354:	9cffffc4 	addi	r19,r19,-1
   11358:	99bfffe0 	cmpeqi	r6,r19,-1
   1135c:	30002d1e 	bne	r6,zero,11414 <memset+0xfc>
   11360:	84000044 	addi	r16,r16,1
   11364:	818000cc 	andi	r6,r16,3
   11368:	81ffffc5 	stb	r7,-1(r16)
   1136c:	303ff91e 	bne	r6,zero,11354 <memset+0x3c>
   11370:	98800128 	cmpgeui	r2,r19,4
   11374:	10002126 	beq	r2,zero,113fc <memset+0xe4>
   11378:	01404074 	movhi	r5,257
   1137c:	29404044 	addi	r5,r5,257
   11380:	91003fcc 	andi	r4,r18,255
   11384:	00102f80 	call	102f8 <__mulsi3>
   11388:	98c00430 	cmpltui	r3,r19,16
   1138c:	18002f1e 	bne	r3,zero,1144c <memset+0x134>
   11390:	99bffc04 	addi	r6,r19,-16
   11394:	300cd13a 	srli	r6,r6,4
   11398:	31800044 	addi	r6,r6,1
   1139c:	300c913a 	slli	r6,r6,4
   113a0:	818d883a 	add	r6,r16,r6
   113a4:	80800015 	stw	r2,0(r16)
   113a8:	80800115 	stw	r2,4(r16)
   113ac:	80800215 	stw	r2,8(r16)
   113b0:	80800315 	stw	r2,12(r16)
   113b4:	84000404 	addi	r16,r16,16
   113b8:	81bffa1e 	bne	r16,r6,113a4 <memset+0x8c>
   113bc:	9900030c 	andi	r4,r19,12
   113c0:	98c003cc 	andi	r3,r19,15
   113c4:	20001b26 	beq	r4,zero,11434 <memset+0x11c>
   113c8:	3009883a 	mov	r4,r6
   113cc:	30cb883a 	add	r5,r6,r3
   113d0:	21000104 	addi	r4,r4,4
   113d4:	290fc83a 	sub	r7,r5,r4
   113d8:	39c00128 	cmpgeui	r7,r7,4
   113dc:	20bfff15 	stw	r2,-4(r4)
   113e0:	383ffb1e 	bne	r7,zero,113d0 <memset+0xb8>
   113e4:	1c3fff04 	addi	r16,r3,-4
   113e8:	8020d0ba 	srli	r16,r16,2
   113ec:	1cc000cc 	andi	r19,r3,3
   113f0:	84000044 	addi	r16,r16,1
   113f4:	802090ba 	slli	r16,r16,2
   113f8:	3421883a 	add	r16,r6,r16
   113fc:	98000526 	beq	r19,zero,11414 <memset+0xfc>
   11400:	900b883a 	mov	r5,r18
   11404:	84c7883a 	add	r3,r16,r19
   11408:	84000044 	addi	r16,r16,1
   1140c:	817fffc5 	stb	r5,-1(r16)
   11410:	1c3ffd1e 	bne	r3,r16,11408 <memset+0xf0>
   11414:	8805883a 	mov	r2,r17
   11418:	dfc00417 	ldw	ra,16(sp)
   1141c:	dcc00317 	ldw	r19,12(sp)
   11420:	dc800217 	ldw	r18,8(sp)
   11424:	dc400117 	ldw	r17,4(sp)
   11428:	dc000017 	ldw	r16,0(sp)
   1142c:	dec00504 	addi	sp,sp,20
   11430:	f800283a 	ret
   11434:	1827883a 	mov	r19,r3
   11438:	983ff11e 	bne	r19,zero,11400 <memset+0xe8>
   1143c:	003ff506 	br	11414 <memset+0xfc>
   11440:	2021883a 	mov	r16,r4
   11444:	3027883a 	mov	r19,r6
   11448:	003fc906 	br	11370 <memset+0x58>
   1144c:	800d883a 	mov	r6,r16
   11450:	9807883a 	mov	r3,r19
   11454:	003fdc06 	br	113c8 <memset+0xb0>

00011458 <_close_r>:
   11458:	defffe04 	addi	sp,sp,-8
   1145c:	dc000015 	stw	r16,0(sp)
   11460:	008000b4 	movhi	r2,2
   11464:	2021883a 	mov	r16,r4
   11468:	2809883a 	mov	r4,r5
   1146c:	dfc00115 	stw	ra,4(sp)
   11470:	1021ff15 	stw	zero,-30724(r2)
   11474:	00132f00 	call	132f0 <close>
   11478:	10ffffd8 	cmpnei	r3,r2,-1
   1147c:	18000426 	beq	r3,zero,11490 <_close_r+0x38>
   11480:	dfc00117 	ldw	ra,4(sp)
   11484:	dc000017 	ldw	r16,0(sp)
   11488:	dec00204 	addi	sp,sp,8
   1148c:	f800283a 	ret
   11490:	00c000b4 	movhi	r3,2
   11494:	18e1ff17 	ldw	r3,-30724(r3)
   11498:	183ff926 	beq	r3,zero,11480 <_close_r+0x28>
   1149c:	80c00015 	stw	r3,0(r16)
   114a0:	dfc00117 	ldw	ra,4(sp)
   114a4:	dc000017 	ldw	r16,0(sp)
   114a8:	dec00204 	addi	sp,sp,8
   114ac:	f800283a 	ret

000114b0 <_reclaim_reent>:
   114b0:	00800074 	movhi	r2,1
   114b4:	109c1617 	ldw	r2,28760(r2)
   114b8:	11002e26 	beq	r2,r4,11574 <_reclaim_reent+0xc4>
   114bc:	21401117 	ldw	r5,68(r4)
   114c0:	defffc04 	addi	sp,sp,-16
   114c4:	dc400115 	stw	r17,4(sp)
   114c8:	dfc00315 	stw	ra,12(sp)
   114cc:	dc800215 	stw	r18,8(sp)
   114d0:	dc000015 	stw	r16,0(sp)
   114d4:	2023883a 	mov	r17,r4
   114d8:	28000f26 	beq	r5,zero,11518 <_reclaim_reent+0x68>
   114dc:	0025883a 	mov	r18,zero
   114e0:	2c85883a 	add	r2,r5,r18
   114e4:	14000017 	ldw	r16,0(r2)
   114e8:	80000626 	beq	r16,zero,11504 <_reclaim_reent+0x54>
   114ec:	800b883a 	mov	r5,r16
   114f0:	84000017 	ldw	r16,0(r16)
   114f4:	8809883a 	mov	r4,r17
   114f8:	00117f80 	call	117f8 <_free_r>
   114fc:	803ffb1e 	bne	r16,zero,114ec <_reclaim_reent+0x3c>
   11500:	89401117 	ldw	r5,68(r17)
   11504:	94800104 	addi	r18,r18,4
   11508:	90802018 	cmpnei	r2,r18,128
   1150c:	103ff41e 	bne	r2,zero,114e0 <_reclaim_reent+0x30>
   11510:	8809883a 	mov	r4,r17
   11514:	00117f80 	call	117f8 <_free_r>
   11518:	89400e17 	ldw	r5,56(r17)
   1151c:	28000226 	beq	r5,zero,11528 <_reclaim_reent+0x78>
   11520:	8809883a 	mov	r4,r17
   11524:	00117f80 	call	117f8 <_free_r>
   11528:	89401317 	ldw	r5,76(r17)
   1152c:	28000226 	beq	r5,zero,11538 <_reclaim_reent+0x88>
   11530:	8809883a 	mov	r4,r17
   11534:	00117f80 	call	117f8 <_free_r>
   11538:	88800d17 	ldw	r2,52(r17)
   1153c:	10000726 	beq	r2,zero,1155c <_reclaim_reent+0xac>
   11540:	8809883a 	mov	r4,r17
   11544:	dfc00317 	ldw	ra,12(sp)
   11548:	dc800217 	ldw	r18,8(sp)
   1154c:	dc400117 	ldw	r17,4(sp)
   11550:	dc000017 	ldw	r16,0(sp)
   11554:	dec00404 	addi	sp,sp,16
   11558:	1000683a 	jmp	r2
   1155c:	dfc00317 	ldw	ra,12(sp)
   11560:	dc800217 	ldw	r18,8(sp)
   11564:	dc400117 	ldw	r17,4(sp)
   11568:	dc000017 	ldw	r16,0(sp)
   1156c:	dec00404 	addi	sp,sp,16
   11570:	f800283a 	ret
   11574:	f800283a 	ret

00011578 <_lseek_r>:
   11578:	2807883a 	mov	r3,r5
   1157c:	defffe04 	addi	sp,sp,-8
   11580:	dc000015 	stw	r16,0(sp)
   11584:	300b883a 	mov	r5,r6
   11588:	008000b4 	movhi	r2,2
   1158c:	380d883a 	mov	r6,r7
   11590:	2021883a 	mov	r16,r4
   11594:	1809883a 	mov	r4,r3
   11598:	dfc00115 	stw	ra,4(sp)
   1159c:	1021ff15 	stw	zero,-30724(r2)
   115a0:	00137400 	call	13740 <lseek>
   115a4:	10ffffd8 	cmpnei	r3,r2,-1
   115a8:	18000426 	beq	r3,zero,115bc <_lseek_r+0x44>
   115ac:	dfc00117 	ldw	ra,4(sp)
   115b0:	dc000017 	ldw	r16,0(sp)
   115b4:	dec00204 	addi	sp,sp,8
   115b8:	f800283a 	ret
   115bc:	00c000b4 	movhi	r3,2
   115c0:	18e1ff17 	ldw	r3,-30724(r3)
   115c4:	183ff926 	beq	r3,zero,115ac <_lseek_r+0x34>
   115c8:	80c00015 	stw	r3,0(r16)
   115cc:	dfc00117 	ldw	ra,4(sp)
   115d0:	dc000017 	ldw	r16,0(sp)
   115d4:	dec00204 	addi	sp,sp,8
   115d8:	f800283a 	ret

000115dc <_read_r>:
   115dc:	2807883a 	mov	r3,r5
   115e0:	defffe04 	addi	sp,sp,-8
   115e4:	dc000015 	stw	r16,0(sp)
   115e8:	300b883a 	mov	r5,r6
   115ec:	008000b4 	movhi	r2,2
   115f0:	380d883a 	mov	r6,r7
   115f4:	2021883a 	mov	r16,r4
   115f8:	1809883a 	mov	r4,r3
   115fc:	dfc00115 	stw	ra,4(sp)
   11600:	1021ff15 	stw	zero,-30724(r2)
   11604:	00139200 	call	13920 <read>
   11608:	10ffffd8 	cmpnei	r3,r2,-1
   1160c:	18000426 	beq	r3,zero,11620 <_read_r+0x44>
   11610:	dfc00117 	ldw	ra,4(sp)
   11614:	dc000017 	ldw	r16,0(sp)
   11618:	dec00204 	addi	sp,sp,8
   1161c:	f800283a 	ret
   11620:	00c000b4 	movhi	r3,2
   11624:	18e1ff17 	ldw	r3,-30724(r3)
   11628:	183ff926 	beq	r3,zero,11610 <_read_r+0x34>
   1162c:	80c00015 	stw	r3,0(r16)
   11630:	dfc00117 	ldw	ra,4(sp)
   11634:	dc000017 	ldw	r16,0(sp)
   11638:	dec00204 	addi	sp,sp,8
   1163c:	f800283a 	ret

00011640 <_write_r>:
   11640:	2807883a 	mov	r3,r5
   11644:	defffe04 	addi	sp,sp,-8
   11648:	dc000015 	stw	r16,0(sp)
   1164c:	300b883a 	mov	r5,r6
   11650:	008000b4 	movhi	r2,2
   11654:	380d883a 	mov	r6,r7
   11658:	2021883a 	mov	r16,r4
   1165c:	1809883a 	mov	r4,r3
   11660:	dfc00115 	stw	ra,4(sp)
   11664:	1021ff15 	stw	zero,-30724(r2)
   11668:	0013bbc0 	call	13bbc <write>
   1166c:	10ffffd8 	cmpnei	r3,r2,-1
   11670:	18000426 	beq	r3,zero,11684 <_write_r+0x44>
   11674:	dfc00117 	ldw	ra,4(sp)
   11678:	dc000017 	ldw	r16,0(sp)
   1167c:	dec00204 	addi	sp,sp,8
   11680:	f800283a 	ret
   11684:	00c000b4 	movhi	r3,2
   11688:	18e1ff17 	ldw	r3,-30724(r3)
   1168c:	183ff926 	beq	r3,zero,11674 <_write_r+0x34>
   11690:	80c00015 	stw	r3,0(r16)
   11694:	dfc00117 	ldw	ra,4(sp)
   11698:	dc000017 	ldw	r16,0(sp)
   1169c:	dec00204 	addi	sp,sp,8
   116a0:	f800283a 	ret

000116a4 <exit>:
   116a4:	defffe04 	addi	sp,sp,-8
   116a8:	000b883a 	mov	r5,zero
   116ac:	dc000015 	stw	r16,0(sp)
   116b0:	dfc00115 	stw	ra,4(sp)
   116b4:	2021883a 	mov	r16,r4
   116b8:	0012fe80 	call	12fe8 <__call_exitprocs>
   116bc:	008000b4 	movhi	r2,2
   116c0:	10a20017 	ldw	r2,-30720(r2)
   116c4:	10000126 	beq	r2,zero,116cc <exit+0x28>
   116c8:	103ee83a 	callr	r2
   116cc:	8009883a 	mov	r4,r16
   116d0:	00133f80 	call	133f8 <_exit>

000116d4 <_malloc_trim_r>:
   116d4:	defffa04 	addi	sp,sp,-24
   116d8:	dcc00315 	stw	r19,12(sp)
   116dc:	04c00074 	movhi	r19,1
   116e0:	dd000415 	stw	r20,16(sp)
   116e4:	dc800215 	stw	r18,8(sp)
   116e8:	dc400115 	stw	r17,4(sp)
   116ec:	dc000015 	stw	r16,0(sp)
   116f0:	2829883a 	mov	r20,r5
   116f4:	dfc00515 	stw	ra,20(sp)
   116f8:	9cd69104 	addi	r19,r19,23108
   116fc:	2025883a 	mov	r18,r4
   11700:	001389c0 	call	1389c <__malloc_lock>
   11704:	98800217 	ldw	r2,8(r19)
   11708:	14400117 	ldw	r17,4(r2)
   1170c:	00bfff04 	movi	r2,-4
   11710:	88a2703a 	and	r17,r17,r2
   11714:	8c03fbc4 	addi	r16,r17,4079
   11718:	8521c83a 	sub	r16,r16,r20
   1171c:	8020d33a 	srli	r16,r16,12
   11720:	843fffc4 	addi	r16,r16,-1
   11724:	8020933a 	slli	r16,r16,12
   11728:	80840008 	cmpgei	r2,r16,4096
   1172c:	10000626 	beq	r2,zero,11748 <_malloc_trim_r+0x74>
   11730:	000b883a 	mov	r5,zero
   11734:	9009883a 	mov	r4,r18
   11738:	0012f900 	call	12f90 <_sbrk_r>
   1173c:	98c00217 	ldw	r3,8(r19)
   11740:	1c47883a 	add	r3,r3,r17
   11744:	10c00b26 	beq	r2,r3,11774 <_malloc_trim_r+0xa0>
   11748:	9009883a 	mov	r4,r18
   1174c:	00138c00 	call	138c0 <__malloc_unlock>
   11750:	0005883a 	mov	r2,zero
   11754:	dfc00517 	ldw	ra,20(sp)
   11758:	dd000417 	ldw	r20,16(sp)
   1175c:	dcc00317 	ldw	r19,12(sp)
   11760:	dc800217 	ldw	r18,8(sp)
   11764:	dc400117 	ldw	r17,4(sp)
   11768:	dc000017 	ldw	r16,0(sp)
   1176c:	dec00604 	addi	sp,sp,24
   11770:	f800283a 	ret
   11774:	040bc83a 	sub	r5,zero,r16
   11778:	9009883a 	mov	r4,r18
   1177c:	0012f900 	call	12f90 <_sbrk_r>
   11780:	10bfffd8 	cmpnei	r2,r2,-1
   11784:	10000d26 	beq	r2,zero,117bc <_malloc_trim_r+0xe8>
   11788:	008000b4 	movhi	r2,2
   1178c:	10a25b17 	ldw	r2,-30356(r2)
   11790:	98c00217 	ldw	r3,8(r19)
   11794:	8c23c83a 	sub	r17,r17,r16
   11798:	8c400054 	ori	r17,r17,1
   1179c:	1405c83a 	sub	r2,r2,r16
   117a0:	1c400115 	stw	r17,4(r3)
   117a4:	9009883a 	mov	r4,r18
   117a8:	00c000b4 	movhi	r3,2
   117ac:	18a25b15 	stw	r2,-30356(r3)
   117b0:	00138c00 	call	138c0 <__malloc_unlock>
   117b4:	00800044 	movi	r2,1
   117b8:	003fe606 	br	11754 <_malloc_trim_r+0x80>
   117bc:	000b883a 	mov	r5,zero
   117c0:	9009883a 	mov	r4,r18
   117c4:	0012f900 	call	12f90 <_sbrk_r>
   117c8:	99000217 	ldw	r4,8(r19)
   117cc:	1107c83a 	sub	r3,r2,r4
   117d0:	19400410 	cmplti	r5,r3,16
   117d4:	283fdc1e 	bne	r5,zero,11748 <_malloc_trim_r+0x74>
   117d8:	01400074 	movhi	r5,1
   117dc:	295c1717 	ldw	r5,28764(r5)
   117e0:	18c00054 	ori	r3,r3,1
   117e4:	20c00115 	stw	r3,4(r4)
   117e8:	1145c83a 	sub	r2,r2,r5
   117ec:	014000b4 	movhi	r5,2
   117f0:	28a25b15 	stw	r2,-30356(r5)
   117f4:	003fd406 	br	11748 <_malloc_trim_r+0x74>

000117f8 <_free_r>:
   117f8:	28005f26 	beq	r5,zero,11978 <_free_r+0x180>
   117fc:	defffd04 	addi	sp,sp,-12
   11800:	dc400115 	stw	r17,4(sp)
   11804:	dc000015 	stw	r16,0(sp)
   11808:	2023883a 	mov	r17,r4
   1180c:	2821883a 	mov	r16,r5
   11810:	dfc00215 	stw	ra,8(sp)
   11814:	001389c0 	call	1389c <__malloc_lock>
   11818:	81ffff17 	ldw	r7,-4(r16)
   1181c:	00bfff84 	movi	r2,-2
   11820:	80fffe04 	addi	r3,r16,-8
   11824:	3884703a 	and	r2,r7,r2
   11828:	01800074 	movhi	r6,1
   1182c:	1889883a 	add	r4,r3,r2
   11830:	31969104 	addi	r6,r6,23108
   11834:	21400117 	ldw	r5,4(r4)
   11838:	32000217 	ldw	r8,8(r6)
   1183c:	027fff04 	movi	r9,-4
   11840:	2a4a703a 	and	r5,r5,r9
   11844:	41006526 	beq	r8,r4,119dc <_free_r+0x1e4>
   11848:	21400115 	stw	r5,4(r4)
   1184c:	39c0004c 	andi	r7,r7,1
   11850:	2151883a 	add	r8,r4,r5
   11854:	3800281e 	bne	r7,zero,118f8 <_free_r+0x100>
   11858:	82bffe17 	ldw	r10,-8(r16)
   1185c:	42000117 	ldw	r8,4(r8)
   11860:	01c00074 	movhi	r7,1
   11864:	1a87c83a 	sub	r3,r3,r10
   11868:	1a400217 	ldw	r9,8(r3)
   1186c:	39d69304 	addi	r7,r7,23116
   11870:	1285883a 	add	r2,r2,r10
   11874:	4200004c 	andi	r8,r8,1
   11878:	49c04d26 	beq	r9,r7,119b0 <_free_r+0x1b8>
   1187c:	1a800317 	ldw	r10,12(r3)
   11880:	4a800315 	stw	r10,12(r9)
   11884:	52400215 	stw	r9,8(r10)
   11888:	40006926 	beq	r8,zero,11a30 <_free_r+0x238>
   1188c:	11400054 	ori	r5,r2,1
   11890:	19400115 	stw	r5,4(r3)
   11894:	20800015 	stw	r2,0(r4)
   11898:	11008028 	cmpgeui	r4,r2,512
   1189c:	20001e1e 	bne	r4,zero,11918 <_free_r+0x120>
   118a0:	1008d0fa 	srli	r4,r2,3
   118a4:	100ad17a 	srli	r5,r2,5
   118a8:	31c00117 	ldw	r7,4(r6)
   118ac:	20800044 	addi	r2,r4,1
   118b0:	100490fa 	slli	r2,r2,3
   118b4:	01000044 	movi	r4,1
   118b8:	2148983a 	sll	r4,r4,r5
   118bc:	3085883a 	add	r2,r6,r2
   118c0:	11400017 	ldw	r5,0(r2)
   118c4:	21c8b03a 	or	r4,r4,r7
   118c8:	11fffe04 	addi	r7,r2,-8
   118cc:	19c00315 	stw	r7,12(r3)
   118d0:	19400215 	stw	r5,8(r3)
   118d4:	31000115 	stw	r4,4(r6)
   118d8:	10c00015 	stw	r3,0(r2)
   118dc:	28c00315 	stw	r3,12(r5)
   118e0:	8809883a 	mov	r4,r17
   118e4:	dfc00217 	ldw	ra,8(sp)
   118e8:	dc400117 	ldw	r17,4(sp)
   118ec:	dc000017 	ldw	r16,0(sp)
   118f0:	dec00304 	addi	sp,sp,12
   118f4:	00138c01 	jmpi	138c0 <__malloc_unlock>
   118f8:	41c00117 	ldw	r7,4(r8)
   118fc:	39c0004c 	andi	r7,r7,1
   11900:	38001e26 	beq	r7,zero,1197c <_free_r+0x184>
   11904:	11400054 	ori	r5,r2,1
   11908:	817fff15 	stw	r5,-4(r16)
   1190c:	20800015 	stw	r2,0(r4)
   11910:	11008028 	cmpgeui	r4,r2,512
   11914:	203fe226 	beq	r4,zero,118a0 <_free_r+0xa8>
   11918:	1008d27a 	srli	r4,r2,9
   1191c:	21400168 	cmpgeui	r5,r4,5
   11920:	2800451e 	bne	r5,zero,11a38 <_free_r+0x240>
   11924:	1008d1ba 	srli	r4,r2,6
   11928:	21c00e44 	addi	r7,r4,57
   1192c:	380e90fa 	slli	r7,r7,3
   11930:	21000e04 	addi	r4,r4,56
   11934:	31cf883a 	add	r7,r6,r7
   11938:	39400017 	ldw	r5,0(r7)
   1193c:	39fffe04 	addi	r7,r7,-8
   11940:	39405326 	beq	r7,r5,11a90 <_free_r+0x298>
   11944:	01bfff04 	movi	r6,-4
   11948:	00000206 	br	11954 <_free_r+0x15c>
   1194c:	29400217 	ldw	r5,8(r5)
   11950:	39400326 	beq	r7,r5,11960 <_free_r+0x168>
   11954:	29000117 	ldw	r4,4(r5)
   11958:	2188703a 	and	r4,r4,r6
   1195c:	113ffb36 	bltu	r2,r4,1194c <_free_r+0x154>
   11960:	29c00317 	ldw	r7,12(r5)
   11964:	19c00315 	stw	r7,12(r3)
   11968:	19400215 	stw	r5,8(r3)
   1196c:	38c00215 	stw	r3,8(r7)
   11970:	28c00315 	stw	r3,12(r5)
   11974:	003fda06 	br	118e0 <_free_r+0xe8>
   11978:	f800283a 	ret
   1197c:	01c00074 	movhi	r7,1
   11980:	1145883a 	add	r2,r2,r5
   11984:	39d69304 	addi	r7,r7,23116
   11988:	21400217 	ldw	r5,8(r4)
   1198c:	29c03726 	beq	r5,r7,11a6c <_free_r+0x274>
   11990:	22000317 	ldw	r8,12(r4)
   11994:	11c00054 	ori	r7,r2,1
   11998:	1889883a 	add	r4,r3,r2
   1199c:	2a000315 	stw	r8,12(r5)
   119a0:	41400215 	stw	r5,8(r8)
   119a4:	19c00115 	stw	r7,4(r3)
   119a8:	20800015 	stw	r2,0(r4)
   119ac:	003fba06 	br	11898 <_free_r+0xa0>
   119b0:	40004f1e 	bne	r8,zero,11af0 <_free_r+0x2f8>
   119b4:	21800217 	ldw	r6,8(r4)
   119b8:	21000317 	ldw	r4,12(r4)
   119bc:	288b883a 	add	r5,r5,r2
   119c0:	28800054 	ori	r2,r5,1
   119c4:	31000315 	stw	r4,12(r6)
   119c8:	21800215 	stw	r6,8(r4)
   119cc:	18800115 	stw	r2,4(r3)
   119d0:	1947883a 	add	r3,r3,r5
   119d4:	19400015 	stw	r5,0(r3)
   119d8:	003fc106 	br	118e0 <_free_r+0xe8>
   119dc:	39c0004c 	andi	r7,r7,1
   119e0:	114b883a 	add	r5,r2,r5
   119e4:	3800071e 	bne	r7,zero,11a04 <_free_r+0x20c>
   119e8:	81fffe17 	ldw	r7,-8(r16)
   119ec:	19c7c83a 	sub	r3,r3,r7
   119f0:	18800317 	ldw	r2,12(r3)
   119f4:	19000217 	ldw	r4,8(r3)
   119f8:	29cb883a 	add	r5,r5,r7
   119fc:	20800315 	stw	r2,12(r4)
   11a00:	11000215 	stw	r4,8(r2)
   11a04:	00800074 	movhi	r2,1
   11a08:	29000054 	ori	r4,r5,1
   11a0c:	109c1817 	ldw	r2,28768(r2)
   11a10:	19000115 	stw	r4,4(r3)
   11a14:	30c00215 	stw	r3,8(r6)
   11a18:	28bfb136 	bltu	r5,r2,118e0 <_free_r+0xe8>
   11a1c:	008000b4 	movhi	r2,2
   11a20:	11620317 	ldw	r5,-30708(r2)
   11a24:	8809883a 	mov	r4,r17
   11a28:	00116d40 	call	116d4 <_malloc_trim_r>
   11a2c:	003fac06 	br	118e0 <_free_r+0xe8>
   11a30:	1145883a 	add	r2,r2,r5
   11a34:	003fd406 	br	11988 <_free_r+0x190>
   11a38:	21400568 	cmpgeui	r5,r4,21
   11a3c:	28000726 	beq	r5,zero,11a5c <_free_r+0x264>
   11a40:	21401568 	cmpgeui	r5,r4,85
   11a44:	2800191e 	bne	r5,zero,11aac <_free_r+0x2b4>
   11a48:	1008d33a 	srli	r4,r2,12
   11a4c:	21c01bc4 	addi	r7,r4,111
   11a50:	380e90fa 	slli	r7,r7,3
   11a54:	21001b84 	addi	r4,r4,110
   11a58:	003fb606 	br	11934 <_free_r+0x13c>
   11a5c:	21c01704 	addi	r7,r4,92
   11a60:	380e90fa 	slli	r7,r7,3
   11a64:	210016c4 	addi	r4,r4,91
   11a68:	003fb206 	br	11934 <_free_r+0x13c>
   11a6c:	30c00515 	stw	r3,20(r6)
   11a70:	30c00415 	stw	r3,16(r6)
   11a74:	11000054 	ori	r4,r2,1
   11a78:	19c00315 	stw	r7,12(r3)
   11a7c:	19c00215 	stw	r7,8(r3)
   11a80:	19000115 	stw	r4,4(r3)
   11a84:	1887883a 	add	r3,r3,r2
   11a88:	18800015 	stw	r2,0(r3)
   11a8c:	003f9406 	br	118e0 <_free_r+0xe8>
   11a90:	2009d0ba 	srai	r4,r4,2
   11a94:	00800044 	movi	r2,1
   11a98:	32000117 	ldw	r8,4(r6)
   11a9c:	1104983a 	sll	r2,r2,r4
   11aa0:	1204b03a 	or	r2,r2,r8
   11aa4:	30800115 	stw	r2,4(r6)
   11aa8:	003fae06 	br	11964 <_free_r+0x16c>
   11aac:	21405568 	cmpgeui	r5,r4,341
   11ab0:	2800051e 	bne	r5,zero,11ac8 <_free_r+0x2d0>
   11ab4:	1008d3fa 	srli	r4,r2,15
   11ab8:	21c01e04 	addi	r7,r4,120
   11abc:	380e90fa 	slli	r7,r7,3
   11ac0:	21001dc4 	addi	r4,r4,119
   11ac4:	003f9b06 	br	11934 <_free_r+0x13c>
   11ac8:	21015568 	cmpgeui	r4,r4,1365
   11acc:	2000051e 	bne	r4,zero,11ae4 <_free_r+0x2ec>
   11ad0:	1008d4ba 	srli	r4,r2,18
   11ad4:	21c01f44 	addi	r7,r4,125
   11ad8:	380e90fa 	slli	r7,r7,3
   11adc:	21001f04 	addi	r4,r4,124
   11ae0:	003f9406 	br	11934 <_free_r+0x13c>
   11ae4:	01c0fe04 	movi	r7,1016
   11ae8:	01001f84 	movi	r4,126
   11aec:	003f9106 	br	11934 <_free_r+0x13c>
   11af0:	11400054 	ori	r5,r2,1
   11af4:	19400115 	stw	r5,4(r3)
   11af8:	20800015 	stw	r2,0(r4)
   11afc:	003f7806 	br	118e0 <_free_r+0xe8>

00011b00 <_malloc_r>:
   11b00:	defff604 	addi	sp,sp,-40
   11b04:	dc400115 	stw	r17,4(sp)
   11b08:	2c4002c4 	addi	r17,r5,11
   11b0c:	dc800215 	stw	r18,8(sp)
   11b10:	dfc00915 	stw	ra,36(sp)
   11b14:	df000815 	stw	fp,32(sp)
   11b18:	ddc00715 	stw	r23,28(sp)
   11b1c:	dd800615 	stw	r22,24(sp)
   11b20:	dd400515 	stw	r21,20(sp)
   11b24:	dd000415 	stw	r20,16(sp)
   11b28:	dcc00315 	stw	r19,12(sp)
   11b2c:	dc000015 	stw	r16,0(sp)
   11b30:	888005e8 	cmpgeui	r2,r17,23
   11b34:	2025883a 	mov	r18,r4
   11b38:	1000261e 	bne	r2,zero,11bd4 <_malloc_r+0xd4>
   11b3c:	29400468 	cmpgeui	r5,r5,17
   11b40:	28008e1e 	bne	r5,zero,11d7c <_malloc_r+0x27c>
   11b44:	001389c0 	call	1389c <__malloc_lock>
   11b48:	04400404 	movi	r17,16
   11b4c:	00800604 	movi	r2,24
   11b50:	01c00084 	movi	r7,2
   11b54:	04c00074 	movhi	r19,1
   11b58:	9cd69104 	addi	r19,r19,23108
   11b5c:	9885883a 	add	r2,r19,r2
   11b60:	14000117 	ldw	r16,4(r2)
   11b64:	10fffe04 	addi	r3,r2,-8
   11b68:	80c0d026 	beq	r16,r3,11eac <_malloc_r+0x3ac>
   11b6c:	80800117 	ldw	r2,4(r16)
   11b70:	81000317 	ldw	r4,12(r16)
   11b74:	81400217 	ldw	r5,8(r16)
   11b78:	00ffff04 	movi	r3,-4
   11b7c:	10c4703a 	and	r2,r2,r3
   11b80:	8085883a 	add	r2,r16,r2
   11b84:	10c00117 	ldw	r3,4(r2)
   11b88:	29000315 	stw	r4,12(r5)
   11b8c:	21400215 	stw	r5,8(r4)
   11b90:	18c00054 	ori	r3,r3,1
   11b94:	10c00115 	stw	r3,4(r2)
   11b98:	9009883a 	mov	r4,r18
   11b9c:	00138c00 	call	138c0 <__malloc_unlock>
   11ba0:	80800204 	addi	r2,r16,8
   11ba4:	dfc00917 	ldw	ra,36(sp)
   11ba8:	df000817 	ldw	fp,32(sp)
   11bac:	ddc00717 	ldw	r23,28(sp)
   11bb0:	dd800617 	ldw	r22,24(sp)
   11bb4:	dd400517 	ldw	r21,20(sp)
   11bb8:	dd000417 	ldw	r20,16(sp)
   11bbc:	dcc00317 	ldw	r19,12(sp)
   11bc0:	dc800217 	ldw	r18,8(sp)
   11bc4:	dc400117 	ldw	r17,4(sp)
   11bc8:	dc000017 	ldw	r16,0(sp)
   11bcc:	dec00a04 	addi	sp,sp,40
   11bd0:	f800283a 	ret
   11bd4:	00bffe04 	movi	r2,-8
   11bd8:	88a2703a 	and	r17,r17,r2
   11bdc:	88006716 	blt	r17,zero,11d7c <_malloc_r+0x27c>
   11be0:	89406636 	bltu	r17,r5,11d7c <_malloc_r+0x27c>
   11be4:	001389c0 	call	1389c <__malloc_lock>
   11be8:	88807e28 	cmpgeui	r2,r17,504
   11bec:	1000f426 	beq	r2,zero,11fc0 <_malloc_r+0x4c0>
   11bf0:	8804d27a 	srli	r2,r17,9
   11bf4:	10006526 	beq	r2,zero,11d8c <_malloc_r+0x28c>
   11bf8:	10c00168 	cmpgeui	r3,r2,5
   11bfc:	1800c81e 	bne	r3,zero,11f20 <_malloc_r+0x420>
   11c00:	8804d1ba 	srli	r2,r17,6
   11c04:	11c00e44 	addi	r7,r2,57
   11c08:	380890fa 	slli	r4,r7,3
   11c0c:	12000e04 	addi	r8,r2,56
   11c10:	04c00074 	movhi	r19,1
   11c14:	9cd69104 	addi	r19,r19,23108
   11c18:	9909883a 	add	r4,r19,r4
   11c1c:	24000117 	ldw	r16,4(r4)
   11c20:	213ffe04 	addi	r4,r4,-8
   11c24:	24000c26 	beq	r4,r16,11c58 <_malloc_r+0x158>
   11c28:	01bfff04 	movi	r6,-4
   11c2c:	00000406 	br	11c40 <_malloc_r+0x140>
   11c30:	81400317 	ldw	r5,12(r16)
   11c34:	1800970e 	bge	r3,zero,11e94 <_malloc_r+0x394>
   11c38:	21400726 	beq	r4,r5,11c58 <_malloc_r+0x158>
   11c3c:	2821883a 	mov	r16,r5
   11c40:	80800117 	ldw	r2,4(r16)
   11c44:	1184703a 	and	r2,r2,r6
   11c48:	1447c83a 	sub	r3,r2,r17
   11c4c:	19400408 	cmpgei	r5,r3,16
   11c50:	283ff726 	beq	r5,zero,11c30 <_malloc_r+0x130>
   11c54:	400f883a 	mov	r7,r8
   11c58:	9c000417 	ldw	r16,16(r19)
   11c5c:	02400074 	movhi	r9,1
   11c60:	4a569304 	addi	r9,r9,23116
   11c64:	82407f26 	beq	r16,r9,11e64 <_malloc_r+0x364>
   11c68:	80800117 	ldw	r2,4(r16)
   11c6c:	00ffff04 	movi	r3,-4
   11c70:	10c4703a 	and	r2,r2,r3
   11c74:	1447c83a 	sub	r3,r2,r17
   11c78:	19000410 	cmplti	r4,r3,16
   11c7c:	2000d326 	beq	r4,zero,11fcc <_malloc_r+0x4cc>
   11c80:	9a400515 	stw	r9,20(r19)
   11c84:	9a400415 	stw	r9,16(r19)
   11c88:	1800c50e 	bge	r3,zero,11fa0 <_malloc_r+0x4a0>
   11c8c:	10c08028 	cmpgeui	r3,r2,512
   11c90:	99400117 	ldw	r5,4(r19)
   11c94:	1800891e 	bne	r3,zero,11ebc <_malloc_r+0x3bc>
   11c98:	1006d0fa 	srli	r3,r2,3
   11c9c:	1008d17a 	srli	r4,r2,5
   11ca0:	18800044 	addi	r2,r3,1
   11ca4:	100490fa 	slli	r2,r2,3
   11ca8:	00c00044 	movi	r3,1
   11cac:	1906983a 	sll	r3,r3,r4
   11cb0:	9885883a 	add	r2,r19,r2
   11cb4:	11000017 	ldw	r4,0(r2)
   11cb8:	28cab03a 	or	r5,r5,r3
   11cbc:	10fffe04 	addi	r3,r2,-8
   11cc0:	80c00315 	stw	r3,12(r16)
   11cc4:	81000215 	stw	r4,8(r16)
   11cc8:	99400115 	stw	r5,4(r19)
   11ccc:	14000015 	stw	r16,0(r2)
   11cd0:	24000315 	stw	r16,12(r4)
   11cd4:	3805d0ba 	srai	r2,r7,2
   11cd8:	01000044 	movi	r4,1
   11cdc:	2088983a 	sll	r4,r4,r2
   11ce0:	29002e36 	bltu	r5,r4,11d9c <_malloc_r+0x29c>
   11ce4:	2144703a 	and	r2,r4,r5
   11ce8:	10000a1e 	bne	r2,zero,11d14 <_malloc_r+0x214>
   11cec:	2109883a 	add	r4,r4,r4
   11cf0:	00bfff04 	movi	r2,-4
   11cf4:	3884703a 	and	r2,r7,r2
   11cf8:	2146703a 	and	r3,r4,r5
   11cfc:	11c00104 	addi	r7,r2,4
   11d00:	1800041e 	bne	r3,zero,11d14 <_malloc_r+0x214>
   11d04:	2109883a 	add	r4,r4,r4
   11d08:	2144703a 	and	r2,r4,r5
   11d0c:	39c00104 	addi	r7,r7,4
   11d10:	103ffc26 	beq	r2,zero,11d04 <_malloc_r+0x204>
   11d14:	02bfff04 	movi	r10,-4
   11d18:	381690fa 	slli	r11,r7,3
   11d1c:	3819883a 	mov	r12,r7
   11d20:	9ad7883a 	add	r11,r19,r11
   11d24:	5811883a 	mov	r8,r11
   11d28:	40800317 	ldw	r2,12(r8)
   11d2c:	40808526 	beq	r8,r2,11f44 <_malloc_r+0x444>
   11d30:	10c00117 	ldw	r3,4(r2)
   11d34:	1021883a 	mov	r16,r2
   11d38:	10800317 	ldw	r2,12(r2)
   11d3c:	1a86703a 	and	r3,r3,r10
   11d40:	1c4bc83a 	sub	r5,r3,r17
   11d44:	29800410 	cmplti	r6,r5,16
   11d48:	30008326 	beq	r6,zero,11f58 <_malloc_r+0x458>
   11d4c:	283ff716 	blt	r5,zero,11d2c <_malloc_r+0x22c>
   11d50:	80c7883a 	add	r3,r16,r3
   11d54:	19400117 	ldw	r5,4(r3)
   11d58:	81800217 	ldw	r6,8(r16)
   11d5c:	9009883a 	mov	r4,r18
   11d60:	29400054 	ori	r5,r5,1
   11d64:	19400115 	stw	r5,4(r3)
   11d68:	30800315 	stw	r2,12(r6)
   11d6c:	11800215 	stw	r6,8(r2)
   11d70:	00138c00 	call	138c0 <__malloc_unlock>
   11d74:	80800204 	addi	r2,r16,8
   11d78:	003f8a06 	br	11ba4 <_malloc_r+0xa4>
   11d7c:	00800304 	movi	r2,12
   11d80:	90800015 	stw	r2,0(r18)
   11d84:	0005883a 	mov	r2,zero
   11d88:	003f8606 	br	11ba4 <_malloc_r+0xa4>
   11d8c:	01008004 	movi	r4,512
   11d90:	01c01004 	movi	r7,64
   11d94:	02000fc4 	movi	r8,63
   11d98:	003f9d06 	br	11c10 <_malloc_r+0x110>
   11d9c:	9c000217 	ldw	r16,8(r19)
   11da0:	00bfff04 	movi	r2,-4
   11da4:	80c00117 	ldw	r3,4(r16)
   11da8:	18aa703a 	and	r21,r3,r2
   11dac:	ac400336 	bltu	r21,r17,11dbc <_malloc_r+0x2bc>
   11db0:	ac47c83a 	sub	r3,r21,r17
   11db4:	18800408 	cmpgei	r2,r3,16
   11db8:	10002c1e 	bne	r2,zero,11e6c <_malloc_r+0x36c>
   11dbc:	00800074 	movhi	r2,1
   11dc0:	109c1717 	ldw	r2,28764(r2)
   11dc4:	00c000b4 	movhi	r3,2
   11dc8:	1d220317 	ldw	r20,-30708(r3)
   11dcc:	10bfffd8 	cmpnei	r2,r2,-1
   11dd0:	856f883a 	add	r23,r16,r21
   11dd4:	8d29883a 	add	r20,r17,r20
   11dd8:	1000eb26 	beq	r2,zero,12188 <_malloc_r+0x688>
   11ddc:	a50403c4 	addi	r20,r20,4111
   11de0:	00bc0004 	movi	r2,-4096
   11de4:	a0a8703a 	and	r20,r20,r2
   11de8:	a00b883a 	mov	r5,r20
   11dec:	9009883a 	mov	r4,r18
   11df0:	0012f900 	call	12f90 <_sbrk_r>
   11df4:	102d883a 	mov	r22,r2
   11df8:	10bfffd8 	cmpnei	r2,r2,-1
   11dfc:	10008826 	beq	r2,zero,12020 <_malloc_r+0x520>
   11e00:	b5c08636 	bltu	r22,r23,1201c <_malloc_r+0x51c>
   11e04:	008000b4 	movhi	r2,2
   11e08:	11225b17 	ldw	r4,-30356(r2)
   11e0c:	a109883a 	add	r4,r20,r4
   11e10:	11225b15 	stw	r4,-30356(r2)
   11e14:	2007883a 	mov	r3,r4
   11e18:	bd80a91e 	bne	r23,r22,120c0 <_malloc_r+0x5c0>
   11e1c:	b083ffcc 	andi	r2,r22,4095
   11e20:	1000a71e 	bne	r2,zero,120c0 <_malloc_r+0x5c0>
   11e24:	9d800217 	ldw	r22,8(r19)
   11e28:	ad07883a 	add	r3,r21,r20
   11e2c:	18c00054 	ori	r3,r3,1
   11e30:	b0c00115 	stw	r3,4(r22)
   11e34:	008000b4 	movhi	r2,2
   11e38:	10a20217 	ldw	r2,-30712(r2)
   11e3c:	1100022e 	bgeu	r2,r4,11e48 <_malloc_r+0x348>
   11e40:	008000b4 	movhi	r2,2
   11e44:	11220215 	stw	r4,-30712(r2)
   11e48:	008000b4 	movhi	r2,2
   11e4c:	10a20117 	ldw	r2,-30716(r2)
   11e50:	1100022e 	bgeu	r2,r4,11e5c <_malloc_r+0x35c>
   11e54:	008000b4 	movhi	r2,2
   11e58:	11220115 	stw	r4,-30716(r2)
   11e5c:	b021883a 	mov	r16,r22
   11e60:	00007106 	br	12028 <_malloc_r+0x528>
   11e64:	99400117 	ldw	r5,4(r19)
   11e68:	003f9a06 	br	11cd4 <_malloc_r+0x1d4>
   11e6c:	88800054 	ori	r2,r17,1
   11e70:	80800115 	stw	r2,4(r16)
   11e74:	8463883a 	add	r17,r16,r17
   11e78:	9c400215 	stw	r17,8(r19)
   11e7c:	18c00054 	ori	r3,r3,1
   11e80:	88c00115 	stw	r3,4(r17)
   11e84:	9009883a 	mov	r4,r18
   11e88:	00138c00 	call	138c0 <__malloc_unlock>
   11e8c:	80800204 	addi	r2,r16,8
   11e90:	003f4406 	br	11ba4 <_malloc_r+0xa4>
   11e94:	81000217 	ldw	r4,8(r16)
   11e98:	8085883a 	add	r2,r16,r2
   11e9c:	10c00117 	ldw	r3,4(r2)
   11ea0:	21400315 	stw	r5,12(r4)
   11ea4:	29000215 	stw	r4,8(r5)
   11ea8:	003f3906 	br	11b90 <_malloc_r+0x90>
   11eac:	14000317 	ldw	r16,12(r2)
   11eb0:	143f2e1e 	bne	r2,r16,11b6c <_malloc_r+0x6c>
   11eb4:	39c00084 	addi	r7,r7,2
   11eb8:	003f6706 	br	11c58 <_malloc_r+0x158>
   11ebc:	1006d27a 	srli	r3,r2,9
   11ec0:	19000168 	cmpgeui	r4,r3,5
   11ec4:	20005026 	beq	r4,zero,12008 <_malloc_r+0x508>
   11ec8:	19000568 	cmpgeui	r4,r3,21
   11ecc:	2000c01e 	bne	r4,zero,121d0 <_malloc_r+0x6d0>
   11ed0:	19801704 	addi	r6,r3,92
   11ed4:	300c90fa 	slli	r6,r6,3
   11ed8:	190016c4 	addi	r4,r3,91
   11edc:	998d883a 	add	r6,r19,r6
   11ee0:	30c00017 	ldw	r3,0(r6)
   11ee4:	31bffe04 	addi	r6,r6,-8
   11ee8:	30c0a926 	beq	r6,r3,12190 <_malloc_r+0x690>
   11eec:	023fff04 	movi	r8,-4
   11ef0:	00000206 	br	11efc <_malloc_r+0x3fc>
   11ef4:	18c00217 	ldw	r3,8(r3)
   11ef8:	30c00326 	beq	r6,r3,11f08 <_malloc_r+0x408>
   11efc:	19000117 	ldw	r4,4(r3)
   11f00:	2208703a 	and	r4,r4,r8
   11f04:	113ffb36 	bltu	r2,r4,11ef4 <_malloc_r+0x3f4>
   11f08:	19800317 	ldw	r6,12(r3)
   11f0c:	81800315 	stw	r6,12(r16)
   11f10:	80c00215 	stw	r3,8(r16)
   11f14:	34000215 	stw	r16,8(r6)
   11f18:	1c000315 	stw	r16,12(r3)
   11f1c:	003f6d06 	br	11cd4 <_malloc_r+0x1d4>
   11f20:	10c00568 	cmpgeui	r3,r2,21
   11f24:	18004926 	beq	r3,zero,1204c <_malloc_r+0x54c>
   11f28:	10c01568 	cmpgeui	r3,r2,85
   11f2c:	1800af1e 	bne	r3,zero,121ec <_malloc_r+0x6ec>
   11f30:	8804d33a 	srli	r2,r17,12
   11f34:	11c01bc4 	addi	r7,r2,111
   11f38:	380890fa 	slli	r4,r7,3
   11f3c:	12001b84 	addi	r8,r2,110
   11f40:	003f3306 	br	11c10 <_malloc_r+0x110>
   11f44:	63000044 	addi	r12,r12,1
   11f48:	608000cc 	andi	r2,r12,3
   11f4c:	42000204 	addi	r8,r8,8
   11f50:	103f751e 	bne	r2,zero,11d28 <_malloc_r+0x228>
   11f54:	00004406 	br	12068 <_malloc_r+0x568>
   11f58:	81000217 	ldw	r4,8(r16)
   11f5c:	89800054 	ori	r6,r17,1
   11f60:	81800115 	stw	r6,4(r16)
   11f64:	20800315 	stw	r2,12(r4)
   11f68:	11000215 	stw	r4,8(r2)
   11f6c:	8463883a 	add	r17,r16,r17
   11f70:	9c400515 	stw	r17,20(r19)
   11f74:	9c400415 	stw	r17,16(r19)
   11f78:	28800054 	ori	r2,r5,1
   11f7c:	88800115 	stw	r2,4(r17)
   11f80:	8a400315 	stw	r9,12(r17)
   11f84:	8a400215 	stw	r9,8(r17)
   11f88:	80c7883a 	add	r3,r16,r3
   11f8c:	19400015 	stw	r5,0(r3)
   11f90:	9009883a 	mov	r4,r18
   11f94:	00138c00 	call	138c0 <__malloc_unlock>
   11f98:	80800204 	addi	r2,r16,8
   11f9c:	003f0106 	br	11ba4 <_malloc_r+0xa4>
   11fa0:	8085883a 	add	r2,r16,r2
   11fa4:	10c00117 	ldw	r3,4(r2)
   11fa8:	9009883a 	mov	r4,r18
   11fac:	18c00054 	ori	r3,r3,1
   11fb0:	10c00115 	stw	r3,4(r2)
   11fb4:	00138c00 	call	138c0 <__malloc_unlock>
   11fb8:	80800204 	addi	r2,r16,8
   11fbc:	003ef906 	br	11ba4 <_malloc_r+0xa4>
   11fc0:	880ed0fa 	srli	r7,r17,3
   11fc4:	88800204 	addi	r2,r17,8
   11fc8:	003ee206 	br	11b54 <_malloc_r+0x54>
   11fcc:	89000054 	ori	r4,r17,1
   11fd0:	81000115 	stw	r4,4(r16)
   11fd4:	8463883a 	add	r17,r16,r17
   11fd8:	9c400515 	stw	r17,20(r19)
   11fdc:	9c400415 	stw	r17,16(r19)
   11fe0:	19000054 	ori	r4,r3,1
   11fe4:	89000115 	stw	r4,4(r17)
   11fe8:	8085883a 	add	r2,r16,r2
   11fec:	8a400315 	stw	r9,12(r17)
   11ff0:	8a400215 	stw	r9,8(r17)
   11ff4:	10c00015 	stw	r3,0(r2)
   11ff8:	9009883a 	mov	r4,r18
   11ffc:	00138c00 	call	138c0 <__malloc_unlock>
   12000:	80800204 	addi	r2,r16,8
   12004:	003ee706 	br	11ba4 <_malloc_r+0xa4>
   12008:	1006d1ba 	srli	r3,r2,6
   1200c:	19800e44 	addi	r6,r3,57
   12010:	300c90fa 	slli	r6,r6,3
   12014:	19000e04 	addi	r4,r3,56
   12018:	003fb006 	br	11edc <_malloc_r+0x3dc>
   1201c:	84c02426 	beq	r16,r19,120b0 <_malloc_r+0x5b0>
   12020:	9c000217 	ldw	r16,8(r19)
   12024:	80c00117 	ldw	r3,4(r16)
   12028:	00bfff04 	movi	r2,-4
   1202c:	1884703a 	and	r2,r3,r2
   12030:	1447c83a 	sub	r3,r2,r17
   12034:	14400236 	bltu	r2,r17,12040 <_malloc_r+0x540>
   12038:	18800408 	cmpgei	r2,r3,16
   1203c:	103f8b1e 	bne	r2,zero,11e6c <_malloc_r+0x36c>
   12040:	9009883a 	mov	r4,r18
   12044:	00138c00 	call	138c0 <__malloc_unlock>
   12048:	003f4e06 	br	11d84 <_malloc_r+0x284>
   1204c:	11c01704 	addi	r7,r2,92
   12050:	380890fa 	slli	r4,r7,3
   12054:	120016c4 	addi	r8,r2,91
   12058:	003eed06 	br	11c10 <_malloc_r+0x110>
   1205c:	58800217 	ldw	r2,8(r11)
   12060:	39ffffc4 	addi	r7,r7,-1
   12064:	12c0961e 	bne	r2,r11,122c0 <_malloc_r+0x7c0>
   12068:	388000cc 	andi	r2,r7,3
   1206c:	5afffe04 	addi	r11,r11,-8
   12070:	103ffa1e 	bne	r2,zero,1205c <_malloc_r+0x55c>
   12074:	98c00117 	ldw	r3,4(r19)
   12078:	0104303a 	nor	r2,zero,r4
   1207c:	10c4703a 	and	r2,r2,r3
   12080:	98800115 	stw	r2,4(r19)
   12084:	2109883a 	add	r4,r4,r4
   12088:	113f4436 	bltu	r2,r4,11d9c <_malloc_r+0x29c>
   1208c:	203f4326 	beq	r4,zero,11d9c <_malloc_r+0x29c>
   12090:	2086703a 	and	r3,r4,r2
   12094:	1800041e 	bne	r3,zero,120a8 <_malloc_r+0x5a8>
   12098:	2109883a 	add	r4,r4,r4
   1209c:	2086703a 	and	r3,r4,r2
   120a0:	63000104 	addi	r12,r12,4
   120a4:	183ffc26 	beq	r3,zero,12098 <_malloc_r+0x598>
   120a8:	600f883a 	mov	r7,r12
   120ac:	003f1a06 	br	11d18 <_malloc_r+0x218>
   120b0:	008000b4 	movhi	r2,2
   120b4:	10e25b17 	ldw	r3,-30356(r2)
   120b8:	a0c7883a 	add	r3,r20,r3
   120bc:	10e25b15 	stw	r3,-30356(r2)
   120c0:	00800074 	movhi	r2,1
   120c4:	109c1717 	ldw	r2,28764(r2)
   120c8:	10bfffd8 	cmpnei	r2,r2,-1
   120cc:	10004e26 	beq	r2,zero,12208 <_malloc_r+0x708>
   120d0:	b5c5c83a 	sub	r2,r22,r23
   120d4:	10c5883a 	add	r2,r2,r3
   120d8:	00c000b4 	movhi	r3,2
   120dc:	18a25b15 	stw	r2,-30356(r3)
   120e0:	b70001cc 	andi	fp,r22,7
   120e4:	e0003026 	beq	fp,zero,121a8 <_malloc_r+0x6a8>
   120e8:	b72dc83a 	sub	r22,r22,fp
   120ec:	b5800204 	addi	r22,r22,8
   120f0:	01040204 	movi	r4,4104
   120f4:	2709c83a 	sub	r4,r4,fp
   120f8:	b529883a 	add	r20,r22,r20
   120fc:	2509c83a 	sub	r4,r4,r20
   12100:	25c3ffcc 	andi	r23,r4,4095
   12104:	b80b883a 	mov	r5,r23
   12108:	9009883a 	mov	r4,r18
   1210c:	0012f900 	call	12f90 <_sbrk_r>
   12110:	10ffffe0 	cmpeqi	r3,r2,-1
   12114:	1800501e 	bne	r3,zero,12258 <_malloc_r+0x758>
   12118:	1585c83a 	sub	r2,r2,r22
   1211c:	15e9883a 	add	r20,r2,r23
   12120:	008000b4 	movhi	r2,2
   12124:	10a25b17 	ldw	r2,-30356(r2)
   12128:	9d800215 	stw	r22,8(r19)
   1212c:	a0c00054 	ori	r3,r20,1
   12130:	b889883a 	add	r4,r23,r2
   12134:	008000b4 	movhi	r2,2
   12138:	11225b15 	stw	r4,-30356(r2)
   1213c:	b0c00115 	stw	r3,4(r22)
   12140:	84ff3c26 	beq	r16,r19,11e34 <_malloc_r+0x334>
   12144:	a8800428 	cmpgeui	r2,r21,16
   12148:	10003226 	beq	r2,zero,12214 <_malloc_r+0x714>
   1214c:	80800117 	ldw	r2,4(r16)
   12150:	017ffe04 	movi	r5,-8
   12154:	a8fffd04 	addi	r3,r21,-12
   12158:	1946703a 	and	r3,r3,r5
   1215c:	1080004c 	andi	r2,r2,1
   12160:	10c4b03a 	or	r2,r2,r3
   12164:	80800115 	stw	r2,4(r16)
   12168:	01400144 	movi	r5,5
   1216c:	80c5883a 	add	r2,r16,r3
   12170:	11400115 	stw	r5,4(r2)
   12174:	11400215 	stw	r5,8(r2)
   12178:	18c00428 	cmpgeui	r3,r3,16
   1217c:	18003b1e 	bne	r3,zero,1226c <_malloc_r+0x76c>
   12180:	b0c00117 	ldw	r3,4(r22)
   12184:	003f2b06 	br	11e34 <_malloc_r+0x334>
   12188:	a5000404 	addi	r20,r20,16
   1218c:	003f1606 	br	11de8 <_malloc_r+0x2e8>
   12190:	2009d0ba 	srai	r4,r4,2
   12194:	00800044 	movi	r2,1
   12198:	1104983a 	sll	r2,r2,r4
   1219c:	288ab03a 	or	r5,r5,r2
   121a0:	99400115 	stw	r5,4(r19)
   121a4:	003f5906 	br	11f0c <_malloc_r+0x40c>
   121a8:	b509883a 	add	r4,r22,r20
   121ac:	0109c83a 	sub	r4,zero,r4
   121b0:	25c3ffcc 	andi	r23,r4,4095
   121b4:	b80b883a 	mov	r5,r23
   121b8:	9009883a 	mov	r4,r18
   121bc:	0012f900 	call	12f90 <_sbrk_r>
   121c0:	10ffffe0 	cmpeqi	r3,r2,-1
   121c4:	183fd426 	beq	r3,zero,12118 <_malloc_r+0x618>
   121c8:	002f883a 	mov	r23,zero
   121cc:	003fd406 	br	12120 <_malloc_r+0x620>
   121d0:	19001568 	cmpgeui	r4,r3,85
   121d4:	2000121e 	bne	r4,zero,12220 <_malloc_r+0x720>
   121d8:	1006d33a 	srli	r3,r2,12
   121dc:	19801bc4 	addi	r6,r3,111
   121e0:	300c90fa 	slli	r6,r6,3
   121e4:	19001b84 	addi	r4,r3,110
   121e8:	003f3c06 	br	11edc <_malloc_r+0x3dc>
   121ec:	10c05568 	cmpgeui	r3,r2,341
   121f0:	1800121e 	bne	r3,zero,1223c <_malloc_r+0x73c>
   121f4:	8804d3fa 	srli	r2,r17,15
   121f8:	11c01e04 	addi	r7,r2,120
   121fc:	380890fa 	slli	r4,r7,3
   12200:	12001dc4 	addi	r8,r2,119
   12204:	003e8206 	br	11c10 <_malloc_r+0x110>
   12208:	00800074 	movhi	r2,1
   1220c:	159c1715 	stw	r22,28764(r2)
   12210:	003fb306 	br	120e0 <_malloc_r+0x5e0>
   12214:	00800044 	movi	r2,1
   12218:	b0800115 	stw	r2,4(r22)
   1221c:	003f8806 	br	12040 <_malloc_r+0x540>
   12220:	19005568 	cmpgeui	r4,r3,341
   12224:	2000181e 	bne	r4,zero,12288 <_malloc_r+0x788>
   12228:	1006d3fa 	srli	r3,r2,15
   1222c:	19801e04 	addi	r6,r3,120
   12230:	300c90fa 	slli	r6,r6,3
   12234:	19001dc4 	addi	r4,r3,119
   12238:	003f2806 	br	11edc <_malloc_r+0x3dc>
   1223c:	10815568 	cmpgeui	r2,r2,1365
   12240:	1000181e 	bne	r2,zero,122a4 <_malloc_r+0x7a4>
   12244:	8804d4ba 	srli	r2,r17,18
   12248:	11c01f44 	addi	r7,r2,125
   1224c:	380890fa 	slli	r4,r7,3
   12250:	12001f04 	addi	r8,r2,124
   12254:	003e6e06 	br	11c10 <_malloc_r+0x110>
   12258:	e73ffe04 	addi	fp,fp,-8
   1225c:	a729883a 	add	r20,r20,fp
   12260:	a5a9c83a 	sub	r20,r20,r22
   12264:	002f883a 	mov	r23,zero
   12268:	003fad06 	br	12120 <_malloc_r+0x620>
   1226c:	9009883a 	mov	r4,r18
   12270:	81400204 	addi	r5,r16,8
   12274:	00117f80 	call	117f8 <_free_r>
   12278:	008000b4 	movhi	r2,2
   1227c:	9d800217 	ldw	r22,8(r19)
   12280:	11225b17 	ldw	r4,-30356(r2)
   12284:	003fbe06 	br	12180 <_malloc_r+0x680>
   12288:	18c15568 	cmpgeui	r3,r3,1365
   1228c:	1800091e 	bne	r3,zero,122b4 <_malloc_r+0x7b4>
   12290:	1006d4ba 	srli	r3,r2,18
   12294:	19801f44 	addi	r6,r3,125
   12298:	300c90fa 	slli	r6,r6,3
   1229c:	19001f04 	addi	r4,r3,124
   122a0:	003f0e06 	br	11edc <_malloc_r+0x3dc>
   122a4:	0100fe04 	movi	r4,1016
   122a8:	01c01fc4 	movi	r7,127
   122ac:	02001f84 	movi	r8,126
   122b0:	003e5706 	br	11c10 <_malloc_r+0x110>
   122b4:	0180fe04 	movi	r6,1016
   122b8:	01001f84 	movi	r4,126
   122bc:	003f0706 	br	11edc <_malloc_r+0x3dc>
   122c0:	98800117 	ldw	r2,4(r19)
   122c4:	003f6f06 	br	12084 <_malloc_r+0x584>

000122c8 <_realloc_r>:
   122c8:	defff604 	addi	sp,sp,-40
   122cc:	dcc00315 	stw	r19,12(sp)
   122d0:	dfc00915 	stw	ra,36(sp)
   122d4:	df000815 	stw	fp,32(sp)
   122d8:	ddc00715 	stw	r23,28(sp)
   122dc:	dd800615 	stw	r22,24(sp)
   122e0:	dd400515 	stw	r21,20(sp)
   122e4:	dd000415 	stw	r20,16(sp)
   122e8:	dc800215 	stw	r18,8(sp)
   122ec:	dc400115 	stw	r17,4(sp)
   122f0:	dc000015 	stw	r16,0(sp)
   122f4:	3027883a 	mov	r19,r6
   122f8:	28008a26 	beq	r5,zero,12524 <_realloc_r+0x25c>
   122fc:	2821883a 	mov	r16,r5
   12300:	2029883a 	mov	r20,r4
   12304:	001389c0 	call	1389c <__malloc_lock>
   12308:	80bfff17 	ldw	r2,-4(r16)
   1230c:	9c4002c4 	addi	r17,r19,11
   12310:	04bfff04 	movi	r18,-4
   12314:	88c005f0 	cmpltui	r3,r17,23
   12318:	857ffe04 	addi	r21,r16,-8
   1231c:	14a4703a 	and	r18,r2,r18
   12320:	18005a1e 	bne	r3,zero,1248c <_realloc_r+0x1c4>
   12324:	00fffe04 	movi	r3,-8
   12328:	88e2703a 	and	r17,r17,r3
   1232c:	88005916 	blt	r17,zero,12494 <_realloc_r+0x1cc>
   12330:	8cc05836 	bltu	r17,r19,12494 <_realloc_r+0x1cc>
   12334:	94403a0e 	bge	r18,r17,12420 <_realloc_r+0x158>
   12338:	05800074 	movhi	r22,1
   1233c:	b5969104 	addi	r22,r22,23108
   12340:	b1800217 	ldw	r6,8(r22)
   12344:	ac8b883a 	add	r5,r21,r18
   12348:	28c00117 	ldw	r3,4(r5)
   1234c:	31408e26 	beq	r6,r5,12588 <_realloc_r+0x2c0>
   12350:	013fff84 	movi	r4,-2
   12354:	1908703a 	and	r4,r3,r4
   12358:	2909883a 	add	r4,r5,r4
   1235c:	21000117 	ldw	r4,4(r4)
   12360:	2100004c 	andi	r4,r4,1
   12364:	20004f1e 	bne	r4,zero,124a4 <_realloc_r+0x1dc>
   12368:	013fff04 	movi	r4,-4
   1236c:	1906703a 	and	r3,r3,r4
   12370:	90c9883a 	add	r4,r18,r3
   12374:	2440ca0e 	bge	r4,r17,126a0 <_realloc_r+0x3d8>
   12378:	1080004c 	andi	r2,r2,1
   1237c:	10004b1e 	bne	r2,zero,124ac <_realloc_r+0x1e4>
   12380:	85fffe17 	ldw	r23,-8(r16)
   12384:	013fff04 	movi	r4,-4
   12388:	adefc83a 	sub	r23,r21,r23
   1238c:	b8800117 	ldw	r2,4(r23)
   12390:	1104703a 	and	r2,r2,r4
   12394:	28000426 	beq	r5,zero,123a8 <_realloc_r+0xe0>
   12398:	90b9883a 	add	fp,r18,r2
   1239c:	e0f9883a 	add	fp,fp,r3
   123a0:	3140c926 	beq	r6,r5,126c8 <_realloc_r+0x400>
   123a4:	e4409e0e 	bge	fp,r17,12620 <_realloc_r+0x358>
   123a8:	b8004026 	beq	r23,zero,124ac <_realloc_r+0x1e4>
   123ac:	90ad883a 	add	r22,r18,r2
   123b0:	b4403e16 	blt	r22,r17,124ac <_realloc_r+0x1e4>
   123b4:	b8800317 	ldw	r2,12(r23)
   123b8:	b8c00217 	ldw	r3,8(r23)
   123bc:	91bfff04 	addi	r6,r18,-4
   123c0:	31400968 	cmpgeui	r5,r6,37
   123c4:	18800315 	stw	r2,12(r3)
   123c8:	10c00215 	stw	r3,8(r2)
   123cc:	bc800204 	addi	r18,r23,8
   123d0:	2800ee1e 	bne	r5,zero,1278c <_realloc_r+0x4c4>
   123d4:	30800530 	cmpltui	r2,r6,20
   123d8:	1000ea1e 	bne	r2,zero,12784 <_realloc_r+0x4bc>
   123dc:	80c00017 	ldw	r3,0(r16)
   123e0:	30800728 	cmpgeui	r2,r6,28
   123e4:	b8c00215 	stw	r3,8(r23)
   123e8:	80c00117 	ldw	r3,4(r16)
   123ec:	b8c00315 	stw	r3,12(r23)
   123f0:	1000fa1e 	bne	r2,zero,127dc <_realloc_r+0x514>
   123f4:	84000204 	addi	r16,r16,8
   123f8:	b8800404 	addi	r2,r23,16
   123fc:	80c00017 	ldw	r3,0(r16)
   12400:	10c00015 	stw	r3,0(r2)
   12404:	80c00117 	ldw	r3,4(r16)
   12408:	10c00115 	stw	r3,4(r2)
   1240c:	80c00217 	ldw	r3,8(r16)
   12410:	10c00215 	stw	r3,8(r2)
   12414:	9021883a 	mov	r16,r18
   12418:	b82b883a 	mov	r21,r23
   1241c:	b025883a 	mov	r18,r22
   12420:	a8800117 	ldw	r2,4(r21)
   12424:	9449c83a 	sub	r4,r18,r17
   12428:	21400430 	cmpltui	r5,r4,16
   1242c:	1080004c 	andi	r2,r2,1
   12430:	ac87883a 	add	r3,r21,r18
   12434:	28004826 	beq	r5,zero,12558 <_realloc_r+0x290>
   12438:	9084b03a 	or	r2,r18,r2
   1243c:	a8800115 	stw	r2,4(r21)
   12440:	18800117 	ldw	r2,4(r3)
   12444:	10800054 	ori	r2,r2,1
   12448:	18800115 	stw	r2,4(r3)
   1244c:	a009883a 	mov	r4,r20
   12450:	00138c00 	call	138c0 <__malloc_unlock>
   12454:	8027883a 	mov	r19,r16
   12458:	9805883a 	mov	r2,r19
   1245c:	dfc00917 	ldw	ra,36(sp)
   12460:	df000817 	ldw	fp,32(sp)
   12464:	ddc00717 	ldw	r23,28(sp)
   12468:	dd800617 	ldw	r22,24(sp)
   1246c:	dd400517 	ldw	r21,20(sp)
   12470:	dd000417 	ldw	r20,16(sp)
   12474:	dcc00317 	ldw	r19,12(sp)
   12478:	dc800217 	ldw	r18,8(sp)
   1247c:	dc400117 	ldw	r17,4(sp)
   12480:	dc000017 	ldw	r16,0(sp)
   12484:	dec00a04 	addi	sp,sp,40
   12488:	f800283a 	ret
   1248c:	04400404 	movi	r17,16
   12490:	8cffa82e 	bgeu	r17,r19,12334 <_realloc_r+0x6c>
   12494:	00800304 	movi	r2,12
   12498:	a0800015 	stw	r2,0(r20)
   1249c:	0027883a 	mov	r19,zero
   124a0:	003fed06 	br	12458 <_realloc_r+0x190>
   124a4:	1080004c 	andi	r2,r2,1
   124a8:	10004e26 	beq	r2,zero,125e4 <_realloc_r+0x31c>
   124ac:	980b883a 	mov	r5,r19
   124b0:	a009883a 	mov	r4,r20
   124b4:	0011b000 	call	11b00 <_malloc_r>
   124b8:	1027883a 	mov	r19,r2
   124bc:	1000bd26 	beq	r2,zero,127b4 <_realloc_r+0x4ec>
   124c0:	80bfff17 	ldw	r2,-4(r16)
   124c4:	013fff84 	movi	r4,-2
   124c8:	98fffe04 	addi	r3,r19,-8
   124cc:	1104703a 	and	r2,r2,r4
   124d0:	a885883a 	add	r2,r21,r2
   124d4:	10c03e26 	beq	r2,r3,125d0 <_realloc_r+0x308>
   124d8:	91bfff04 	addi	r6,r18,-4
   124dc:	30800968 	cmpgeui	r2,r6,37
   124e0:	1000751e 	bne	r2,zero,126b8 <_realloc_r+0x3f0>
   124e4:	30800530 	cmpltui	r2,r6,20
   124e8:	10004426 	beq	r2,zero,125fc <_realloc_r+0x334>
   124ec:	9805883a 	mov	r2,r19
   124f0:	8007883a 	mov	r3,r16
   124f4:	19000017 	ldw	r4,0(r3)
   124f8:	11000015 	stw	r4,0(r2)
   124fc:	19000117 	ldw	r4,4(r3)
   12500:	11000115 	stw	r4,4(r2)
   12504:	18c00217 	ldw	r3,8(r3)
   12508:	10c00215 	stw	r3,8(r2)
   1250c:	a009883a 	mov	r4,r20
   12510:	800b883a 	mov	r5,r16
   12514:	00117f80 	call	117f8 <_free_r>
   12518:	a009883a 	mov	r4,r20
   1251c:	00138c00 	call	138c0 <__malloc_unlock>
   12520:	003fcd06 	br	12458 <_realloc_r+0x190>
   12524:	300b883a 	mov	r5,r6
   12528:	dfc00917 	ldw	ra,36(sp)
   1252c:	df000817 	ldw	fp,32(sp)
   12530:	ddc00717 	ldw	r23,28(sp)
   12534:	dd800617 	ldw	r22,24(sp)
   12538:	dd400517 	ldw	r21,20(sp)
   1253c:	dd000417 	ldw	r20,16(sp)
   12540:	dcc00317 	ldw	r19,12(sp)
   12544:	dc800217 	ldw	r18,8(sp)
   12548:	dc400117 	ldw	r17,4(sp)
   1254c:	dc000017 	ldw	r16,0(sp)
   12550:	dec00a04 	addi	sp,sp,40
   12554:	0011b001 	jmpi	11b00 <_malloc_r>
   12558:	8884b03a 	or	r2,r17,r2
   1255c:	a8800115 	stw	r2,4(r21)
   12560:	ac4b883a 	add	r5,r21,r17
   12564:	21000054 	ori	r4,r4,1
   12568:	29000115 	stw	r4,4(r5)
   1256c:	18800117 	ldw	r2,4(r3)
   12570:	29400204 	addi	r5,r5,8
   12574:	a009883a 	mov	r4,r20
   12578:	10800054 	ori	r2,r2,1
   1257c:	18800115 	stw	r2,4(r3)
   12580:	00117f80 	call	117f8 <_free_r>
   12584:	003fb106 	br	1244c <_realloc_r+0x184>
   12588:	013fff04 	movi	r4,-4
   1258c:	1906703a 	and	r3,r3,r4
   12590:	1c89883a 	add	r4,r3,r18
   12594:	89c00404 	addi	r7,r17,16
   12598:	21ff7716 	blt	r4,r7,12378 <_realloc_r+0xb0>
   1259c:	ac6b883a 	add	r21,r21,r17
   125a0:	2445c83a 	sub	r2,r4,r17
   125a4:	b5400215 	stw	r21,8(r22)
   125a8:	10800054 	ori	r2,r2,1
   125ac:	a8800115 	stw	r2,4(r21)
   125b0:	80bfff17 	ldw	r2,-4(r16)
   125b4:	a009883a 	mov	r4,r20
   125b8:	8027883a 	mov	r19,r16
   125bc:	1080004c 	andi	r2,r2,1
   125c0:	1444b03a 	or	r2,r2,r17
   125c4:	80bfff15 	stw	r2,-4(r16)
   125c8:	00138c00 	call	138c0 <__malloc_unlock>
   125cc:	003fa206 	br	12458 <_realloc_r+0x190>
   125d0:	98bfff17 	ldw	r2,-4(r19)
   125d4:	00ffff04 	movi	r3,-4
   125d8:	10c4703a 	and	r2,r2,r3
   125dc:	90a5883a 	add	r18,r18,r2
   125e0:	003f8f06 	br	12420 <_realloc_r+0x158>
   125e4:	85fffe17 	ldw	r23,-8(r16)
   125e8:	00ffff04 	movi	r3,-4
   125ec:	adefc83a 	sub	r23,r21,r23
   125f0:	b8800117 	ldw	r2,4(r23)
   125f4:	10c4703a 	and	r2,r2,r3
   125f8:	003f6b06 	br	123a8 <_realloc_r+0xe0>
   125fc:	80c00017 	ldw	r3,0(r16)
   12600:	30800728 	cmpgeui	r2,r6,28
   12604:	98c00015 	stw	r3,0(r19)
   12608:	80c00117 	ldw	r3,4(r16)
   1260c:	98c00115 	stw	r3,4(r19)
   12610:	1000531e 	bne	r2,zero,12760 <_realloc_r+0x498>
   12614:	80c00204 	addi	r3,r16,8
   12618:	98800204 	addi	r2,r19,8
   1261c:	003fb506 	br	124f4 <_realloc_r+0x22c>
   12620:	28800317 	ldw	r2,12(r5)
   12624:	28c00217 	ldw	r3,8(r5)
   12628:	91bfff04 	addi	r6,r18,-4
   1262c:	31400968 	cmpgeui	r5,r6,37
   12630:	18800315 	stw	r2,12(r3)
   12634:	10c00215 	stw	r3,8(r2)
   12638:	b8c00217 	ldw	r3,8(r23)
   1263c:	b8800317 	ldw	r2,12(r23)
   12640:	bc800204 	addi	r18,r23,8
   12644:	18800315 	stw	r2,12(r3)
   12648:	10c00215 	stw	r3,8(r2)
   1264c:	2800551e 	bne	r5,zero,127a4 <_realloc_r+0x4dc>
   12650:	30800530 	cmpltui	r2,r6,20
   12654:	1000511e 	bne	r2,zero,1279c <_realloc_r+0x4d4>
   12658:	80c00017 	ldw	r3,0(r16)
   1265c:	30800728 	cmpgeui	r2,r6,28
   12660:	b8c00215 	stw	r3,8(r23)
   12664:	80c00117 	ldw	r3,4(r16)
   12668:	b8c00315 	stw	r3,12(r23)
   1266c:	1000641e 	bne	r2,zero,12800 <_realloc_r+0x538>
   12670:	84000204 	addi	r16,r16,8
   12674:	b8800404 	addi	r2,r23,16
   12678:	80c00017 	ldw	r3,0(r16)
   1267c:	10c00015 	stw	r3,0(r2)
   12680:	80c00117 	ldw	r3,4(r16)
   12684:	10c00115 	stw	r3,4(r2)
   12688:	80c00217 	ldw	r3,8(r16)
   1268c:	10c00215 	stw	r3,8(r2)
   12690:	9021883a 	mov	r16,r18
   12694:	b82b883a 	mov	r21,r23
   12698:	e025883a 	mov	r18,fp
   1269c:	003f6006 	br	12420 <_realloc_r+0x158>
   126a0:	28800317 	ldw	r2,12(r5)
   126a4:	28c00217 	ldw	r3,8(r5)
   126a8:	2025883a 	mov	r18,r4
   126ac:	18800315 	stw	r2,12(r3)
   126b0:	10c00215 	stw	r3,8(r2)
   126b4:	003f5a06 	br	12420 <_realloc_r+0x158>
   126b8:	800b883a 	mov	r5,r16
   126bc:	9809883a 	mov	r4,r19
   126c0:	00111f00 	call	111f0 <memmove>
   126c4:	003f9106 	br	1250c <_realloc_r+0x244>
   126c8:	88c00404 	addi	r3,r17,16
   126cc:	e0ff3616 	blt	fp,r3,123a8 <_realloc_r+0xe0>
   126d0:	b8800317 	ldw	r2,12(r23)
   126d4:	b8c00217 	ldw	r3,8(r23)
   126d8:	91bfff04 	addi	r6,r18,-4
   126dc:	31000968 	cmpgeui	r4,r6,37
   126e0:	18800315 	stw	r2,12(r3)
   126e4:	10c00215 	stw	r3,8(r2)
   126e8:	bcc00204 	addi	r19,r23,8
   126ec:	20004f1e 	bne	r4,zero,1282c <_realloc_r+0x564>
   126f0:	30800530 	cmpltui	r2,r6,20
   126f4:	10004b1e 	bne	r2,zero,12824 <_realloc_r+0x55c>
   126f8:	80c00017 	ldw	r3,0(r16)
   126fc:	30800728 	cmpgeui	r2,r6,28
   12700:	b8c00215 	stw	r3,8(r23)
   12704:	80c00117 	ldw	r3,4(r16)
   12708:	b8c00315 	stw	r3,12(r23)
   1270c:	10004b1e 	bne	r2,zero,1283c <_realloc_r+0x574>
   12710:	84000204 	addi	r16,r16,8
   12714:	b8800404 	addi	r2,r23,16
   12718:	80c00017 	ldw	r3,0(r16)
   1271c:	10c00015 	stw	r3,0(r2)
   12720:	80c00117 	ldw	r3,4(r16)
   12724:	10c00115 	stw	r3,4(r2)
   12728:	80c00217 	ldw	r3,8(r16)
   1272c:	10c00215 	stw	r3,8(r2)
   12730:	bc47883a 	add	r3,r23,r17
   12734:	e445c83a 	sub	r2,fp,r17
   12738:	b0c00215 	stw	r3,8(r22)
   1273c:	10800054 	ori	r2,r2,1
   12740:	18800115 	stw	r2,4(r3)
   12744:	b8800117 	ldw	r2,4(r23)
   12748:	a009883a 	mov	r4,r20
   1274c:	1080004c 	andi	r2,r2,1
   12750:	1444b03a 	or	r2,r2,r17
   12754:	b8800115 	stw	r2,4(r23)
   12758:	00138c00 	call	138c0 <__malloc_unlock>
   1275c:	003f3e06 	br	12458 <_realloc_r+0x190>
   12760:	80800217 	ldw	r2,8(r16)
   12764:	31800920 	cmpeqi	r6,r6,36
   12768:	98800215 	stw	r2,8(r19)
   1276c:	80800317 	ldw	r2,12(r16)
   12770:	98800315 	stw	r2,12(r19)
   12774:	3000121e 	bne	r6,zero,127c0 <_realloc_r+0x4f8>
   12778:	80c00404 	addi	r3,r16,16
   1277c:	98800404 	addi	r2,r19,16
   12780:	003f5c06 	br	124f4 <_realloc_r+0x22c>
   12784:	9005883a 	mov	r2,r18
   12788:	003f1c06 	br	123fc <_realloc_r+0x134>
   1278c:	800b883a 	mov	r5,r16
   12790:	9009883a 	mov	r4,r18
   12794:	00111f00 	call	111f0 <memmove>
   12798:	003f1e06 	br	12414 <_realloc_r+0x14c>
   1279c:	9005883a 	mov	r2,r18
   127a0:	003fb506 	br	12678 <_realloc_r+0x3b0>
   127a4:	800b883a 	mov	r5,r16
   127a8:	9009883a 	mov	r4,r18
   127ac:	00111f00 	call	111f0 <memmove>
   127b0:	003fb706 	br	12690 <_realloc_r+0x3c8>
   127b4:	a009883a 	mov	r4,r20
   127b8:	00138c00 	call	138c0 <__malloc_unlock>
   127bc:	003f3706 	br	1249c <_realloc_r+0x1d4>
   127c0:	81000417 	ldw	r4,16(r16)
   127c4:	80c00604 	addi	r3,r16,24
   127c8:	98800604 	addi	r2,r19,24
   127cc:	99000415 	stw	r4,16(r19)
   127d0:	81000517 	ldw	r4,20(r16)
   127d4:	99000515 	stw	r4,20(r19)
   127d8:	003f4606 	br	124f4 <_realloc_r+0x22c>
   127dc:	80800217 	ldw	r2,8(r16)
   127e0:	31800920 	cmpeqi	r6,r6,36
   127e4:	b8800415 	stw	r2,16(r23)
   127e8:	80800317 	ldw	r2,12(r16)
   127ec:	b8800515 	stw	r2,20(r23)
   127f0:	30001b1e 	bne	r6,zero,12860 <_realloc_r+0x598>
   127f4:	84000404 	addi	r16,r16,16
   127f8:	b8800604 	addi	r2,r23,24
   127fc:	003eff06 	br	123fc <_realloc_r+0x134>
   12800:	80800217 	ldw	r2,8(r16)
   12804:	31800920 	cmpeqi	r6,r6,36
   12808:	b8800415 	stw	r2,16(r23)
   1280c:	80800317 	ldw	r2,12(r16)
   12810:	b8800515 	stw	r2,20(r23)
   12814:	3000191e 	bne	r6,zero,1287c <_realloc_r+0x5b4>
   12818:	84000404 	addi	r16,r16,16
   1281c:	b8800604 	addi	r2,r23,24
   12820:	003f9506 	br	12678 <_realloc_r+0x3b0>
   12824:	9805883a 	mov	r2,r19
   12828:	003fbb06 	br	12718 <_realloc_r+0x450>
   1282c:	800b883a 	mov	r5,r16
   12830:	9809883a 	mov	r4,r19
   12834:	00111f00 	call	111f0 <memmove>
   12838:	003fbd06 	br	12730 <_realloc_r+0x468>
   1283c:	80800217 	ldw	r2,8(r16)
   12840:	31800920 	cmpeqi	r6,r6,36
   12844:	b8800415 	stw	r2,16(r23)
   12848:	80800317 	ldw	r2,12(r16)
   1284c:	b8800515 	stw	r2,20(r23)
   12850:	3000111e 	bne	r6,zero,12898 <_realloc_r+0x5d0>
   12854:	84000404 	addi	r16,r16,16
   12858:	b8800604 	addi	r2,r23,24
   1285c:	003fae06 	br	12718 <_realloc_r+0x450>
   12860:	80c00417 	ldw	r3,16(r16)
   12864:	84000604 	addi	r16,r16,24
   12868:	b8800804 	addi	r2,r23,32
   1286c:	b8c00615 	stw	r3,24(r23)
   12870:	80ffff17 	ldw	r3,-4(r16)
   12874:	b8c00715 	stw	r3,28(r23)
   12878:	003ee006 	br	123fc <_realloc_r+0x134>
   1287c:	80c00417 	ldw	r3,16(r16)
   12880:	84000604 	addi	r16,r16,24
   12884:	b8800804 	addi	r2,r23,32
   12888:	b8c00615 	stw	r3,24(r23)
   1288c:	80ffff17 	ldw	r3,-4(r16)
   12890:	b8c00715 	stw	r3,28(r23)
   12894:	003f7806 	br	12678 <_realloc_r+0x3b0>
   12898:	80c00417 	ldw	r3,16(r16)
   1289c:	84000604 	addi	r16,r16,24
   128a0:	b8800804 	addi	r2,r23,32
   128a4:	b8c00615 	stw	r3,24(r23)
   128a8:	80ffff17 	ldw	r3,-4(r16)
   128ac:	b8c00715 	stw	r3,28(r23)
   128b0:	003f9906 	br	12718 <_realloc_r+0x450>

000128b4 <_fclose_r>:
   128b4:	defffc04 	addi	sp,sp,-16
   128b8:	dfc00315 	stw	ra,12(sp)
   128bc:	dc800215 	stw	r18,8(sp)
   128c0:	dc400115 	stw	r17,4(sp)
   128c4:	dc000015 	stw	r16,0(sp)
   128c8:	28000726 	beq	r5,zero,128e8 <_fclose_r+0x34>
   128cc:	2821883a 	mov	r16,r5
   128d0:	2023883a 	mov	r17,r4
   128d4:	20000226 	beq	r4,zero,128e0 <_fclose_r+0x2c>
   128d8:	20800d17 	ldw	r2,52(r4)
   128dc:	10002f26 	beq	r2,zero,1299c <_fclose_r+0xe8>
   128e0:	8080030f 	ldh	r2,12(r16)
   128e4:	1000081e 	bne	r2,zero,12908 <_fclose_r+0x54>
   128e8:	0025883a 	mov	r18,zero
   128ec:	9005883a 	mov	r2,r18
   128f0:	dfc00317 	ldw	ra,12(sp)
   128f4:	dc800217 	ldw	r18,8(sp)
   128f8:	dc400117 	ldw	r17,4(sp)
   128fc:	dc000017 	ldw	r16,0(sp)
   12900:	dec00404 	addi	sp,sp,16
   12904:	f800283a 	ret
   12908:	800b883a 	mov	r5,r16
   1290c:	8809883a 	mov	r4,r17
   12910:	00129b40 	call	129b4 <__sflush_r>
   12914:	80c00b17 	ldw	r3,44(r16)
   12918:	1025883a 	mov	r18,r2
   1291c:	18000426 	beq	r3,zero,12930 <_fclose_r+0x7c>
   12920:	81400717 	ldw	r5,28(r16)
   12924:	8809883a 	mov	r4,r17
   12928:	183ee83a 	callr	r3
   1292c:	10001316 	blt	r2,zero,1297c <_fclose_r+0xc8>
   12930:	8080030b 	ldhu	r2,12(r16)
   12934:	1080200c 	andi	r2,r2,128
   12938:	1000141e 	bne	r2,zero,1298c <_fclose_r+0xd8>
   1293c:	81400c17 	ldw	r5,48(r16)
   12940:	28000526 	beq	r5,zero,12958 <_fclose_r+0xa4>
   12944:	80801004 	addi	r2,r16,64
   12948:	28800226 	beq	r5,r2,12954 <_fclose_r+0xa0>
   1294c:	8809883a 	mov	r4,r17
   12950:	00117f80 	call	117f8 <_free_r>
   12954:	80000c15 	stw	zero,48(r16)
   12958:	81401117 	ldw	r5,68(r16)
   1295c:	28000326 	beq	r5,zero,1296c <_fclose_r+0xb8>
   12960:	8809883a 	mov	r4,r17
   12964:	00117f80 	call	117f8 <_free_r>
   12968:	80001115 	stw	zero,68(r16)
   1296c:	00107f00 	call	107f0 <__sfp_lock_acquire>
   12970:	8000030d 	sth	zero,12(r16)
   12974:	00107f40 	call	107f4 <__sfp_lock_release>
   12978:	003fdc06 	br	128ec <_fclose_r+0x38>
   1297c:	8080030b 	ldhu	r2,12(r16)
   12980:	04bfffc4 	movi	r18,-1
   12984:	1080200c 	andi	r2,r2,128
   12988:	103fec26 	beq	r2,zero,1293c <_fclose_r+0x88>
   1298c:	81400417 	ldw	r5,16(r16)
   12990:	8809883a 	mov	r4,r17
   12994:	00117f80 	call	117f8 <_free_r>
   12998:	003fe806 	br	1293c <_fclose_r+0x88>
   1299c:	00107c80 	call	107c8 <__sinit>
   129a0:	003fcf06 	br	128e0 <_fclose_r+0x2c>

000129a4 <fclose>:
   129a4:	00800074 	movhi	r2,1
   129a8:	200b883a 	mov	r5,r4
   129ac:	111c1617 	ldw	r4,28760(r2)
   129b0:	00128b41 	jmpi	128b4 <_fclose_r>

000129b4 <__sflush_r>:
   129b4:	2880030b 	ldhu	r2,12(r5)
   129b8:	defffb04 	addi	sp,sp,-20
   129bc:	dcc00315 	stw	r19,12(sp)
   129c0:	dc000015 	stw	r16,0(sp)
   129c4:	dfc00415 	stw	ra,16(sp)
   129c8:	dc800215 	stw	r18,8(sp)
   129cc:	dc400115 	stw	r17,4(sp)
   129d0:	10c0020c 	andi	r3,r2,8
   129d4:	2821883a 	mov	r16,r5
   129d8:	2027883a 	mov	r19,r4
   129dc:	18003c1e 	bne	r3,zero,12ad0 <__sflush_r+0x11c>
   129e0:	29000117 	ldw	r4,4(r5)
   129e4:	10c20014 	ori	r3,r2,2048
   129e8:	28c0030d 	sth	r3,12(r5)
   129ec:	0100580e 	bge	zero,r4,12b50 <__sflush_r+0x19c>
   129f0:	82000a17 	ldw	r8,40(r16)
   129f4:	40003426 	beq	r8,zero,12ac8 <__sflush_r+0x114>
   129f8:	9c400017 	ldw	r17,0(r19)
   129fc:	1084000c 	andi	r2,r2,4096
   12a00:	98000015 	stw	zero,0(r19)
   12a04:	81400717 	ldw	r5,28(r16)
   12a08:	1000561e 	bne	r2,zero,12b64 <__sflush_r+0x1b0>
   12a0c:	000d883a 	mov	r6,zero
   12a10:	01c00044 	movi	r7,1
   12a14:	9809883a 	mov	r4,r19
   12a18:	403ee83a 	callr	r8
   12a1c:	100d883a 	mov	r6,r2
   12a20:	10bfffd8 	cmpnei	r2,r2,-1
   12a24:	10005b26 	beq	r2,zero,12b94 <__sflush_r+0x1e0>
   12a28:	80c0030b 	ldhu	r3,12(r16)
   12a2c:	82000a17 	ldw	r8,40(r16)
   12a30:	18c0010c 	andi	r3,r3,4
   12a34:	18000626 	beq	r3,zero,12a50 <__sflush_r+0x9c>
   12a38:	80c00117 	ldw	r3,4(r16)
   12a3c:	80800c17 	ldw	r2,48(r16)
   12a40:	30cdc83a 	sub	r6,r6,r3
   12a44:	10000226 	beq	r2,zero,12a50 <__sflush_r+0x9c>
   12a48:	80800f17 	ldw	r2,60(r16)
   12a4c:	308dc83a 	sub	r6,r6,r2
   12a50:	81400717 	ldw	r5,28(r16)
   12a54:	000f883a 	mov	r7,zero
   12a58:	9809883a 	mov	r4,r19
   12a5c:	403ee83a 	callr	r8
   12a60:	10ffffd8 	cmpnei	r3,r2,-1
   12a64:	1800411e 	bne	r3,zero,12b6c <__sflush_r+0x1b8>
   12a68:	99400017 	ldw	r5,0(r19)
   12a6c:	28c007b0 	cmpltui	r3,r5,30
   12a70:	18002c26 	beq	r3,zero,12b24 <__sflush_r+0x170>
   12a74:	00f7f034 	movhi	r3,57280
   12a78:	18ffff84 	addi	r3,r3,-2
   12a7c:	1949d83a 	sra	r4,r3,r5
   12a80:	80c0030b 	ldhu	r3,12(r16)
   12a84:	2100004c 	andi	r4,r4,1
   12a88:	2000271e 	bne	r4,zero,12b28 <__sflush_r+0x174>
   12a8c:	81000417 	ldw	r4,16(r16)
   12a90:	19bdffcc 	andi	r6,r3,63487
   12a94:	8180030d 	sth	r6,12(r16)
   12a98:	80000115 	stw	zero,4(r16)
   12a9c:	81000015 	stw	r4,0(r16)
   12aa0:	18c4000c 	andi	r3,r3,4096
   12aa4:	1800431e 	bne	r3,zero,12bb4 <__sflush_r+0x200>
   12aa8:	81400c17 	ldw	r5,48(r16)
   12aac:	9c400015 	stw	r17,0(r19)
   12ab0:	28000526 	beq	r5,zero,12ac8 <__sflush_r+0x114>
   12ab4:	80801004 	addi	r2,r16,64
   12ab8:	28800226 	beq	r5,r2,12ac4 <__sflush_r+0x110>
   12abc:	9809883a 	mov	r4,r19
   12ac0:	00117f80 	call	117f8 <_free_r>
   12ac4:	80000c15 	stw	zero,48(r16)
   12ac8:	0005883a 	mov	r2,zero
   12acc:	00001906 	br	12b34 <__sflush_r+0x180>
   12ad0:	2c800417 	ldw	r18,16(r5)
   12ad4:	903ffc26 	beq	r18,zero,12ac8 <__sflush_r+0x114>
   12ad8:	2c400017 	ldw	r17,0(r5)
   12adc:	108000cc 	andi	r2,r2,3
   12ae0:	2c800015 	stw	r18,0(r5)
   12ae4:	8ca3c83a 	sub	r17,r17,r18
   12ae8:	10001c1e 	bne	r2,zero,12b5c <__sflush_r+0x1a8>
   12aec:	28800517 	ldw	r2,20(r5)
   12af0:	80800215 	stw	r2,8(r16)
   12af4:	04400316 	blt	zero,r17,12b04 <__sflush_r+0x150>
   12af8:	003ff306 	br	12ac8 <__sflush_r+0x114>
   12afc:	90a5883a 	add	r18,r18,r2
   12b00:	047ff10e 	bge	zero,r17,12ac8 <__sflush_r+0x114>
   12b04:	80800917 	ldw	r2,36(r16)
   12b08:	81400717 	ldw	r5,28(r16)
   12b0c:	880f883a 	mov	r7,r17
   12b10:	900d883a 	mov	r6,r18
   12b14:	9809883a 	mov	r4,r19
   12b18:	103ee83a 	callr	r2
   12b1c:	88a3c83a 	sub	r17,r17,r2
   12b20:	00bff616 	blt	zero,r2,12afc <__sflush_r+0x148>
   12b24:	80c0030b 	ldhu	r3,12(r16)
   12b28:	18c01014 	ori	r3,r3,64
   12b2c:	80c0030d 	sth	r3,12(r16)
   12b30:	00bfffc4 	movi	r2,-1
   12b34:	dfc00417 	ldw	ra,16(sp)
   12b38:	dcc00317 	ldw	r19,12(sp)
   12b3c:	dc800217 	ldw	r18,8(sp)
   12b40:	dc400117 	ldw	r17,4(sp)
   12b44:	dc000017 	ldw	r16,0(sp)
   12b48:	dec00504 	addi	sp,sp,20
   12b4c:	f800283a 	ret
   12b50:	29000f17 	ldw	r4,60(r5)
   12b54:	013fa616 	blt	zero,r4,129f0 <__sflush_r+0x3c>
   12b58:	003fdb06 	br	12ac8 <__sflush_r+0x114>
   12b5c:	0005883a 	mov	r2,zero
   12b60:	003fe306 	br	12af0 <__sflush_r+0x13c>
   12b64:	81801417 	ldw	r6,80(r16)
   12b68:	003fb106 	br	12a30 <__sflush_r+0x7c>
   12b6c:	80c0030b 	ldhu	r3,12(r16)
   12b70:	81000417 	ldw	r4,16(r16)
   12b74:	80000115 	stw	zero,4(r16)
   12b78:	197dffcc 	andi	r5,r3,63487
   12b7c:	8140030d 	sth	r5,12(r16)
   12b80:	81000015 	stw	r4,0(r16)
   12b84:	18c4000c 	andi	r3,r3,4096
   12b88:	183fc726 	beq	r3,zero,12aa8 <__sflush_r+0xf4>
   12b8c:	80801415 	stw	r2,80(r16)
   12b90:	003fc506 	br	12aa8 <__sflush_r+0xf4>
   12b94:	98800017 	ldw	r2,0(r19)
   12b98:	103fa326 	beq	r2,zero,12a28 <__sflush_r+0x74>
   12b9c:	10c00760 	cmpeqi	r3,r2,29
   12ba0:	1800021e 	bne	r3,zero,12bac <__sflush_r+0x1f8>
   12ba4:	10800598 	cmpnei	r2,r2,22
   12ba8:	103fde1e 	bne	r2,zero,12b24 <__sflush_r+0x170>
   12bac:	9c400015 	stw	r17,0(r19)
   12bb0:	003fc506 	br	12ac8 <__sflush_r+0x114>
   12bb4:	283fbc1e 	bne	r5,zero,12aa8 <__sflush_r+0xf4>
   12bb8:	003ff406 	br	12b8c <__sflush_r+0x1d8>

00012bbc <_fflush_r>:
   12bbc:	defffd04 	addi	sp,sp,-12
   12bc0:	dc000115 	stw	r16,4(sp)
   12bc4:	dfc00215 	stw	ra,8(sp)
   12bc8:	2021883a 	mov	r16,r4
   12bcc:	20000226 	beq	r4,zero,12bd8 <_fflush_r+0x1c>
   12bd0:	20800d17 	ldw	r2,52(r4)
   12bd4:	10000c26 	beq	r2,zero,12c08 <_fflush_r+0x4c>
   12bd8:	2880030f 	ldh	r2,12(r5)
   12bdc:	1000051e 	bne	r2,zero,12bf4 <_fflush_r+0x38>
   12be0:	0005883a 	mov	r2,zero
   12be4:	dfc00217 	ldw	ra,8(sp)
   12be8:	dc000117 	ldw	r16,4(sp)
   12bec:	dec00304 	addi	sp,sp,12
   12bf0:	f800283a 	ret
   12bf4:	8009883a 	mov	r4,r16
   12bf8:	dfc00217 	ldw	ra,8(sp)
   12bfc:	dc000117 	ldw	r16,4(sp)
   12c00:	dec00304 	addi	sp,sp,12
   12c04:	00129b41 	jmpi	129b4 <__sflush_r>
   12c08:	d9400015 	stw	r5,0(sp)
   12c0c:	00107c80 	call	107c8 <__sinit>
   12c10:	d9400017 	ldw	r5,0(sp)
   12c14:	003ff006 	br	12bd8 <_fflush_r+0x1c>

00012c18 <fflush>:
   12c18:	20001826 	beq	r4,zero,12c7c <fflush+0x64>
   12c1c:	00800074 	movhi	r2,1
   12c20:	200b883a 	mov	r5,r4
   12c24:	111c1617 	ldw	r4,28760(r2)
   12c28:	20000226 	beq	r4,zero,12c34 <fflush+0x1c>
   12c2c:	20800d17 	ldw	r2,52(r4)
   12c30:	10000526 	beq	r2,zero,12c48 <fflush+0x30>
   12c34:	2880030f 	ldh	r2,12(r5)
   12c38:	1000021e 	bne	r2,zero,12c44 <fflush+0x2c>
   12c3c:	0005883a 	mov	r2,zero
   12c40:	f800283a 	ret
   12c44:	00129b41 	jmpi	129b4 <__sflush_r>
   12c48:	defffd04 	addi	sp,sp,-12
   12c4c:	d9400115 	stw	r5,4(sp)
   12c50:	d9000015 	stw	r4,0(sp)
   12c54:	dfc00215 	stw	ra,8(sp)
   12c58:	00107c80 	call	107c8 <__sinit>
   12c5c:	d9400117 	ldw	r5,4(sp)
   12c60:	d9000017 	ldw	r4,0(sp)
   12c64:	2880030f 	ldh	r2,12(r5)
   12c68:	10000b1e 	bne	r2,zero,12c98 <fflush+0x80>
   12c6c:	0005883a 	mov	r2,zero
   12c70:	dfc00217 	ldw	ra,8(sp)
   12c74:	dec00304 	addi	sp,sp,12
   12c78:	f800283a 	ret
   12c7c:	01800074 	movhi	r6,1
   12c80:	01400074 	movhi	r5,1
   12c84:	01000074 	movhi	r4,1
   12c88:	31968e04 	addi	r6,r6,23096
   12c8c:	294aef04 	addi	r5,r5,11196
   12c90:	21164704 	addi	r4,r4,22812
   12c94:	0010cc81 	jmpi	10cc8 <_fwalk_sglue>
   12c98:	dfc00217 	ldw	ra,8(sp)
   12c9c:	dec00304 	addi	sp,sp,12
   12ca0:	00129b41 	jmpi	129b4 <__sflush_r>

00012ca4 <__smakebuf_r>:
   12ca4:	2880030b 	ldhu	r2,12(r5)
   12ca8:	deffe904 	addi	sp,sp,-92
   12cac:	dc001215 	stw	r16,72(sp)
   12cb0:	dfc01615 	stw	ra,88(sp)
   12cb4:	dcc01515 	stw	r19,84(sp)
   12cb8:	dc801415 	stw	r18,80(sp)
   12cbc:	dc401315 	stw	r17,76(sp)
   12cc0:	10c0008c 	andi	r3,r2,2
   12cc4:	2821883a 	mov	r16,r5
   12cc8:	18000c26 	beq	r3,zero,12cfc <__smakebuf_r+0x58>
   12ccc:	288010c4 	addi	r2,r5,67
   12cd0:	28800015 	stw	r2,0(r5)
   12cd4:	28800415 	stw	r2,16(r5)
   12cd8:	00800044 	movi	r2,1
   12cdc:	28800515 	stw	r2,20(r5)
   12ce0:	dfc01617 	ldw	ra,88(sp)
   12ce4:	dcc01517 	ldw	r19,84(sp)
   12ce8:	dc801417 	ldw	r18,80(sp)
   12cec:	dc401317 	ldw	r17,76(sp)
   12cf0:	dc001217 	ldw	r16,72(sp)
   12cf4:	dec01704 	addi	sp,sp,92
   12cf8:	f800283a 	ret
   12cfc:	2940038f 	ldh	r5,14(r5)
   12d00:	2023883a 	mov	r17,r4
   12d04:	28002816 	blt	r5,zero,12da8 <__smakebuf_r+0x104>
   12d08:	d80d883a 	mov	r6,sp
   12d0c:	0012ed80 	call	12ed8 <_fstat_r>
   12d10:	10002416 	blt	r2,zero,12da4 <__smakebuf_r+0x100>
   12d14:	d8800117 	ldw	r2,4(sp)
   12d18:	10bc000c 	andi	r2,r2,61440
   12d1c:	10880018 	cmpnei	r2,r2,8192
   12d20:	1000471e 	bne	r2,zero,12e40 <__smakebuf_r+0x19c>
   12d24:	8140038f 	ldh	r5,14(r16)
   12d28:	8809883a 	mov	r4,r17
   12d2c:	0012f380 	call	12f38 <_isatty_r>
   12d30:	10000826 	beq	r2,zero,12d54 <__smakebuf_r+0xb0>
   12d34:	8080030b 	ldhu	r2,12(r16)
   12d38:	80c010c4 	addi	r3,r16,67
   12d3c:	80c00015 	stw	r3,0(r16)
   12d40:	10800054 	ori	r2,r2,1
   12d44:	8080030d 	sth	r2,12(r16)
   12d48:	00800044 	movi	r2,1
   12d4c:	80c00415 	stw	r3,16(r16)
   12d50:	80800515 	stw	r2,20(r16)
   12d54:	01410004 	movi	r5,1024
   12d58:	8809883a 	mov	r4,r17
   12d5c:	0011b000 	call	11b00 <_malloc_r>
   12d60:	10002626 	beq	r2,zero,12dfc <__smakebuf_r+0x158>
   12d64:	80c0030b 	ldhu	r3,12(r16)
   12d68:	8140038f 	ldh	r5,14(r16)
   12d6c:	80800015 	stw	r2,0(r16)
   12d70:	18c02014 	ori	r3,r3,128
   12d74:	80800415 	stw	r2,16(r16)
   12d78:	00810004 	movi	r2,1024
   12d7c:	80c0030d 	sth	r3,12(r16)
   12d80:	80800515 	stw	r2,20(r16)
   12d84:	8809883a 	mov	r4,r17
   12d88:	0012f380 	call	12f38 <_isatty_r>
   12d8c:	80c0030b 	ldhu	r3,12(r16)
   12d90:	1000271e 	bne	r2,zero,12e30 <__smakebuf_r+0x18c>
   12d94:	00820004 	movi	r2,2048
   12d98:	10c4b03a 	or	r2,r2,r3
   12d9c:	8080030d 	sth	r2,12(r16)
   12da0:	003fcf06 	br	12ce0 <__smakebuf_r+0x3c>
   12da4:	8080030b 	ldhu	r2,12(r16)
   12da8:	1080200c 	andi	r2,r2,128
   12dac:	10000d1e 	bne	r2,zero,12de4 <__smakebuf_r+0x140>
   12db0:	04c10004 	movi	r19,1024
   12db4:	0025883a 	mov	r18,zero
   12db8:	980b883a 	mov	r5,r19
   12dbc:	8809883a 	mov	r4,r17
   12dc0:	0011b000 	call	11b00 <_malloc_r>
   12dc4:	10000d26 	beq	r2,zero,12dfc <__smakebuf_r+0x158>
   12dc8:	80c0030b 	ldhu	r3,12(r16)
   12dcc:	80800015 	stw	r2,0(r16)
   12dd0:	80800415 	stw	r2,16(r16)
   12dd4:	18c02014 	ori	r3,r3,128
   12dd8:	84c00515 	stw	r19,20(r16)
   12ddc:	9005883a 	mov	r2,r18
   12de0:	003fed06 	br	12d98 <__smakebuf_r+0xf4>
   12de4:	04c01004 	movi	r19,64
   12de8:	980b883a 	mov	r5,r19
   12dec:	8809883a 	mov	r4,r17
   12df0:	0025883a 	mov	r18,zero
   12df4:	0011b000 	call	11b00 <_malloc_r>
   12df8:	103ff31e 	bne	r2,zero,12dc8 <__smakebuf_r+0x124>
   12dfc:	8080030b 	ldhu	r2,12(r16)
   12e00:	10c0800c 	andi	r3,r2,512
   12e04:	183fb61e 	bne	r3,zero,12ce0 <__smakebuf_r+0x3c>
   12e08:	00ffff04 	movi	r3,-4
   12e0c:	10c4703a 	and	r2,r2,r3
   12e10:	10800094 	ori	r2,r2,2
   12e14:	80c010c4 	addi	r3,r16,67
   12e18:	8080030d 	sth	r2,12(r16)
   12e1c:	00800044 	movi	r2,1
   12e20:	80c00015 	stw	r3,0(r16)
   12e24:	80c00415 	stw	r3,16(r16)
   12e28:	80800515 	stw	r2,20(r16)
   12e2c:	003fac06 	br	12ce0 <__smakebuf_r+0x3c>
   12e30:	18ffff0c 	andi	r3,r3,65532
   12e34:	00820004 	movi	r2,2048
   12e38:	18c00054 	ori	r3,r3,1
   12e3c:	003fd606 	br	12d98 <__smakebuf_r+0xf4>
   12e40:	04c10004 	movi	r19,1024
   12e44:	04820004 	movi	r18,2048
   12e48:	003fdb06 	br	12db8 <__smakebuf_r+0x114>

00012e4c <__swhatbuf_r>:
   12e4c:	deffea04 	addi	sp,sp,-88
   12e50:	dc001215 	stw	r16,72(sp)
   12e54:	2821883a 	mov	r16,r5
   12e58:	2940038f 	ldh	r5,14(r5)
   12e5c:	dc801415 	stw	r18,80(sp)
   12e60:	dc401315 	stw	r17,76(sp)
   12e64:	dfc01515 	stw	ra,84(sp)
   12e68:	3023883a 	mov	r17,r6
   12e6c:	3825883a 	mov	r18,r7
   12e70:	28001016 	blt	r5,zero,12eb4 <__swhatbuf_r+0x68>
   12e74:	d80d883a 	mov	r6,sp
   12e78:	0012ed80 	call	12ed8 <_fstat_r>
   12e7c:	10000d16 	blt	r2,zero,12eb4 <__swhatbuf_r+0x68>
   12e80:	d8c00117 	ldw	r3,4(sp)
   12e84:	01010004 	movi	r4,1024
   12e88:	00820004 	movi	r2,2048
   12e8c:	18fc000c 	andi	r3,r3,61440
   12e90:	18c80020 	cmpeqi	r3,r3,8192
   12e94:	90c00015 	stw	r3,0(r18)
   12e98:	89000015 	stw	r4,0(r17)
   12e9c:	dfc01517 	ldw	ra,84(sp)
   12ea0:	dc801417 	ldw	r18,80(sp)
   12ea4:	dc401317 	ldw	r17,76(sp)
   12ea8:	dc001217 	ldw	r16,72(sp)
   12eac:	dec01604 	addi	sp,sp,88
   12eb0:	f800283a 	ret
   12eb4:	8080030b 	ldhu	r2,12(r16)
   12eb8:	0007883a 	mov	r3,zero
   12ebc:	1080200c 	andi	r2,r2,128
   12ec0:	10000326 	beq	r2,zero,12ed0 <__swhatbuf_r+0x84>
   12ec4:	01001004 	movi	r4,64
   12ec8:	0005883a 	mov	r2,zero
   12ecc:	003ff106 	br	12e94 <__swhatbuf_r+0x48>
   12ed0:	01010004 	movi	r4,1024
   12ed4:	003fef06 	br	12e94 <__swhatbuf_r+0x48>

00012ed8 <_fstat_r>:
   12ed8:	2807883a 	mov	r3,r5
   12edc:	defffe04 	addi	sp,sp,-8
   12ee0:	dc000015 	stw	r16,0(sp)
   12ee4:	008000b4 	movhi	r2,2
   12ee8:	300b883a 	mov	r5,r6
   12eec:	2021883a 	mov	r16,r4
   12ef0:	1809883a 	mov	r4,r3
   12ef4:	dfc00115 	stw	ra,4(sp)
   12ef8:	1021ff15 	stw	zero,-30724(r2)
   12efc:	00134700 	call	13470 <fstat>
   12f00:	10ffffd8 	cmpnei	r3,r2,-1
   12f04:	18000426 	beq	r3,zero,12f18 <_fstat_r+0x40>
   12f08:	dfc00117 	ldw	ra,4(sp)
   12f0c:	dc000017 	ldw	r16,0(sp)
   12f10:	dec00204 	addi	sp,sp,8
   12f14:	f800283a 	ret
   12f18:	00c000b4 	movhi	r3,2
   12f1c:	18e1ff17 	ldw	r3,-30724(r3)
   12f20:	183ff926 	beq	r3,zero,12f08 <_fstat_r+0x30>
   12f24:	80c00015 	stw	r3,0(r16)
   12f28:	dfc00117 	ldw	ra,4(sp)
   12f2c:	dc000017 	ldw	r16,0(sp)
   12f30:	dec00204 	addi	sp,sp,8
   12f34:	f800283a 	ret

00012f38 <_isatty_r>:
   12f38:	defffe04 	addi	sp,sp,-8
   12f3c:	dc000015 	stw	r16,0(sp)
   12f40:	008000b4 	movhi	r2,2
   12f44:	2021883a 	mov	r16,r4
   12f48:	2809883a 	mov	r4,r5
   12f4c:	dfc00115 	stw	ra,4(sp)
   12f50:	1021ff15 	stw	zero,-30724(r2)
   12f54:	00135680 	call	13568 <isatty>
   12f58:	10ffffd8 	cmpnei	r3,r2,-1
   12f5c:	18000426 	beq	r3,zero,12f70 <_isatty_r+0x38>
   12f60:	dfc00117 	ldw	ra,4(sp)
   12f64:	dc000017 	ldw	r16,0(sp)
   12f68:	dec00204 	addi	sp,sp,8
   12f6c:	f800283a 	ret
   12f70:	00c000b4 	movhi	r3,2
   12f74:	18e1ff17 	ldw	r3,-30724(r3)
   12f78:	183ff926 	beq	r3,zero,12f60 <_isatty_r+0x28>
   12f7c:	80c00015 	stw	r3,0(r16)
   12f80:	dfc00117 	ldw	ra,4(sp)
   12f84:	dc000017 	ldw	r16,0(sp)
   12f88:	dec00204 	addi	sp,sp,8
   12f8c:	f800283a 	ret

00012f90 <_sbrk_r>:
   12f90:	defffe04 	addi	sp,sp,-8
   12f94:	dc000015 	stw	r16,0(sp)
   12f98:	008000b4 	movhi	r2,2
   12f9c:	2021883a 	mov	r16,r4
   12fa0:	2809883a 	mov	r4,r5
   12fa4:	dfc00115 	stw	ra,4(sp)
   12fa8:	1021ff15 	stw	zero,-30724(r2)
   12fac:	0013a980 	call	13a98 <sbrk>
   12fb0:	10ffffd8 	cmpnei	r3,r2,-1
   12fb4:	18000426 	beq	r3,zero,12fc8 <_sbrk_r+0x38>
   12fb8:	dfc00117 	ldw	ra,4(sp)
   12fbc:	dc000017 	ldw	r16,0(sp)
   12fc0:	dec00204 	addi	sp,sp,8
   12fc4:	f800283a 	ret
   12fc8:	00c000b4 	movhi	r3,2
   12fcc:	18e1ff17 	ldw	r3,-30724(r3)
   12fd0:	183ff926 	beq	r3,zero,12fb8 <_sbrk_r+0x28>
   12fd4:	80c00015 	stw	r3,0(r16)
   12fd8:	dfc00117 	ldw	ra,4(sp)
   12fdc:	dc000017 	ldw	r16,0(sp)
   12fe0:	dec00204 	addi	sp,sp,8
   12fe4:	f800283a 	ret

00012fe8 <__call_exitprocs>:
   12fe8:	defff804 	addi	sp,sp,-32
   12fec:	008000b4 	movhi	r2,2
   12ff0:	dc800215 	stw	r18,8(sp)
   12ff4:	14a20417 	ldw	r18,-30704(r2)
   12ff8:	dfc00715 	stw	ra,28(sp)
   12ffc:	dd800615 	stw	r22,24(sp)
   13000:	dd400515 	stw	r21,20(sp)
   13004:	dd000415 	stw	r20,16(sp)
   13008:	dcc00315 	stw	r19,12(sp)
   1300c:	dc400115 	stw	r17,4(sp)
   13010:	dc000015 	stw	r16,0(sp)
   13014:	90001026 	beq	r18,zero,13058 <__call_exitprocs+0x70>
   13018:	2029883a 	mov	r20,r4
   1301c:	282b883a 	mov	r21,r5
   13020:	04c00044 	movi	r19,1
   13024:	94000117 	ldw	r16,4(r18)
   13028:	847fffc4 	addi	r17,r16,-1
   1302c:	88000a16 	blt	r17,zero,13058 <__call_exitprocs+0x70>
   13030:	84000044 	addi	r16,r16,1
   13034:	802090ba 	slli	r16,r16,2
   13038:	9421883a 	add	r16,r18,r16
   1303c:	a8001026 	beq	r21,zero,13080 <__call_exitprocs+0x98>
   13040:	80804017 	ldw	r2,256(r16)
   13044:	15400e26 	beq	r2,r21,13080 <__call_exitprocs+0x98>
   13048:	8c7fffc4 	addi	r17,r17,-1
   1304c:	88bfffd8 	cmpnei	r2,r17,-1
   13050:	843fff04 	addi	r16,r16,-4
   13054:	103ff91e 	bne	r2,zero,1303c <__call_exitprocs+0x54>
   13058:	dfc00717 	ldw	ra,28(sp)
   1305c:	dd800617 	ldw	r22,24(sp)
   13060:	dd400517 	ldw	r21,20(sp)
   13064:	dd000417 	ldw	r20,16(sp)
   13068:	dcc00317 	ldw	r19,12(sp)
   1306c:	dc800217 	ldw	r18,8(sp)
   13070:	dc400117 	ldw	r17,4(sp)
   13074:	dc000017 	ldw	r16,0(sp)
   13078:	dec00804 	addi	sp,sp,32
   1307c:	f800283a 	ret
   13080:	90800117 	ldw	r2,4(r18)
   13084:	81800017 	ldw	r6,0(r16)
   13088:	10bfffc4 	addi	r2,r2,-1
   1308c:	14401826 	beq	r2,r17,130f0 <__call_exitprocs+0x108>
   13090:	80000015 	stw	zero,0(r16)
   13094:	303fec26 	beq	r6,zero,13048 <__call_exitprocs+0x60>
   13098:	9c46983a 	sll	r3,r19,r17
   1309c:	90806217 	ldw	r2,392(r18)
   130a0:	95800117 	ldw	r22,4(r18)
   130a4:	1884703a 	and	r2,r3,r2
   130a8:	1000091e 	bne	r2,zero,130d0 <__call_exitprocs+0xe8>
   130ac:	303ee83a 	callr	r6
   130b0:	90c00117 	ldw	r3,4(r18)
   130b4:	008000b4 	movhi	r2,2
   130b8:	10a20417 	ldw	r2,-30704(r2)
   130bc:	1d80011e 	bne	r3,r22,130c4 <__call_exitprocs+0xdc>
   130c0:	14bfe126 	beq	r2,r18,13048 <__call_exitprocs+0x60>
   130c4:	103fe426 	beq	r2,zero,13058 <__call_exitprocs+0x70>
   130c8:	1025883a 	mov	r18,r2
   130cc:	003fd506 	br	13024 <__call_exitprocs+0x3c>
   130d0:	90806317 	ldw	r2,396(r18)
   130d4:	81002017 	ldw	r4,128(r16)
   130d8:	1886703a 	and	r3,r3,r2
   130dc:	1800061e 	bne	r3,zero,130f8 <__call_exitprocs+0x110>
   130e0:	200b883a 	mov	r5,r4
   130e4:	a009883a 	mov	r4,r20
   130e8:	303ee83a 	callr	r6
   130ec:	003ff006 	br	130b0 <__call_exitprocs+0xc8>
   130f0:	94400115 	stw	r17,4(r18)
   130f4:	003fe706 	br	13094 <__call_exitprocs+0xac>
   130f8:	303ee83a 	callr	r6
   130fc:	003fec06 	br	130b0 <__call_exitprocs+0xc8>

00013100 <__divsi3>:
   13100:	20001a16 	blt	r4,zero,1316c <__divsi3+0x6c>
   13104:	000f883a 	mov	r7,zero
   13108:	2800020e 	bge	r5,zero,13114 <__divsi3+0x14>
   1310c:	014bc83a 	sub	r5,zero,r5
   13110:	39c0005c 	xori	r7,r7,1
   13114:	200d883a 	mov	r6,r4
   13118:	00c00044 	movi	r3,1
   1311c:	2900092e 	bgeu	r5,r4,13144 <__divsi3+0x44>
   13120:	00800804 	movi	r2,32
   13124:	00c00044 	movi	r3,1
   13128:	00000106 	br	13130 <__divsi3+0x30>
   1312c:	10001226 	beq	r2,zero,13178 <__divsi3+0x78>
   13130:	294b883a 	add	r5,r5,r5
   13134:	10bfffc4 	addi	r2,r2,-1
   13138:	18c7883a 	add	r3,r3,r3
   1313c:	293ffb36 	bltu	r5,r4,1312c <__divsi3+0x2c>
   13140:	18000d26 	beq	r3,zero,13178 <__divsi3+0x78>
   13144:	0005883a 	mov	r2,zero
   13148:	31400236 	bltu	r6,r5,13154 <__divsi3+0x54>
   1314c:	314dc83a 	sub	r6,r6,r5
   13150:	10c4b03a 	or	r2,r2,r3
   13154:	1806d07a 	srli	r3,r3,1
   13158:	280ad07a 	srli	r5,r5,1
   1315c:	183ffa1e 	bne	r3,zero,13148 <__divsi3+0x48>
   13160:	38000126 	beq	r7,zero,13168 <__divsi3+0x68>
   13164:	0085c83a 	sub	r2,zero,r2
   13168:	f800283a 	ret
   1316c:	0109c83a 	sub	r4,zero,r4
   13170:	01c00044 	movi	r7,1
   13174:	003fe406 	br	13108 <__divsi3+0x8>
   13178:	0005883a 	mov	r2,zero
   1317c:	003ff806 	br	13160 <__divsi3+0x60>

00013180 <__modsi3>:
   13180:	20001716 	blt	r4,zero,131e0 <__modsi3+0x60>
   13184:	000f883a 	mov	r7,zero
   13188:	2005883a 	mov	r2,r4
   1318c:	2800010e 	bge	r5,zero,13194 <__modsi3+0x14>
   13190:	014bc83a 	sub	r5,zero,r5
   13194:	00c00044 	movi	r3,1
   13198:	2900092e 	bgeu	r5,r4,131c0 <__modsi3+0x40>
   1319c:	01800804 	movi	r6,32
   131a0:	00c00044 	movi	r3,1
   131a4:	00000106 	br	131ac <__modsi3+0x2c>
   131a8:	30001026 	beq	r6,zero,131ec <__modsi3+0x6c>
   131ac:	294b883a 	add	r5,r5,r5
   131b0:	31bfffc4 	addi	r6,r6,-1
   131b4:	18c7883a 	add	r3,r3,r3
   131b8:	293ffb36 	bltu	r5,r4,131a8 <__modsi3+0x28>
   131bc:	18000b26 	beq	r3,zero,131ec <__modsi3+0x6c>
   131c0:	1806d07a 	srli	r3,r3,1
   131c4:	11400136 	bltu	r2,r5,131cc <__modsi3+0x4c>
   131c8:	1145c83a 	sub	r2,r2,r5
   131cc:	280ad07a 	srli	r5,r5,1
   131d0:	183ffb1e 	bne	r3,zero,131c0 <__modsi3+0x40>
   131d4:	38000126 	beq	r7,zero,131dc <__modsi3+0x5c>
   131d8:	0085c83a 	sub	r2,zero,r2
   131dc:	f800283a 	ret
   131e0:	0109c83a 	sub	r4,zero,r4
   131e4:	01c00044 	movi	r7,1
   131e8:	003fe706 	br	13188 <__modsi3+0x8>
   131ec:	2005883a 	mov	r2,r4
   131f0:	003ff806 	br	131d4 <__modsi3+0x54>

000131f4 <__udivsi3>:
   131f4:	200d883a 	mov	r6,r4
   131f8:	2900152e 	bgeu	r5,r4,13250 <__udivsi3+0x5c>
   131fc:	28001416 	blt	r5,zero,13250 <__udivsi3+0x5c>
   13200:	00800804 	movi	r2,32
   13204:	00c00044 	movi	r3,1
   13208:	00000206 	br	13214 <__udivsi3+0x20>
   1320c:	10000e26 	beq	r2,zero,13248 <__udivsi3+0x54>
   13210:	28000416 	blt	r5,zero,13224 <__udivsi3+0x30>
   13214:	294b883a 	add	r5,r5,r5
   13218:	10bfffc4 	addi	r2,r2,-1
   1321c:	18c7883a 	add	r3,r3,r3
   13220:	293ffa36 	bltu	r5,r4,1320c <__udivsi3+0x18>
   13224:	18000826 	beq	r3,zero,13248 <__udivsi3+0x54>
   13228:	0005883a 	mov	r2,zero
   1322c:	31400236 	bltu	r6,r5,13238 <__udivsi3+0x44>
   13230:	314dc83a 	sub	r6,r6,r5
   13234:	10c4b03a 	or	r2,r2,r3
   13238:	1806d07a 	srli	r3,r3,1
   1323c:	280ad07a 	srli	r5,r5,1
   13240:	183ffa1e 	bne	r3,zero,1322c <__udivsi3+0x38>
   13244:	f800283a 	ret
   13248:	0005883a 	mov	r2,zero
   1324c:	f800283a 	ret
   13250:	00c00044 	movi	r3,1
   13254:	003ff406 	br	13228 <__udivsi3+0x34>

00013258 <__umodsi3>:
   13258:	2005883a 	mov	r2,r4
   1325c:	2900132e 	bgeu	r5,r4,132ac <__umodsi3+0x54>
   13260:	28001216 	blt	r5,zero,132ac <__umodsi3+0x54>
   13264:	01800804 	movi	r6,32
   13268:	00c00044 	movi	r3,1
   1326c:	00000206 	br	13278 <__umodsi3+0x20>
   13270:	30000c26 	beq	r6,zero,132a4 <__umodsi3+0x4c>
   13274:	28000416 	blt	r5,zero,13288 <__umodsi3+0x30>
   13278:	294b883a 	add	r5,r5,r5
   1327c:	31bfffc4 	addi	r6,r6,-1
   13280:	18c7883a 	add	r3,r3,r3
   13284:	293ffa36 	bltu	r5,r4,13270 <__umodsi3+0x18>
   13288:	18000626 	beq	r3,zero,132a4 <__umodsi3+0x4c>
   1328c:	1806d07a 	srli	r3,r3,1
   13290:	11400136 	bltu	r2,r5,13298 <__umodsi3+0x40>
   13294:	1145c83a 	sub	r2,r2,r5
   13298:	280ad07a 	srli	r5,r5,1
   1329c:	183ffb1e 	bne	r3,zero,1328c <__umodsi3+0x34>
   132a0:	f800283a 	ret
   132a4:	2005883a 	mov	r2,r4
   132a8:	f800283a 	ret
   132ac:	00c00044 	movi	r3,1
   132b0:	003ff606 	br	1328c <__umodsi3+0x34>

000132b4 <alt_get_errno>:

  if (fd)
  {
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
   132b4:	defffe04 	addi	sp,sp,-8
   132b8:	dfc00115 	stw	ra,4(sp)
   132bc:	df000015 	stw	fp,0(sp)
   132c0:	d839883a 	mov	fp,sp
     */
   132c4:	d0a00917 	ldw	r2,-32732(gp)
   132c8:	10000326 	beq	r2,zero,132d8 <alt_get_errno+0x24>
   132cc:	d0a00917 	ldw	r2,-32732(gp)
   132d0:	103ee83a 	callr	r2
   132d4:	00000106 	br	132dc <alt_get_errno+0x28>
   132d8:	d0a5ea04 	addi	r2,gp,-26712

   132dc:	e037883a 	mov	sp,fp
   132e0:	dfc00117 	ldw	ra,4(sp)
   132e4:	df000017 	ldw	fp,0(sp)
   132e8:	dec00204 	addi	sp,sp,8
   132ec:	f800283a 	ret

000132f0 <close>:
{
   132f0:	defffb04 	addi	sp,sp,-20
   132f4:	dfc00415 	stw	ra,16(sp)
   132f8:	df000315 	stw	fp,12(sp)
   132fc:	df000304 	addi	fp,sp,12
   13300:	e13ffd15 	stw	r4,-12(fp)
  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   13304:	e0bffd17 	ldw	r2,-12(fp)
   13308:	10000916 	blt	r2,zero,13330 <close+0x40>
   1330c:	e0fffd17 	ldw	r3,-12(fp)
   13310:	1805883a 	mov	r2,r3
   13314:	1085883a 	add	r2,r2,r2
   13318:	10c5883a 	add	r2,r2,r3
   1331c:	100490ba 	slli	r2,r2,2
   13320:	00c00074 	movhi	r3,1
   13324:	18d79d04 	addi	r3,r3,24180
   13328:	10c5883a 	add	r2,r2,r3
   1332c:	00000106 	br	13334 <close+0x44>
   13330:	0005883a 	mov	r2,zero
   13334:	e0bfff15 	stw	r2,-4(fp)
  if (fd)
   13338:	e0bfff17 	ldw	r2,-4(fp)
   1333c:	10001926 	beq	r2,zero,133a4 <close+0xb4>
    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   13340:	e0bfff17 	ldw	r2,-4(fp)
   13344:	10800017 	ldw	r2,0(r2)
   13348:	10800417 	ldw	r2,16(r2)
   1334c:	10000626 	beq	r2,zero,13368 <close+0x78>
   13350:	e0bfff17 	ldw	r2,-4(fp)
   13354:	10800017 	ldw	r2,0(r2)
   13358:	10800417 	ldw	r2,16(r2)
   1335c:	e13fff17 	ldw	r4,-4(fp)
   13360:	103ee83a 	callr	r2
   13364:	00000106 	br	1336c <close+0x7c>
   13368:	0005883a 	mov	r2,zero
   1336c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   13370:	e13ffd17 	ldw	r4,-12(fp)
   13374:	0013a280 	call	13a28 <alt_release_fd>
    if (rval < 0)
   13378:	e0bffe17 	ldw	r2,-8(fp)
   1337c:	1000070e 	bge	r2,zero,1339c <close+0xac>
    {
      ALT_ERRNO = -rval;
   13380:	00132b40 	call	132b4 <alt_get_errno>
   13384:	1007883a 	mov	r3,r2
   13388:	e0bffe17 	ldw	r2,-8(fp)
   1338c:	0085c83a 	sub	r2,zero,r2
   13390:	18800015 	stw	r2,0(r3)
      return -1;
   13394:	00bfffc4 	movi	r2,-1
   13398:	00000706 	br	133b8 <close+0xc8>
    }
    return 0;
   1339c:	0005883a 	mov	r2,zero
   133a0:	00000506 	br	133b8 <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   133a4:	00132b40 	call	132b4 <alt_get_errno>
   133a8:	1007883a 	mov	r3,r2
   133ac:	00801444 	movi	r2,81
   133b0:	18800015 	stw	r2,0(r3)
    return -1;
   133b4:	00bfffc4 	movi	r2,-1
  }
}
   133b8:	e037883a 	mov	sp,fp
   133bc:	dfc00117 	ldw	ra,4(sp)
   133c0:	df000017 	ldw	fp,0(sp)
   133c4:	dec00204 	addi	sp,sp,8
   133c8:	f800283a 	ret

000133cc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   133cc:	defffc04 	addi	sp,sp,-16
   133d0:	df000315 	stw	fp,12(sp)
   133d4:	df000304 	addi	fp,sp,12
   133d8:	e13fff15 	stw	r4,-4(fp)
   133dc:	e17ffe15 	stw	r5,-8(fp)
   133e0:	e1bffd15 	stw	r6,-12(fp)
  return len;
   133e4:	e0bffd17 	ldw	r2,-12(fp)
}
   133e8:	e037883a 	mov	sp,fp
   133ec:	df000017 	ldw	fp,0(sp)
   133f0:	dec00104 	addi	sp,sp,4
   133f4:	f800283a 	ret

000133f8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   133f8:	defffd04 	addi	sp,sp,-12
   133fc:	df000215 	stw	fp,8(sp)
   13400:	df000204 	addi	fp,sp,8
   13404:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   13408:	0001883a 	nop
   1340c:	e0bffe17 	ldw	r2,-8(fp)
   13410:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   13414:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   13418:	10000226 	beq	r2,zero,13424 <_exit+0x2c>
    ALT_SIM_FAIL();
   1341c:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
   13420:	00000106 	br	13428 <_exit+0x30>
    ALT_SIM_PASS();
   13424:	002af0b0 	cmpltui	zero,zero,43970
}
   13428:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   1342c:	0001883a 	nop
   13430:	003ffe06 	br	1342c <_exit+0x34>

00013434 <alt_get_errno>:
        return 0;
    default:
        return -1;
    }

#if !defined(ALT_STDIN_PRESENT) && !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
   13434:	defffe04 	addi	sp,sp,-8
   13438:	dfc00115 	stw	ra,4(sp)
   1343c:	df000015 	stw	fp,0(sp)
   13440:	d839883a 	mov	fp,sp
    /* Generate a link time warning, should this function ever be called. */
   13444:	d0a00917 	ldw	r2,-32732(gp)
   13448:	10000326 	beq	r2,zero,13458 <alt_get_errno+0x24>
   1344c:	d0a00917 	ldw	r2,-32732(gp)
   13450:	103ee83a 	callr	r2
   13454:	00000106 	br	1345c <alt_get_errno+0x28>
   13458:	d0a5ea04 	addi	r2,gp,-26712
    ALT_STUB_WARNING(fstat);
   1345c:	e037883a 	mov	sp,fp
   13460:	dfc00117 	ldw	ra,4(sp)
   13464:	df000017 	ldw	fp,0(sp)
   13468:	dec00204 	addi	sp,sp,8
   1346c:	f800283a 	ret

00013470 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   13470:	defffb04 	addi	sp,sp,-20
   13474:	dfc00415 	stw	ra,16(sp)
   13478:	df000315 	stw	fp,12(sp)
   1347c:	df000304 	addi	fp,sp,12
   13480:	e13ffe15 	stw	r4,-8(fp)
   13484:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13488:	e0bffe17 	ldw	r2,-8(fp)
   1348c:	10000916 	blt	r2,zero,134b4 <fstat+0x44>
   13490:	e0fffe17 	ldw	r3,-8(fp)
   13494:	1805883a 	mov	r2,r3
   13498:	1085883a 	add	r2,r2,r2
   1349c:	10c5883a 	add	r2,r2,r3
   134a0:	100490ba 	slli	r2,r2,2
   134a4:	00c00074 	movhi	r3,1
   134a8:	18d79d04 	addi	r3,r3,24180
   134ac:	10c5883a 	add	r2,r2,r3
   134b0:	00000106 	br	134b8 <fstat+0x48>
   134b4:	0005883a 	mov	r2,zero
   134b8:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   134bc:	e0bfff17 	ldw	r2,-4(fp)
   134c0:	10001026 	beq	r2,zero,13504 <fstat+0x94>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   134c4:	e0bfff17 	ldw	r2,-4(fp)
   134c8:	10800017 	ldw	r2,0(r2)
   134cc:	10800817 	ldw	r2,32(r2)
   134d0:	10000726 	beq	r2,zero,134f0 <fstat+0x80>
    {
      return fd->dev->fstat(fd, st);
   134d4:	e0bfff17 	ldw	r2,-4(fp)
   134d8:	10800017 	ldw	r2,0(r2)
   134dc:	10800817 	ldw	r2,32(r2)
   134e0:	e17ffd17 	ldw	r5,-12(fp)
   134e4:	e13fff17 	ldw	r4,-4(fp)
   134e8:	103ee83a 	callr	r2
   134ec:	00000a06 	br	13518 <fstat+0xa8>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   134f0:	e0bffd17 	ldw	r2,-12(fp)
   134f4:	00c80004 	movi	r3,8192
   134f8:	10c00115 	stw	r3,4(r2)
      return 0;
   134fc:	0005883a 	mov	r2,zero
   13500:	00000506 	br	13518 <fstat+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   13504:	00134340 	call	13434 <alt_get_errno>
   13508:	1007883a 	mov	r3,r2
   1350c:	00801444 	movi	r2,81
   13510:	18800015 	stw	r2,0(r3)
    return -1;
   13514:	00bfffc4 	movi	r2,-1
  }
}
   13518:	e037883a 	mov	sp,fp
   1351c:	dfc00117 	ldw	ra,4(sp)
   13520:	df000017 	ldw	fp,0(sp)
   13524:	dec00204 	addi	sp,sp,8
   13528:	f800283a 	ret

0001352c <alt_get_errno>:
 * refers to a terminal device or not. If it is a terminal device then the
 * return value is one, otherwise it is zero.  
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
   1352c:	defffe04 	addi	sp,sp,-8
   13530:	dfc00115 	stw	ra,4(sp)
   13534:	df000015 	stw	fp,0(sp)
   13538:	d839883a 	mov	fp,sp
int ALT_ISATTY (int file)
   1353c:	d0a00917 	ldw	r2,-32732(gp)
   13540:	10000326 	beq	r2,zero,13550 <alt_get_errno+0x24>
   13544:	d0a00917 	ldw	r2,-32732(gp)
   13548:	103ee83a 	callr	r2
   1354c:	00000106 	br	13554 <alt_get_errno+0x28>
   13550:	d0a5ea04 	addi	r2,gp,-26712
{
   13554:	e037883a 	mov	sp,fp
   13558:	dfc00117 	ldw	ra,4(sp)
   1355c:	df000017 	ldw	fp,0(sp)
   13560:	dec00204 	addi	sp,sp,8
   13564:	f800283a 	ret

00013568 <isatty>:
   13568:	deffea04 	addi	sp,sp,-88
   1356c:	dfc01515 	stw	ra,84(sp)
   13570:	df001415 	stw	fp,80(sp)
   13574:	df001404 	addi	fp,sp,80
   13578:	e13fec15 	stw	r4,-80(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1357c:	e0bfec17 	ldw	r2,-80(fp)
   13580:	10000916 	blt	r2,zero,135a8 <isatty+0x40>
   13584:	e0ffec17 	ldw	r3,-80(fp)
   13588:	1805883a 	mov	r2,r3
   1358c:	1085883a 	add	r2,r2,r2
   13590:	10c5883a 	add	r2,r2,r3
   13594:	100490ba 	slli	r2,r2,2
   13598:	00c00074 	movhi	r3,1
   1359c:	18d79d04 	addi	r3,r3,24180
   135a0:	10c5883a 	add	r2,r2,r3
   135a4:	00000106 	br	135ac <isatty+0x44>
   135a8:	0005883a 	mov	r2,zero
   135ac:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   135b0:	e0bfff17 	ldw	r2,-4(fp)
   135b4:	10000e26 	beq	r2,zero,135f0 <isatty+0x88>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   135b8:	e0bfff17 	ldw	r2,-4(fp)
   135bc:	10800017 	ldw	r2,0(r2)
   135c0:	10800817 	ldw	r2,32(r2)
   135c4:	1000021e 	bne	r2,zero,135d0 <isatty+0x68>
    {
      return 1;
   135c8:	00800044 	movi	r2,1
   135cc:	00000d06 	br	13604 <isatty+0x9c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   135d0:	e0bfed04 	addi	r2,fp,-76
   135d4:	100b883a 	mov	r5,r2
   135d8:	e13fec17 	ldw	r4,-80(fp)
   135dc:	00134700 	call	13470 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   135e0:	e0bfee17 	ldw	r2,-72(fp)
   135e4:	10880020 	cmpeqi	r2,r2,8192
   135e8:	10803fcc 	andi	r2,r2,255
   135ec:	00000506 	br	13604 <isatty+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   135f0:	001352c0 	call	1352c <alt_get_errno>
   135f4:	1007883a 	mov	r3,r2
   135f8:	00801444 	movi	r2,81
   135fc:	18800015 	stw	r2,0(r3)
    return 0;
   13600:	0005883a 	mov	r2,zero
  }
}
   13604:	e037883a 	mov	sp,fp
   13608:	dfc00117 	ldw	ra,4(sp)
   1360c:	df000017 	ldw	fp,0(sp)
   13610:	dec00204 	addi	sp,sp,8
   13614:	f800283a 	ret

00013618 <alt_load_section>:
 */  

void alt_load (void)
{
  /* 
   * Copy the .rwdata section. 
   13618:	defffc04 	addi	sp,sp,-16
   1361c:	df000315 	stw	fp,12(sp)
   13620:	df000304 	addi	fp,sp,12
   13624:	e13fff15 	stw	r4,-4(fp)
   13628:	e17ffe15 	stw	r5,-8(fp)
   1362c:	e1bffd15 	stw	r6,-12(fp)
   */
   13630:	e0fffe17 	ldw	r3,-8(fp)
   13634:	e0bfff17 	ldw	r2,-4(fp)
   13638:	18800c26 	beq	r3,r2,1366c <alt_load_section+0x54>

  alt_load_section (&__flash_rwdata_start, 
   1363c:	00000806 	br	13660 <alt_load_section+0x48>
		               &__ram_rwdata_start,
		               &__ram_rwdata_end);
   13640:	e0ffff17 	ldw	r3,-4(fp)
   13644:	18800104 	addi	r2,r3,4
   13648:	e0bfff15 	stw	r2,-4(fp)
   1364c:	e0bffe17 	ldw	r2,-8(fp)
   13650:	11000104 	addi	r4,r2,4
   13654:	e13ffe15 	stw	r4,-8(fp)
   13658:	18c00017 	ldw	r3,0(r3)
   1365c:	10c00015 	stw	r3,0(r2)
  alt_load_section (&__flash_rwdata_start, 
   13660:	e0fffe17 	ldw	r3,-8(fp)
   13664:	e0bffd17 	ldw	r2,-12(fp)
   13668:	18bff51e 	bne	r3,r2,13640 <alt_load_section+0x28>

  /*
   * Copy the exception handler.
   1366c:	0001883a 	nop
   13670:	e037883a 	mov	sp,fp
   13674:	df000017 	ldw	fp,0(sp)
   13678:	dec00104 	addi	sp,sp,4
   1367c:	f800283a 	ret

00013680 <alt_load>:
{
   13680:	defffe04 	addi	sp,sp,-8
   13684:	dfc00115 	stw	ra,4(sp)
   13688:	df000015 	stw	fp,0(sp)
   1368c:	d839883a 	mov	fp,sp
  alt_load_section (&__flash_rwdata_start, 
   13690:	01800074 	movhi	r6,1
   13694:	319c2304 	addi	r6,r6,28812
   13698:	01400074 	movhi	r5,1
   1369c:	29564704 	addi	r5,r5,22812
   136a0:	01000074 	movhi	r4,1
   136a4:	211c2304 	addi	r4,r4,28812
   136a8:	00136180 	call	13618 <alt_load_section>
   */

  alt_load_section (&__flash_exceptions_start, 
   136ac:	01800074 	movhi	r6,1
   136b0:	31808904 	addi	r6,r6,548
   136b4:	01400074 	movhi	r5,1
   136b8:	29400804 	addi	r5,r5,32
   136bc:	01000074 	movhi	r4,1
   136c0:	21000804 	addi	r4,r4,32
   136c4:	00136180 	call	13618 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   136c8:	01800074 	movhi	r6,1
   136cc:	31964704 	addi	r6,r6,22812
   136d0:	01400074 	movhi	r5,1
   136d4:	29563804 	addi	r5,r5,22752
   136d8:	01000074 	movhi	r4,1
   136dc:	21163804 	addi	r4,r4,22752
   136e0:	00136180 	call	13618 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   136e4:	0014abc0 	call	14abc <alt_dcache_flush_all>
  alt_icache_flush_all();
   136e8:	0014c880 	call	14c88 <alt_icache_flush_all>
}
   136ec:	0001883a 	nop
   136f0:	e037883a 	mov	sp,fp
   136f4:	dfc00117 	ldw	ra,4(sp)
   136f8:	df000017 	ldw	fp,0(sp)
   136fc:	dec00204 	addi	sp,sp,8
   13700:	f800283a 	ret

00013704 <alt_get_errno>:
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13704:	defffe04 	addi	sp,sp,-8
   13708:	dfc00115 	stw	ra,4(sp)
   1370c:	df000015 	stw	fp,0(sp)
   13710:	d839883a 	mov	fp,sp
  
   13714:	d0a00917 	ldw	r2,-32732(gp)
   13718:	10000326 	beq	r2,zero,13728 <alt_get_errno+0x24>
   1371c:	d0a00917 	ldw	r2,-32732(gp)
   13720:	103ee83a 	callr	r2
   13724:	00000106 	br	1372c <alt_get_errno+0x28>
   13728:	d0a5ea04 	addi	r2,gp,-26712
  if (fd) 
   1372c:	e037883a 	mov	sp,fp
   13730:	dfc00117 	ldw	ra,4(sp)
   13734:	df000017 	ldw	fp,0(sp)
   13738:	dec00204 	addi	sp,sp,8
   1373c:	f800283a 	ret

00013740 <lseek>:
{
   13740:	defff904 	addi	sp,sp,-28
   13744:	dfc00615 	stw	ra,24(sp)
   13748:	df000515 	stw	fp,20(sp)
   1374c:	df000504 	addi	fp,sp,20
   13750:	e13ffd15 	stw	r4,-12(fp)
   13754:	e17ffc15 	stw	r5,-16(fp)
   13758:	e1bffb15 	stw	r6,-20(fp)
  off_t   rc = 0; 
   1375c:	e03fff15 	stw	zero,-4(fp)
  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13760:	e0bffd17 	ldw	r2,-12(fp)
   13764:	10000916 	blt	r2,zero,1378c <lseek+0x4c>
   13768:	e0fffd17 	ldw	r3,-12(fp)
   1376c:	1805883a 	mov	r2,r3
   13770:	1085883a 	add	r2,r2,r2
   13774:	10c5883a 	add	r2,r2,r3
   13778:	100490ba 	slli	r2,r2,2
   1377c:	00c00074 	movhi	r3,1
   13780:	18d79d04 	addi	r3,r3,24180
   13784:	10c5883a 	add	r2,r2,r3
   13788:	00000106 	br	13790 <lseek+0x50>
   1378c:	0005883a 	mov	r2,zero
   13790:	e0bffe15 	stw	r2,-8(fp)
  if (fd) 
   13794:	e0bffe17 	ldw	r2,-8(fp)
   13798:	10001026 	beq	r2,zero,137dc <lseek+0x9c>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   1379c:	e0bffe17 	ldw	r2,-8(fp)
   137a0:	10800017 	ldw	r2,0(r2)
   137a4:	10800717 	ldw	r2,28(r2)
   137a8:	10000926 	beq	r2,zero,137d0 <lseek+0x90>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   137ac:	e0bffe17 	ldw	r2,-8(fp)
   137b0:	10800017 	ldw	r2,0(r2)
   137b4:	10800717 	ldw	r2,28(r2)
   137b8:	e1bffb17 	ldw	r6,-20(fp)
   137bc:	e17ffc17 	ldw	r5,-16(fp)
   137c0:	e13ffe17 	ldw	r4,-8(fp)
   137c4:	103ee83a 	callr	r2
   137c8:	e0bfff15 	stw	r2,-4(fp)
   137cc:	00000506 	br	137e4 <lseek+0xa4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   137d0:	00bfde84 	movi	r2,-134
   137d4:	e0bfff15 	stw	r2,-4(fp)
   137d8:	00000206 	br	137e4 <lseek+0xa4>
    }
  }
  else  
  {
    rc = -EBADFD;
   137dc:	00bfebc4 	movi	r2,-81
   137e0:	e0bfff15 	stw	r2,-4(fp)
  }

  if (rc < 0)
   137e4:	e0bfff17 	ldw	r2,-4(fp)
   137e8:	1000070e 	bge	r2,zero,13808 <lseek+0xc8>
  {
    ALT_ERRNO = -rc;
   137ec:	00137040 	call	13704 <alt_get_errno>
   137f0:	1007883a 	mov	r3,r2
   137f4:	e0bfff17 	ldw	r2,-4(fp)
   137f8:	0085c83a 	sub	r2,zero,r2
   137fc:	18800015 	stw	r2,0(r3)
    rc = -1;
   13800:	00bfffc4 	movi	r2,-1
   13804:	e0bfff15 	stw	r2,-4(fp)
  }

  return rc;
   13808:	e0bfff17 	ldw	r2,-4(fp)
}
   1380c:	e037883a 	mov	sp,fp
   13810:	dfc00117 	ldw	ra,4(sp)
   13814:	df000017 	ldw	fp,0(sp)
   13818:	dec00204 	addi	sp,sp,8
   1381c:	f800283a 	ret

00013820 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   13820:	defffd04 	addi	sp,sp,-12
   13824:	dfc00215 	stw	ra,8(sp)
   13828:	df000115 	stw	fp,4(sp)
   1382c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   13830:	0009883a 	mov	r4,zero
   13834:	0013cf40 	call	13cf4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   13838:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   1383c:	0013d300 	call	13d30 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   13840:	01800074 	movhi	r6,1
   13844:	31964104 	addi	r6,r6,22788
   13848:	01400074 	movhi	r5,1
   1384c:	29564104 	addi	r5,r5,22788
   13850:	01000074 	movhi	r4,1
   13854:	21164104 	addi	r4,r4,22788
   13858:	00150140 	call	15014 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   1385c:	0014bc00 	call	14bc0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   13860:	01000074 	movhi	r4,1
   13864:	21130904 	addi	r4,r4,19492
   13868:	00157c00 	call	157c0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   1386c:	d0a5f017 	ldw	r2,-26688(gp)
   13870:	d0e5f117 	ldw	r3,-26684(gp)
   13874:	d125f217 	ldw	r4,-26680(gp)
   13878:	200d883a 	mov	r6,r4
   1387c:	180b883a 	mov	r5,r3
   13880:	1009883a 	mov	r4,r2
   13884:	00102a00 	call	102a0 <main>
   13888:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   1388c:	01000044 	movi	r4,1
   13890:	00132f00 	call	132f0 <close>
  exit (result);
   13894:	e13fff17 	ldw	r4,-4(fp)
   13898:	00116a40 	call	116a4 <exit>

0001389c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   1389c:	defffe04 	addi	sp,sp,-8
   138a0:	df000115 	stw	fp,4(sp)
   138a4:	df000104 	addi	fp,sp,4
   138a8:	e13fff15 	stw	r4,-4(fp)
}
   138ac:	0001883a 	nop
   138b0:	e037883a 	mov	sp,fp
   138b4:	df000017 	ldw	fp,0(sp)
   138b8:	dec00104 	addi	sp,sp,4
   138bc:	f800283a 	ret

000138c0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   138c0:	defffe04 	addi	sp,sp,-8
   138c4:	df000115 	stw	fp,4(sp)
   138c8:	df000104 	addi	fp,sp,4
   138cc:	e13fff15 	stw	r4,-4(fp)
}
   138d0:	0001883a 	nop
   138d4:	e037883a 	mov	sp,fp
   138d8:	df000017 	ldw	fp,0(sp)
   138dc:	dec00104 	addi	sp,sp,4
   138e0:	f800283a 	ret

000138e4 <alt_get_errno>:
        return -1;
    }
}

#else /* !ALT_USE_DIRECT_DRIVERS */

   138e4:	defffe04 	addi	sp,sp,-8
   138e8:	dfc00115 	stw	ra,4(sp)
   138ec:	df000015 	stw	fp,0(sp)
   138f0:	d839883a 	mov	fp,sp
int ALT_READ (int file, void *ptr, size_t len)
   138f4:	d0a00917 	ldw	r2,-32732(gp)
   138f8:	10000326 	beq	r2,zero,13908 <alt_get_errno+0x24>
   138fc:	d0a00917 	ldw	r2,-32732(gp)
   13900:	103ee83a 	callr	r2
   13904:	00000106 	br	1390c <alt_get_errno+0x28>
   13908:	d0a5ea04 	addi	r2,gp,-26712
{
   1390c:	e037883a 	mov	sp,fp
   13910:	dfc00117 	ldw	ra,4(sp)
   13914:	df000017 	ldw	fp,0(sp)
   13918:	dec00204 	addi	sp,sp,8
   1391c:	f800283a 	ret

00013920 <read>:
   13920:	defff904 	addi	sp,sp,-28
   13924:	dfc00615 	stw	ra,24(sp)
   13928:	df000515 	stw	fp,20(sp)
   1392c:	df000504 	addi	fp,sp,20
   13930:	e13ffd15 	stw	r4,-12(fp)
   13934:	e17ffc15 	stw	r5,-16(fp)
   13938:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1393c:	e0bffd17 	ldw	r2,-12(fp)
   13940:	10000916 	blt	r2,zero,13968 <read+0x48>
   13944:	e0fffd17 	ldw	r3,-12(fp)
   13948:	1805883a 	mov	r2,r3
   1394c:	1085883a 	add	r2,r2,r2
   13950:	10c5883a 	add	r2,r2,r3
   13954:	100490ba 	slli	r2,r2,2
   13958:	00c00074 	movhi	r3,1
   1395c:	18d79d04 	addi	r3,r3,24180
   13960:	10c5883a 	add	r2,r2,r3
   13964:	00000106 	br	1396c <read+0x4c>
   13968:	0005883a 	mov	r2,zero
   1396c:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   13970:	e0bfff17 	ldw	r2,-4(fp)
   13974:	10002226 	beq	r2,zero,13a00 <read+0xe0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   13978:	e0bfff17 	ldw	r2,-4(fp)
   1397c:	10800217 	ldw	r2,8(r2)
   13980:	108000cc 	andi	r2,r2,3
   13984:	10800060 	cmpeqi	r2,r2,1
   13988:	1000181e 	bne	r2,zero,139ec <read+0xcc>
        (fd->dev->read))
   1398c:	e0bfff17 	ldw	r2,-4(fp)
   13990:	10800017 	ldw	r2,0(r2)
   13994:	10800517 	ldw	r2,20(r2)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   13998:	10001426 	beq	r2,zero,139ec <read+0xcc>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   1399c:	e0bfff17 	ldw	r2,-4(fp)
   139a0:	10800017 	ldw	r2,0(r2)
   139a4:	10800517 	ldw	r2,20(r2)
   139a8:	e0fffb17 	ldw	r3,-20(fp)
   139ac:	180d883a 	mov	r6,r3
   139b0:	e17ffc17 	ldw	r5,-16(fp)
   139b4:	e13fff17 	ldw	r4,-4(fp)
   139b8:	103ee83a 	callr	r2
   139bc:	e0bffe15 	stw	r2,-8(fp)
   139c0:	e0bffe17 	ldw	r2,-8(fp)
   139c4:	1000070e 	bge	r2,zero,139e4 <read+0xc4>
        {
          ALT_ERRNO = -rval;
   139c8:	00138e40 	call	138e4 <alt_get_errno>
   139cc:	1007883a 	mov	r3,r2
   139d0:	e0bffe17 	ldw	r2,-8(fp)
   139d4:	0085c83a 	sub	r2,zero,r2
   139d8:	18800015 	stw	r2,0(r3)
          return -1;
   139dc:	00bfffc4 	movi	r2,-1
   139e0:	00000c06 	br	13a14 <read+0xf4>
        }
        return rval;
   139e4:	e0bffe17 	ldw	r2,-8(fp)
   139e8:	00000a06 	br	13a14 <read+0xf4>
      }
      else
      {
        ALT_ERRNO = EACCES;
   139ec:	00138e40 	call	138e4 <alt_get_errno>
   139f0:	1007883a 	mov	r3,r2
   139f4:	00800344 	movi	r2,13
   139f8:	18800015 	stw	r2,0(r3)
   139fc:	00000406 	br	13a10 <read+0xf0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   13a00:	00138e40 	call	138e4 <alt_get_errno>
   13a04:	1007883a 	mov	r3,r2
   13a08:	00801444 	movi	r2,81
   13a0c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   13a10:	00bfffc4 	movi	r2,-1
}
   13a14:	e037883a 	mov	sp,fp
   13a18:	dfc00117 	ldw	ra,4(sp)
   13a1c:	df000017 	ldw	fp,0(sp)
   13a20:	dec00204 	addi	sp,sp,8
   13a24:	f800283a 	ret

00013a28 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   13a28:	defffe04 	addi	sp,sp,-8
   13a2c:	df000115 	stw	fp,4(sp)
   13a30:	df000104 	addi	fp,sp,4
   13a34:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   13a38:	e0bfff17 	ldw	r2,-4(fp)
   13a3c:	108000d0 	cmplti	r2,r2,3
   13a40:	1000101e 	bne	r2,zero,13a84 <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
   13a44:	e0ffff17 	ldw	r3,-4(fp)
   13a48:	1805883a 	mov	r2,r3
   13a4c:	1085883a 	add	r2,r2,r2
   13a50:	10c5883a 	add	r2,r2,r3
   13a54:	100490ba 	slli	r2,r2,2
   13a58:	00c00074 	movhi	r3,1
   13a5c:	10c7883a 	add	r3,r2,r3
   13a60:	18179f15 	stw	zero,24188(r3)
    alt_fd_list[fd].dev      = 0;
   13a64:	e0ffff17 	ldw	r3,-4(fp)
   13a68:	1805883a 	mov	r2,r3
   13a6c:	1085883a 	add	r2,r2,r2
   13a70:	10c5883a 	add	r2,r2,r3
   13a74:	100490ba 	slli	r2,r2,2
   13a78:	00c00074 	movhi	r3,1
   13a7c:	10c7883a 	add	r3,r2,r3
   13a80:	18179d15 	stw	zero,24180(r3)
  }
}
   13a84:	0001883a 	nop
   13a88:	e037883a 	mov	sp,fp
   13a8c:	df000017 	ldw	fp,0(sp)
   13a90:	dec00104 	addi	sp,sp,4
   13a94:	f800283a 	ret

00013a98 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   13a98:	defff904 	addi	sp,sp,-28
   13a9c:	df000615 	stw	fp,24(sp)
   13aa0:	df000604 	addi	fp,sp,24
   13aa4:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
   13aa8:	0005303a 	rdctl	r2,status
   13aac:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13ab0:	e0fffd17 	ldw	r3,-12(fp)
   13ab4:	00bfff84 	movi	r2,-2
   13ab8:	1884703a 	and	r2,r3,r2
   13abc:	1001703a 	wrctl	status,r2
  return context;
   13ac0:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   13ac4:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   13ac8:	d0a00a17 	ldw	r2,-32728(gp)
   13acc:	10c000c4 	addi	r3,r2,3
   13ad0:	00bfff04 	movi	r2,-4
   13ad4:	1884703a 	and	r2,r3,r2
   13ad8:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   13adc:	d0e00a17 	ldw	r3,-32728(gp)
   13ae0:	e0bffa17 	ldw	r2,-24(fp)
   13ae4:	1887883a 	add	r3,r3,r2
   13ae8:	008000b4 	movhi	r2,2
   13aec:	10a80004 	addi	r2,r2,-24576
   13af0:	10c0072e 	bgeu	r2,r3,13b10 <sbrk+0x78>
   13af4:	e0bfff17 	ldw	r2,-4(fp)
   13af8:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   13afc:	e0bffc17 	ldw	r2,-16(fp)
   13b00:	1001703a 	wrctl	status,r2
}
   13b04:	0001883a 	nop
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   13b08:	00bfffc4 	movi	r2,-1
   13b0c:	00000c06 	br	13b40 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   13b10:	d0a00a17 	ldw	r2,-32728(gp)
   13b14:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
   13b18:	d0e00a17 	ldw	r3,-32728(gp)
   13b1c:	e0bffa17 	ldw	r2,-24(fp)
   13b20:	1885883a 	add	r2,r3,r2
   13b24:	d0a00a15 	stw	r2,-32728(gp)
   13b28:	e0bfff17 	ldw	r2,-4(fp)
   13b2c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   13b30:	e0bffb17 	ldw	r2,-20(fp)
   13b34:	1001703a 	wrctl	status,r2
}
   13b38:	0001883a 	nop

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   13b3c:	e0bffe17 	ldw	r2,-8(fp)
} 
   13b40:	e037883a 	mov	sp,fp
   13b44:	df000017 	ldw	fp,0(sp)
   13b48:	dec00104 	addi	sp,sp,4
   13b4c:	f800283a 	ret

00013b50 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   13b50:	defffd04 	addi	sp,sp,-12
   13b54:	dfc00215 	stw	ra,8(sp)
   13b58:	df000115 	stw	fp,4(sp)
   13b5c:	df000104 	addi	fp,sp,4
   13b60:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   13b64:	e13fff17 	ldw	r4,-4(fp)
   13b68:	00149640 	call	14964 <alt_busy_sleep>
}
   13b6c:	e037883a 	mov	sp,fp
   13b70:	dfc00117 	ldw	ra,4(sp)
   13b74:	df000017 	ldw	fp,0(sp)
   13b78:	dec00204 	addi	sp,sp,8
   13b7c:	f800283a 	ret

00013b80 <alt_get_errno>:
#ifdef ALT_STDOUT_PRESENT
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
   13b80:	defffe04 	addi	sp,sp,-8
   13b84:	dfc00115 	stw	ra,4(sp)
   13b88:	df000015 	stw	fp,0(sp)
   13b8c:	d839883a 	mov	fp,sp
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
   13b90:	d0a00917 	ldw	r2,-32732(gp)
   13b94:	10000326 	beq	r2,zero,13ba4 <alt_get_errno+0x24>
   13b98:	d0a00917 	ldw	r2,-32732(gp)
   13b9c:	103ee83a 	callr	r2
   13ba0:	00000106 	br	13ba8 <alt_get_errno+0x28>
   13ba4:	d0a5ea04 	addi	r2,gp,-26712
#endif /* ALT_STDERR_PRESENT */
   13ba8:	e037883a 	mov	sp,fp
   13bac:	dfc00117 	ldw	ra,4(sp)
   13bb0:	df000017 	ldw	fp,0(sp)
   13bb4:	dec00204 	addi	sp,sp,8
   13bb8:	f800283a 	ret

00013bbc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   13bbc:	defff904 	addi	sp,sp,-28
   13bc0:	dfc00615 	stw	ra,24(sp)
   13bc4:	df000515 	stw	fp,20(sp)
   13bc8:	df000504 	addi	fp,sp,20
   13bcc:	e13ffd15 	stw	r4,-12(fp)
   13bd0:	e17ffc15 	stw	r5,-16(fp)
   13bd4:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13bd8:	e0bffd17 	ldw	r2,-12(fp)
   13bdc:	10000916 	blt	r2,zero,13c04 <write+0x48>
   13be0:	e0fffd17 	ldw	r3,-12(fp)
   13be4:	1805883a 	mov	r2,r3
   13be8:	1085883a 	add	r2,r2,r2
   13bec:	10c5883a 	add	r2,r2,r3
   13bf0:	100490ba 	slli	r2,r2,2
   13bf4:	00c00074 	movhi	r3,1
   13bf8:	18d79d04 	addi	r3,r3,24180
   13bfc:	10c5883a 	add	r2,r2,r3
   13c00:	00000106 	br	13c08 <write+0x4c>
   13c04:	0005883a 	mov	r2,zero
   13c08:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   13c0c:	e0bfff17 	ldw	r2,-4(fp)
   13c10:	10002126 	beq	r2,zero,13c98 <write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   13c14:	e0bfff17 	ldw	r2,-4(fp)
   13c18:	10800217 	ldw	r2,8(r2)
   13c1c:	108000cc 	andi	r2,r2,3
   13c20:	10001826 	beq	r2,zero,13c84 <write+0xc8>
   13c24:	e0bfff17 	ldw	r2,-4(fp)
   13c28:	10800017 	ldw	r2,0(r2)
   13c2c:	10800617 	ldw	r2,24(r2)
   13c30:	10001426 	beq	r2,zero,13c84 <write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   13c34:	e0bfff17 	ldw	r2,-4(fp)
   13c38:	10800017 	ldw	r2,0(r2)
   13c3c:	10800617 	ldw	r2,24(r2)
   13c40:	e0fffb17 	ldw	r3,-20(fp)
   13c44:	180d883a 	mov	r6,r3
   13c48:	e17ffc17 	ldw	r5,-16(fp)
   13c4c:	e13fff17 	ldw	r4,-4(fp)
   13c50:	103ee83a 	callr	r2
   13c54:	e0bffe15 	stw	r2,-8(fp)
   13c58:	e0bffe17 	ldw	r2,-8(fp)
   13c5c:	1000070e 	bge	r2,zero,13c7c <write+0xc0>
      {
        ALT_ERRNO = -rval;
   13c60:	0013b800 	call	13b80 <alt_get_errno>
   13c64:	1007883a 	mov	r3,r2
   13c68:	e0bffe17 	ldw	r2,-8(fp)
   13c6c:	0085c83a 	sub	r2,zero,r2
   13c70:	18800015 	stw	r2,0(r3)
        return -1;
   13c74:	00bfffc4 	movi	r2,-1
   13c78:	00000c06 	br	13cac <write+0xf0>
      }
      return rval;
   13c7c:	e0bffe17 	ldw	r2,-8(fp)
   13c80:	00000a06 	br	13cac <write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
   13c84:	0013b800 	call	13b80 <alt_get_errno>
   13c88:	1007883a 	mov	r3,r2
   13c8c:	00800344 	movi	r2,13
   13c90:	18800015 	stw	r2,0(r3)
   13c94:	00000406 	br	13ca8 <write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   13c98:	0013b800 	call	13b80 <alt_get_errno>
   13c9c:	1007883a 	mov	r3,r2
   13ca0:	00801444 	movi	r2,81
   13ca4:	18800015 	stw	r2,0(r3)
  }
  return -1;
   13ca8:	00bfffc4 	movi	r2,-1
}
   13cac:	e037883a 	mov	sp,fp
   13cb0:	dfc00117 	ldw	ra,4(sp)
   13cb4:	df000017 	ldw	fp,0(sp)
   13cb8:	dec00204 	addi	sp,sp,8
   13cbc:	f800283a 	ret

00013cc0 <alt_dev_reg>:
   13cc0:	defffd04 	addi	sp,sp,-12
   13cc4:	dfc00215 	stw	ra,8(sp)
   13cc8:	df000115 	stw	fp,4(sp)
   13ccc:	df000104 	addi	fp,sp,4
   13cd0:	e13fff15 	stw	r4,-4(fp)
   13cd4:	d1600604 	addi	r5,gp,-32744
   13cd8:	e13fff17 	ldw	r4,-4(fp)
   13cdc:	0014b180 	call	14b18 <alt_dev_llist_insert>
   13ce0:	e037883a 	mov	sp,fp
   13ce4:	dfc00117 	ldw	ra,4(sp)
   13ce8:	df000017 	ldw	fp,0(sp)
   13cec:	dec00204 	addi	sp,sp,8
   13cf0:	f800283a 	ret

00013cf4 <alt_irq_init>:
{
   13cf4:	defffd04 	addi	sp,sp,-12
   13cf8:	dfc00215 	stw	ra,8(sp)
   13cfc:	df000115 	stw	fp,4(sp)
   13d00:	df000104 	addi	fp,sp,4
   13d04:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS, NIOS);
   13d08:	00154d80 	call	154d8 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   13d0c:	00800044 	movi	r2,1
   13d10:	1001703a 	wrctl	status,r2
}
   13d14:	0001883a 	nop
}
   13d18:	0001883a 	nop
   13d1c:	e037883a 	mov	sp,fp
   13d20:	dfc00117 	ldw	ra,4(sp)
   13d24:	df000017 	ldw	fp,0(sp)
   13d28:	dec00204 	addi	sp,sp,8
   13d2c:	f800283a 	ret

00013d30 <alt_sys_init>:
{
   13d30:	defffe04 	addi	sp,sp,-8
   13d34:	dfc00115 	stw	ra,4(sp)
   13d38:	df000015 	stw	fp,0(sp)
   13d3c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( DEBUG, DEBUG);
   13d40:	01800044 	movi	r6,1
   13d44:	000b883a 	mov	r5,zero
   13d48:	01000074 	movhi	r4,1
   13d4c:	21180704 	addi	r4,r4,24604
   13d50:	0013ee40 	call	13ee4 <altera_avalon_jtag_uart_init>
   13d54:	01000074 	movhi	r4,1
   13d58:	2117fd04 	addi	r4,r4,24564
   13d5c:	0013cc00 	call	13cc0 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( ESC_SPI, ESC_SPI);
   13d60:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SYSID);
   13d64:	0001883a 	nop
}
   13d68:	0001883a 	nop
   13d6c:	e037883a 	mov	sp,fp
   13d70:	dfc00117 	ldw	ra,4(sp)
   13d74:	df000017 	ldw	fp,0(sp)
   13d78:	dec00204 	addi	sp,sp,8
   13d7c:	f800283a 	ret

00013d80 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   13d80:	defffa04 	addi	sp,sp,-24
   13d84:	dfc00515 	stw	ra,20(sp)
   13d88:	df000415 	stw	fp,16(sp)
   13d8c:	df000404 	addi	fp,sp,16
   13d90:	e13ffe15 	stw	r4,-8(fp)
   13d94:	e17ffd15 	stw	r5,-12(fp)
   13d98:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   13d9c:	e0bffe17 	ldw	r2,-8(fp)
   13da0:	10800017 	ldw	r2,0(r2)
   13da4:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   13da8:	e0bfff17 	ldw	r2,-4(fp)
   13dac:	10c00a04 	addi	r3,r2,40
   13db0:	e0bffe17 	ldw	r2,-8(fp)
   13db4:	10800217 	ldw	r2,8(r2)
   13db8:	100f883a 	mov	r7,r2
   13dbc:	e1bffc17 	ldw	r6,-16(fp)
   13dc0:	e17ffd17 	ldw	r5,-12(fp)
   13dc4:	1809883a 	mov	r4,r3
   13dc8:	00143bc0 	call	143bc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   13dcc:	e037883a 	mov	sp,fp
   13dd0:	dfc00117 	ldw	ra,4(sp)
   13dd4:	df000017 	ldw	fp,0(sp)
   13dd8:	dec00204 	addi	sp,sp,8
   13ddc:	f800283a 	ret

00013de0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   13de0:	defffa04 	addi	sp,sp,-24
   13de4:	dfc00515 	stw	ra,20(sp)
   13de8:	df000415 	stw	fp,16(sp)
   13dec:	df000404 	addi	fp,sp,16
   13df0:	e13ffe15 	stw	r4,-8(fp)
   13df4:	e17ffd15 	stw	r5,-12(fp)
   13df8:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   13dfc:	e0bffe17 	ldw	r2,-8(fp)
   13e00:	10800017 	ldw	r2,0(r2)
   13e04:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   13e08:	e0bfff17 	ldw	r2,-4(fp)
   13e0c:	10c00a04 	addi	r3,r2,40
   13e10:	e0bffe17 	ldw	r2,-8(fp)
   13e14:	10800217 	ldw	r2,8(r2)
   13e18:	100f883a 	mov	r7,r2
   13e1c:	e1bffc17 	ldw	r6,-16(fp)
   13e20:	e17ffd17 	ldw	r5,-12(fp)
   13e24:	1809883a 	mov	r4,r3
   13e28:	00145dc0 	call	145dc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   13e2c:	e037883a 	mov	sp,fp
   13e30:	dfc00117 	ldw	ra,4(sp)
   13e34:	df000017 	ldw	fp,0(sp)
   13e38:	dec00204 	addi	sp,sp,8
   13e3c:	f800283a 	ret

00013e40 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   13e40:	defffc04 	addi	sp,sp,-16
   13e44:	dfc00315 	stw	ra,12(sp)
   13e48:	df000215 	stw	fp,8(sp)
   13e4c:	df000204 	addi	fp,sp,8
   13e50:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   13e54:	e0bffe17 	ldw	r2,-8(fp)
   13e58:	10800017 	ldw	r2,0(r2)
   13e5c:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   13e60:	e0bfff17 	ldw	r2,-4(fp)
   13e64:	10c00a04 	addi	r3,r2,40
   13e68:	e0bffe17 	ldw	r2,-8(fp)
   13e6c:	10800217 	ldw	r2,8(r2)
   13e70:	100b883a 	mov	r5,r2
   13e74:	1809883a 	mov	r4,r3
   13e78:	00142600 	call	14260 <altera_avalon_jtag_uart_close>
}
   13e7c:	e037883a 	mov	sp,fp
   13e80:	dfc00117 	ldw	ra,4(sp)
   13e84:	df000017 	ldw	fp,0(sp)
   13e88:	dec00204 	addi	sp,sp,8
   13e8c:	f800283a 	ret

00013e90 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   13e90:	defffa04 	addi	sp,sp,-24
   13e94:	dfc00515 	stw	ra,20(sp)
   13e98:	df000415 	stw	fp,16(sp)
   13e9c:	df000404 	addi	fp,sp,16
   13ea0:	e13ffe15 	stw	r4,-8(fp)
   13ea4:	e17ffd15 	stw	r5,-12(fp)
   13ea8:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   13eac:	e0bffe17 	ldw	r2,-8(fp)
   13eb0:	10800017 	ldw	r2,0(r2)
   13eb4:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   13eb8:	e0bfff17 	ldw	r2,-4(fp)
   13ebc:	10800a04 	addi	r2,r2,40
   13ec0:	e1bffc17 	ldw	r6,-16(fp)
   13ec4:	e17ffd17 	ldw	r5,-12(fp)
   13ec8:	1009883a 	mov	r4,r2
   13ecc:	00142c80 	call	142c8 <altera_avalon_jtag_uart_ioctl>
}
   13ed0:	e037883a 	mov	sp,fp
   13ed4:	dfc00117 	ldw	ra,4(sp)
   13ed8:	df000017 	ldw	fp,0(sp)
   13edc:	dec00204 	addi	sp,sp,8
   13ee0:	f800283a 	ret

00013ee4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   13ee4:	defffa04 	addi	sp,sp,-24
   13ee8:	dfc00515 	stw	ra,20(sp)
   13eec:	df000415 	stw	fp,16(sp)
   13ef0:	df000404 	addi	fp,sp,16
   13ef4:	e13fff15 	stw	r4,-4(fp)
   13ef8:	e17ffe15 	stw	r5,-8(fp)
   13efc:	e1bffd15 	stw	r6,-12(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   13f00:	e0bfff17 	ldw	r2,-4(fp)
   13f04:	00c00044 	movi	r3,1
   13f08:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   13f0c:	e0bfff17 	ldw	r2,-4(fp)
   13f10:	10800017 	ldw	r2,0(r2)
   13f14:	10800104 	addi	r2,r2,4
   13f18:	1007883a 	mov	r3,r2
   13f1c:	e0bfff17 	ldw	r2,-4(fp)
   13f20:	10800817 	ldw	r2,32(r2)
   13f24:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   13f28:	e0bffe17 	ldw	r2,-8(fp)
   13f2c:	e0fffd17 	ldw	r3,-12(fp)
   13f30:	d8000015 	stw	zero,0(sp)
   13f34:	e1ffff17 	ldw	r7,-4(fp)
   13f38:	01800074 	movhi	r6,1
   13f3c:	318fe904 	addi	r6,r6,16292
   13f40:	180b883a 	mov	r5,r3
   13f44:	1009883a 	mov	r4,r2
   13f48:	0014ca80 	call	14ca8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   13f4c:	e0bfff17 	ldw	r2,-4(fp)
   13f50:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   13f54:	e0bfff17 	ldw	r2,-4(fp)
   13f58:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   13f5c:	d0e5f417 	ldw	r3,-26672(gp)
   13f60:	e1ffff17 	ldw	r7,-4(fp)
   13f64:	01800074 	movhi	r6,1
   13f68:	31906e04 	addi	r6,r6,16824
   13f6c:	180b883a 	mov	r5,r3
   13f70:	1009883a 	mov	r4,r2
   13f74:	00148040 	call	14804 <alt_alarm_start>
   13f78:	1000040e 	bge	r2,zero,13f8c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   13f7c:	e0ffff17 	ldw	r3,-4(fp)
   13f80:	00a00034 	movhi	r2,32768
   13f84:	10bfffc4 	addi	r2,r2,-1
   13f88:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   13f8c:	0001883a 	nop
   13f90:	e037883a 	mov	sp,fp
   13f94:	dfc00117 	ldw	ra,4(sp)
   13f98:	df000017 	ldw	fp,0(sp)
   13f9c:	dec00204 	addi	sp,sp,8
   13fa0:	f800283a 	ret

00013fa4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   13fa4:	defff704 	addi	sp,sp,-36
   13fa8:	df000815 	stw	fp,32(sp)
   13fac:	df000804 	addi	fp,sp,32
   13fb0:	e13ff815 	stw	r4,-32(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   13fb4:	e0bff817 	ldw	r2,-32(fp)
   13fb8:	e0bffc15 	stw	r2,-16(fp)
  unsigned int base = sp->base;
   13fbc:	e0bffc17 	ldw	r2,-16(fp)
   13fc0:	10800017 	ldw	r2,0(r2)
   13fc4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int postflag=0;
   13fc8:	e03fff15 	stw	zero,-4(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   13fcc:	e0bffb17 	ldw	r2,-20(fp)
   13fd0:	10800104 	addi	r2,r2,4
   13fd4:	10800037 	ldwio	r2,0(r2)
   13fd8:	e0bffa15 	stw	r2,-24(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   13fdc:	e0bffa17 	ldw	r2,-24(fp)
   13fe0:	1080c00c 	andi	r2,r2,768
   13fe4:	10006e26 	beq	r2,zero,141a0 <altera_avalon_jtag_uart_irq+0x1fc>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   13fe8:	e0bffa17 	ldw	r2,-24(fp)
   13fec:	1080400c 	andi	r2,r2,256
   13ff0:	10003526 	beq	r2,zero,140c8 <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   13ff4:	00800074 	movhi	r2,1
   13ff8:	e0bffe15 	stw	r2,-8(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   13ffc:	e0bffc17 	ldw	r2,-16(fp)
   14000:	10800a17 	ldw	r2,40(r2)
   14004:	10800044 	addi	r2,r2,1
   14008:	1081ffcc 	andi	r2,r2,2047
   1400c:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
   14010:	e0bffc17 	ldw	r2,-16(fp)
   14014:	10800b17 	ldw	r2,44(r2)
   14018:	e0fff917 	ldw	r3,-28(fp)
   1401c:	18801526 	beq	r3,r2,14074 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   14020:	e0bffb17 	ldw	r2,-20(fp)
   14024:	10800037 	ldwio	r2,0(r2)
   14028:	e0bffe15 	stw	r2,-8(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   1402c:	e0bffe17 	ldw	r2,-8(fp)
   14030:	10a0000c 	andi	r2,r2,32768
   14034:	10001126 	beq	r2,zero,1407c <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   14038:	e0bffc17 	ldw	r2,-16(fp)
   1403c:	10800a17 	ldw	r2,40(r2)
   14040:	e0fffe17 	ldw	r3,-8(fp)
   14044:	1809883a 	mov	r4,r3
   14048:	e0fffc17 	ldw	r3,-16(fp)
   1404c:	1885883a 	add	r2,r3,r2
   14050:	11000e05 	stb	r4,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   14054:	e0bffc17 	ldw	r2,-16(fp)
   14058:	10800a17 	ldw	r2,40(r2)
   1405c:	10800044 	addi	r2,r2,1
   14060:	10c1ffcc 	andi	r3,r2,2047
   14064:	e0bffc17 	ldw	r2,-16(fp)
   14068:	10c00a15 	stw	r3,40(r2)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   1406c:	0001883a 	nop
      {
   14070:	003fe206 	br	13ffc <altera_avalon_jtag_uart_irq+0x58>
          break;
   14074:	0001883a 	nop
   14078:	00000106 	br	14080 <altera_avalon_jtag_uart_irq+0xdc>
          break;
   1407c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, ALT_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   14080:	e0bffe17 	ldw	r2,-8(fp)
   14084:	00ffffd4 	movui	r3,65535
   14088:	18800f2e 	bgeu	r3,r2,140c8 <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1408c:	e0bffc17 	ldw	r2,-16(fp)
   14090:	10c00817 	ldw	r3,32(r2)
   14094:	00bfff84 	movi	r2,-2
   14098:	1886703a 	and	r3,r3,r2
   1409c:	e0bffc17 	ldw	r2,-16(fp)
   140a0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   140a4:	e0bffb17 	ldw	r2,-20(fp)
   140a8:	10800104 	addi	r2,r2,4
   140ac:	1007883a 	mov	r3,r2
   140b0:	e0bffc17 	ldw	r2,-16(fp)
   140b4:	10800817 	ldw	r2,32(r2)
   140b8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   140bc:	e0bffb17 	ldw	r2,-20(fp)
   140c0:	10800104 	addi	r2,r2,4
   140c4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   140c8:	e0bffa17 	ldw	r2,-24(fp)
   140cc:	1080800c 	andi	r2,r2,512
   140d0:	103fbe26 	beq	r2,zero,13fcc <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   140d4:	e0bffa17 	ldw	r2,-24(fp)
   140d8:	1004d43a 	srli	r2,r2,16
   140dc:	e0bffd15 	stw	r2,-12(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   140e0:	00001506 	br	14138 <altera_avalon_jtag_uart_irq+0x194>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   140e4:	e0bffb17 	ldw	r2,-20(fp)
   140e8:	e0fffc17 	ldw	r3,-16(fp)
   140ec:	18c00d17 	ldw	r3,52(r3)
   140f0:	e13ffc17 	ldw	r4,-16(fp)
   140f4:	20c7883a 	add	r3,r4,r3
   140f8:	18c20e03 	ldbu	r3,2104(r3)
   140fc:	18c03fcc 	andi	r3,r3,255
   14100:	18c0201c 	xori	r3,r3,128
   14104:	18ffe004 	addi	r3,r3,-128
   14108:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1410c:	e0bffc17 	ldw	r2,-16(fp)
   14110:	10800d17 	ldw	r2,52(r2)
   14114:	10800044 	addi	r2,r2,1
   14118:	10c1ffcc 	andi	r3,r2,2047
   1411c:	e0bffc17 	ldw	r2,-16(fp)
   14120:	10c00d15 	stw	r3,52(r2)
        
        /* indicate that the ALT_FLAG_POST routine must be called */
        postflag=1;
   14124:	00800044 	movi	r2,1
   14128:	e0bfff15 	stw	r2,-4(fp)

        space--;
   1412c:	e0bffd17 	ldw	r2,-12(fp)
   14130:	10bfffc4 	addi	r2,r2,-1
   14134:	e0bffd15 	stw	r2,-12(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
   14138:	e0bffd17 	ldw	r2,-12(fp)
   1413c:	10000526 	beq	r2,zero,14154 <altera_avalon_jtag_uart_irq+0x1b0>
   14140:	e0bffc17 	ldw	r2,-16(fp)
   14144:	10c00d17 	ldw	r3,52(r2)
   14148:	e0bffc17 	ldw	r2,-16(fp)
   1414c:	10800c17 	ldw	r2,48(r2)
   14150:	18bfe41e 	bne	r3,r2,140e4 <altera_avalon_jtag_uart_irq+0x140>
      {
        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, ALT_FLAG_SET);
      }

      if (space > 0)
   14154:	e0bffd17 	ldw	r2,-12(fp)
   14158:	103f9c26 	beq	r2,zero,13fcc <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1415c:	e0bffc17 	ldw	r2,-16(fp)
   14160:	10c00817 	ldw	r3,32(r2)
   14164:	00bfff44 	movi	r2,-3
   14168:	1886703a 	and	r3,r3,r2
   1416c:	e0bffc17 	ldw	r2,-16(fp)
   14170:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   14174:	e0bffc17 	ldw	r2,-16(fp)
   14178:	10800017 	ldw	r2,0(r2)
   1417c:	10800104 	addi	r2,r2,4
   14180:	1007883a 	mov	r3,r2
   14184:	e0bffc17 	ldw	r2,-16(fp)
   14188:	10800817 	ldw	r2,32(r2)
   1418c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   14190:	e0bffb17 	ldw	r2,-20(fp)
   14194:	10800104 	addi	r2,r2,4
   14198:	10800037 	ldwio	r2,0(r2)
  {
   1419c:	003f8b06 	br	13fcc <altera_avalon_jtag_uart_irq+0x28>
      break;
   141a0:	0001883a 	nop
      }
    }
  }
}
   141a4:	0001883a 	nop
   141a8:	e037883a 	mov	sp,fp
   141ac:	df000017 	ldw	fp,0(sp)
   141b0:	dec00104 	addi	sp,sp,4
   141b4:	f800283a 	ret

000141b8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   141b8:	defffc04 	addi	sp,sp,-16
   141bc:	df000315 	stw	fp,12(sp)
   141c0:	df000304 	addi	fp,sp,12
   141c4:	e13ffd15 	stw	r4,-12(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   141c8:	e0bffd17 	ldw	r2,-12(fp)
   141cc:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   141d0:	e0bfff17 	ldw	r2,-4(fp)
   141d4:	10800017 	ldw	r2,0(r2)
   141d8:	10800104 	addi	r2,r2,4
   141dc:	10800037 	ldwio	r2,0(r2)
   141e0:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   141e4:	e0bffe17 	ldw	r2,-8(fp)
   141e8:	1081000c 	andi	r2,r2,1024
   141ec:	10000b26 	beq	r2,zero,1421c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   141f0:	e0bfff17 	ldw	r2,-4(fp)
   141f4:	10800017 	ldw	r2,0(r2)
   141f8:	10800104 	addi	r2,r2,4
   141fc:	1007883a 	mov	r3,r2
   14200:	e0bfff17 	ldw	r2,-4(fp)
   14204:	10800817 	ldw	r2,32(r2)
   14208:	10810014 	ori	r2,r2,1024
   1420c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   14210:	e0bfff17 	ldw	r2,-4(fp)
   14214:	10000915 	stw	zero,36(r2)
   14218:	00000c06 	br	1424c <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   1421c:	e0bfff17 	ldw	r2,-4(fp)
   14220:	10c00917 	ldw	r3,36(r2)
   14224:	00a00034 	movhi	r2,32768
   14228:	10bfff04 	addi	r2,r2,-4
   1422c:	10c00736 	bltu	r2,r3,1424c <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
   14230:	e0bfff17 	ldw	r2,-4(fp)
   14234:	10800917 	ldw	r2,36(r2)
   14238:	10c00044 	addi	r3,r2,1
   1423c:	e0bfff17 	ldw	r2,-4(fp)
   14240:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   14244:	e0bfff17 	ldw	r2,-4(fp)
   14248:	10800917 	ldw	r2,36(r2)
   1424c:	d0a5f417 	ldw	r2,-26672(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, ALT_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   14250:	e037883a 	mov	sp,fp
   14254:	df000017 	ldw	fp,0(sp)
   14258:	dec00104 	addi	sp,sp,4
   1425c:	f800283a 	ret

00014260 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   14260:	defffd04 	addi	sp,sp,-12
   14264:	df000215 	stw	fp,8(sp)
   14268:	df000204 	addi	fp,sp,8
   1426c:	e13fff15 	stw	r4,-4(fp)
   14270:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   14274:	00000506 	br	1428c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   14278:	e0bffe17 	ldw	r2,-8(fp)
   1427c:	1090000c 	andi	r2,r2,16384
   14280:	10000226 	beq	r2,zero,1428c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   14284:	00bffd44 	movi	r2,-11
   14288:	00000b06 	br	142b8 <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1428c:	e0bfff17 	ldw	r2,-4(fp)
   14290:	10c00d17 	ldw	r3,52(r2)
   14294:	e0bfff17 	ldw	r2,-4(fp)
   14298:	10800c17 	ldw	r2,48(r2)
   1429c:	18800526 	beq	r3,r2,142b4 <altera_avalon_jtag_uart_close+0x54>
   142a0:	e0bfff17 	ldw	r2,-4(fp)
   142a4:	10c00917 	ldw	r3,36(r2)
   142a8:	e0bfff17 	ldw	r2,-4(fp)
   142ac:	10800117 	ldw	r2,4(r2)
   142b0:	18bff136 	bltu	r3,r2,14278 <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
   142b4:	0005883a 	mov	r2,zero
}
   142b8:	e037883a 	mov	sp,fp
   142bc:	df000017 	ldw	fp,0(sp)
   142c0:	dec00104 	addi	sp,sp,4
   142c4:	f800283a 	ret

000142c8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   142c8:	defffa04 	addi	sp,sp,-24
   142cc:	df000515 	stw	fp,20(sp)
   142d0:	df000504 	addi	fp,sp,20
   142d4:	e13ffd15 	stw	r4,-12(fp)
   142d8:	e17ffc15 	stw	r5,-16(fp)
   142dc:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
   142e0:	00bff9c4 	movi	r2,-25
   142e4:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
   142e8:	e0bffc17 	ldw	r2,-16(fp)
   142ec:	109a8060 	cmpeqi	r2,r2,27137
   142f0:	1000041e 	bne	r2,zero,14304 <altera_avalon_jtag_uart_ioctl+0x3c>
   142f4:	e0bffc17 	ldw	r2,-16(fp)
   142f8:	109a80a0 	cmpeqi	r2,r2,27138
   142fc:	1000181e 	bne	r2,zero,14360 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   14300:	00002906 	br	143a8 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
   14304:	e0bffd17 	ldw	r2,-12(fp)
   14308:	10c00117 	ldw	r3,4(r2)
   1430c:	00a00034 	movhi	r2,32768
   14310:	10bfffc4 	addi	r2,r2,-1
   14314:	18802126 	beq	r3,r2,1439c <altera_avalon_jtag_uart_ioctl+0xd4>
      int timeout = *((int *)arg);
   14318:	e0bffb17 	ldw	r2,-20(fp)
   1431c:	10800017 	ldw	r2,0(r2)
   14320:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   14324:	e0bffe17 	ldw	r2,-8(fp)
   14328:	10800090 	cmplti	r2,r2,2
   1432c:	1000061e 	bne	r2,zero,14348 <altera_avalon_jtag_uart_ioctl+0x80>
   14330:	e0fffe17 	ldw	r3,-8(fp)
   14334:	00a00034 	movhi	r2,32768
   14338:	10bfffc4 	addi	r2,r2,-1
   1433c:	18800226 	beq	r3,r2,14348 <altera_avalon_jtag_uart_ioctl+0x80>
   14340:	e0bffe17 	ldw	r2,-8(fp)
   14344:	00000206 	br	14350 <altera_avalon_jtag_uart_ioctl+0x88>
   14348:	00a00034 	movhi	r2,32768
   1434c:	10bfff84 	addi	r2,r2,-2
   14350:	e0fffd17 	ldw	r3,-12(fp)
   14354:	18800115 	stw	r2,4(r3)
      rc = 0;
   14358:	e03fff15 	stw	zero,-4(fp)
    break;
   1435c:	00000f06 	br	1439c <altera_avalon_jtag_uart_ioctl+0xd4>
    if (sp->timeout != INT_MAX)
   14360:	e0bffd17 	ldw	r2,-12(fp)
   14364:	10c00117 	ldw	r3,4(r2)
   14368:	00a00034 	movhi	r2,32768
   1436c:	10bfffc4 	addi	r2,r2,-1
   14370:	18800c26 	beq	r3,r2,143a4 <altera_avalon_jtag_uart_ioctl+0xdc>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   14374:	e0bffd17 	ldw	r2,-12(fp)
   14378:	10c00917 	ldw	r3,36(r2)
   1437c:	e0bffd17 	ldw	r2,-12(fp)
   14380:	10800117 	ldw	r2,4(r2)
   14384:	1885803a 	cmpltu	r2,r3,r2
   14388:	10c03fcc 	andi	r3,r2,255
   1438c:	e0bffb17 	ldw	r2,-20(fp)
   14390:	10c00015 	stw	r3,0(r2)
      rc = 0;
   14394:	e03fff15 	stw	zero,-4(fp)
    break;
   14398:	00000206 	br	143a4 <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
   1439c:	0001883a 	nop
   143a0:	00000106 	br	143a8 <altera_avalon_jtag_uart_ioctl+0xe0>
    break;
   143a4:	0001883a 	nop
  }

  return rc;
   143a8:	e0bfff17 	ldw	r2,-4(fp)
}
   143ac:	e037883a 	mov	sp,fp
   143b0:	df000017 	ldw	fp,0(sp)
   143b4:	dec00104 	addi	sp,sp,4
   143b8:	f800283a 	ret

000143bc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   143bc:	defff304 	addi	sp,sp,-52
   143c0:	dfc00c15 	stw	ra,48(sp)
   143c4:	df000b15 	stw	fp,44(sp)
   143c8:	df000b04 	addi	fp,sp,44
   143cc:	e13ff815 	stw	r4,-32(fp)
   143d0:	e17ff715 	stw	r5,-36(fp)
   143d4:	e1bff615 	stw	r6,-40(fp)
   143d8:	e1fff515 	stw	r7,-44(fp)
  char * ptr = buffer;
   143dc:	e0bff717 	ldw	r2,-36(fp)
   143e0:	e0bfff15 	stw	r2,-4(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   143e4:	00004706 	br	14504 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   143e8:	e0bff817 	ldw	r2,-32(fp)
   143ec:	10800a17 	ldw	r2,40(r2)
   143f0:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
   143f4:	e0bff817 	ldw	r2,-32(fp)
   143f8:	10800b17 	ldw	r2,44(r2)
   143fc:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
   14400:	e0fffd17 	ldw	r3,-12(fp)
   14404:	e0bffc17 	ldw	r2,-16(fp)
   14408:	18800536 	bltu	r3,r2,14420 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   1440c:	e0fffd17 	ldw	r3,-12(fp)
   14410:	e0bffc17 	ldw	r2,-16(fp)
   14414:	1885c83a 	sub	r2,r3,r2
   14418:	e0bffe15 	stw	r2,-8(fp)
   1441c:	00000406 	br	14430 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   14420:	00c20004 	movi	r3,2048
   14424:	e0bffc17 	ldw	r2,-16(fp)
   14428:	1885c83a 	sub	r2,r3,r2
   1442c:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
   14430:	e0bffe17 	ldw	r2,-8(fp)
   14434:	10001e26 	beq	r2,zero,144b0 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   14438:	e0fff617 	ldw	r3,-40(fp)
   1443c:	e0bffe17 	ldw	r2,-8(fp)
   14440:	1880022e 	bgeu	r3,r2,1444c <altera_avalon_jtag_uart_read+0x90>
        n = space;
   14444:	e0bff617 	ldw	r2,-40(fp)
   14448:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   1444c:	e0bff817 	ldw	r2,-32(fp)
   14450:	10c00e04 	addi	r3,r2,56
   14454:	e0bffc17 	ldw	r2,-16(fp)
   14458:	1885883a 	add	r2,r3,r2
   1445c:	e1bffe17 	ldw	r6,-8(fp)
   14460:	100b883a 	mov	r5,r2
   14464:	e13fff17 	ldw	r4,-4(fp)
   14468:	00110f00 	call	110f0 <memcpy>
      ptr   += n;
   1446c:	e0ffff17 	ldw	r3,-4(fp)
   14470:	e0bffe17 	ldw	r2,-8(fp)
   14474:	1885883a 	add	r2,r3,r2
   14478:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
   1447c:	e0fff617 	ldw	r3,-40(fp)
   14480:	e0bffe17 	ldw	r2,-8(fp)
   14484:	1885c83a 	sub	r2,r3,r2
   14488:	e0bff615 	stw	r2,-40(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1448c:	e0fffc17 	ldw	r3,-16(fp)
   14490:	e0bffe17 	ldw	r2,-8(fp)
   14494:	1885883a 	add	r2,r3,r2
   14498:	10c1ffcc 	andi	r3,r2,2047
   1449c:	e0bff817 	ldw	r2,-32(fp)
   144a0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   144a4:	e0bff617 	ldw	r2,-40(fp)
   144a8:	00bfcf16 	blt	zero,r2,143e8 <altera_avalon_jtag_uart_read+0x2c>
   144ac:	00000106 	br	144b4 <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */
   144b0:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
   144b4:	e0ffff17 	ldw	r3,-4(fp)
   144b8:	e0bff717 	ldw	r2,-36(fp)
   144bc:	1880141e 	bne	r3,r2,14510 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   144c0:	e0bff517 	ldw	r2,-44(fp)
   144c4:	1090000c 	andi	r2,r2,16384
   144c8:	1000131e 	bne	r2,zero,14518 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   144cc:	0001883a 	nop
   144d0:	e0bff817 	ldw	r2,-32(fp)
   144d4:	10800a17 	ldw	r2,40(r2)
   144d8:	e0fffd17 	ldw	r3,-12(fp)
   144dc:	1880051e 	bne	r3,r2,144f4 <altera_avalon_jtag_uart_read+0x138>
   144e0:	e0bff817 	ldw	r2,-32(fp)
   144e4:	10c00917 	ldw	r3,36(r2)
   144e8:	e0bff817 	ldw	r2,-32(fp)
   144ec:	10800117 	ldw	r2,4(r2)
   144f0:	18bff736 	bltu	r3,r2,144d0 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   144f4:	e0bff817 	ldw	r2,-32(fp)
   144f8:	10800a17 	ldw	r2,40(r2)
   144fc:	e0fffd17 	ldw	r3,-12(fp)
   14500:	18800726 	beq	r3,r2,14520 <altera_avalon_jtag_uart_read+0x164>
  while (space > 0)
   14504:	e0bff617 	ldw	r2,-40(fp)
   14508:	00bfb716 	blt	zero,r2,143e8 <altera_avalon_jtag_uart_read+0x2c>
   1450c:	00000506 	br	14524 <altera_avalon_jtag_uart_read+0x168>
      break;
   14510:	0001883a 	nop
   14514:	00000306 	br	14524 <altera_avalon_jtag_uart_read+0x168>
      break;
   14518:	0001883a 	nop
   1451c:	00000106 	br	14524 <altera_avalon_jtag_uart_read+0x168>
      break;
   14520:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   14524:	e0ffff17 	ldw	r3,-4(fp)
   14528:	e0bff717 	ldw	r2,-36(fp)
   1452c:	18801926 	beq	r3,r2,14594 <altera_avalon_jtag_uart_read+0x1d8>
  NIOS2_READ_STATUS (context);
   14530:	0005303a 	rdctl	r2,status
   14534:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14538:	e0fff917 	ldw	r3,-28(fp)
   1453c:	00bfff84 	movi	r2,-2
   14540:	1884703a 	and	r2,r3,r2
   14544:	1001703a 	wrctl	status,r2
  return context;
   14548:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   1454c:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   14550:	e0bff817 	ldw	r2,-32(fp)
   14554:	10800817 	ldw	r2,32(r2)
   14558:	10c00054 	ori	r3,r2,1
   1455c:	e0bff817 	ldw	r2,-32(fp)
   14560:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   14564:	e0bff817 	ldw	r2,-32(fp)
   14568:	10800017 	ldw	r2,0(r2)
   1456c:	10800104 	addi	r2,r2,4
   14570:	1007883a 	mov	r3,r2
   14574:	e0bff817 	ldw	r2,-32(fp)
   14578:	10800817 	ldw	r2,32(r2)
   1457c:	18800035 	stwio	r2,0(r3)
   14580:	e0bffb17 	ldw	r2,-20(fp)
   14584:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   14588:	e0bffa17 	ldw	r2,-24(fp)
   1458c:	1001703a 	wrctl	status,r2
}
   14590:	0001883a 	nop
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   14594:	e0ffff17 	ldw	r3,-4(fp)
   14598:	e0bff717 	ldw	r2,-36(fp)
   1459c:	18800426 	beq	r3,r2,145b0 <altera_avalon_jtag_uart_read+0x1f4>
    return ptr - buffer;
   145a0:	e0ffff17 	ldw	r3,-4(fp)
   145a4:	e0bff717 	ldw	r2,-36(fp)
   145a8:	1885c83a 	sub	r2,r3,r2
   145ac:	00000606 	br	145c8 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   145b0:	e0bff517 	ldw	r2,-44(fp)
   145b4:	1090000c 	andi	r2,r2,16384
   145b8:	10000226 	beq	r2,zero,145c4 <altera_avalon_jtag_uart_read+0x208>
    return -EWOULDBLOCK;
   145bc:	00bffd44 	movi	r2,-11
   145c0:	00000106 	br	145c8 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   145c4:	00bffec4 	movi	r2,-5
}
   145c8:	e037883a 	mov	sp,fp
   145cc:	dfc00117 	ldw	ra,4(sp)
   145d0:	df000017 	ldw	fp,0(sp)
   145d4:	dec00204 	addi	sp,sp,8
   145d8:	f800283a 	ret

000145dc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   145dc:	defff304 	addi	sp,sp,-52
   145e0:	dfc00c15 	stw	ra,48(sp)
   145e4:	df000b15 	stw	fp,44(sp)
   145e8:	df000b04 	addi	fp,sp,44
   145ec:	e13ff815 	stw	r4,-32(fp)
   145f0:	e17ff715 	stw	r5,-36(fp)
   145f4:	e1bff615 	stw	r6,-40(fp)
   145f8:	e1fff515 	stw	r7,-44(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   145fc:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   14600:	e0bff717 	ldw	r2,-36(fp)
   14604:	e0bffd15 	stw	r2,-12(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   14608:	00003706 	br	146e8 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   1460c:	e0bff817 	ldw	r2,-32(fp)
   14610:	10800c17 	ldw	r2,48(r2)
   14614:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
   14618:	e0bff817 	ldw	r2,-32(fp)
   1461c:	10800d17 	ldw	r2,52(r2)
   14620:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
   14624:	e0fffc17 	ldw	r3,-16(fp)
   14628:	e0bfff17 	ldw	r2,-4(fp)
   1462c:	1880062e 	bgeu	r3,r2,14648 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   14630:	e0ffff17 	ldw	r3,-4(fp)
   14634:	e0bffc17 	ldw	r2,-16(fp)
   14638:	1885c83a 	sub	r2,r3,r2
   1463c:	10bfffc4 	addi	r2,r2,-1
   14640:	e0bffe15 	stw	r2,-8(fp)
   14644:	00000b06 	br	14674 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   14648:	e0bfff17 	ldw	r2,-4(fp)
   1464c:	10000526 	beq	r2,zero,14664 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   14650:	00c20004 	movi	r3,2048
   14654:	e0bffc17 	ldw	r2,-16(fp)
   14658:	1885c83a 	sub	r2,r3,r2
   1465c:	e0bffe15 	stw	r2,-8(fp)
   14660:	00000406 	br	14674 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   14664:	00c1ffc4 	movi	r3,2047
   14668:	e0bffc17 	ldw	r2,-16(fp)
   1466c:	1885c83a 	sub	r2,r3,r2
   14670:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
   14674:	e0bffe17 	ldw	r2,-8(fp)
   14678:	10001e26 	beq	r2,zero,146f4 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   1467c:	e0fff617 	ldw	r3,-40(fp)
   14680:	e0bffe17 	ldw	r2,-8(fp)
   14684:	1880022e 	bgeu	r3,r2,14690 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   14688:	e0bff617 	ldw	r2,-40(fp)
   1468c:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   14690:	e0bff817 	ldw	r2,-32(fp)
   14694:	10c20e04 	addi	r3,r2,2104
   14698:	e0bffc17 	ldw	r2,-16(fp)
   1469c:	1885883a 	add	r2,r3,r2
   146a0:	e1bffe17 	ldw	r6,-8(fp)
   146a4:	e17ff717 	ldw	r5,-36(fp)
   146a8:	1009883a 	mov	r4,r2
   146ac:	00110f00 	call	110f0 <memcpy>
      ptr   += n;
   146b0:	e0fff717 	ldw	r3,-36(fp)
   146b4:	e0bffe17 	ldw	r2,-8(fp)
   146b8:	1885883a 	add	r2,r3,r2
   146bc:	e0bff715 	stw	r2,-36(fp)
      count -= n;
   146c0:	e0fff617 	ldw	r3,-40(fp)
   146c4:	e0bffe17 	ldw	r2,-8(fp)
   146c8:	1885c83a 	sub	r2,r3,r2
   146cc:	e0bff615 	stw	r2,-40(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   146d0:	e0fffc17 	ldw	r3,-16(fp)
   146d4:	e0bffe17 	ldw	r2,-8(fp)
   146d8:	1885883a 	add	r2,r3,r2
   146dc:	10c1ffcc 	andi	r3,r2,2047
   146e0:	e0bff817 	ldw	r2,-32(fp)
   146e4:	10c00c15 	stw	r3,48(r2)
    while (count > 0)
   146e8:	e0bff617 	ldw	r2,-40(fp)
   146ec:	00bfc716 	blt	zero,r2,1460c <altera_avalon_jtag_uart_write+0x30>
   146f0:	00000106 	br	146f8 <altera_avalon_jtag_uart_write+0x11c>
        break;
   146f4:	0001883a 	nop
  NIOS2_READ_STATUS (context);
   146f8:	0005303a 	rdctl	r2,status
   146fc:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14700:	e0fff917 	ldw	r3,-28(fp)
   14704:	00bfff84 	movi	r2,-2
   14708:	1884703a 	and	r2,r3,r2
   1470c:	1001703a 	wrctl	status,r2
  return context;
   14710:	e0bff917 	ldw	r2,-28(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   14714:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   14718:	e0bff817 	ldw	r2,-32(fp)
   1471c:	10800817 	ldw	r2,32(r2)
   14720:	10c00094 	ori	r3,r2,2
   14724:	e0bff817 	ldw	r2,-32(fp)
   14728:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1472c:	e0bff817 	ldw	r2,-32(fp)
   14730:	10800017 	ldw	r2,0(r2)
   14734:	10800104 	addi	r2,r2,4
   14738:	1007883a 	mov	r3,r2
   1473c:	e0bff817 	ldw	r2,-32(fp)
   14740:	10800817 	ldw	r2,32(r2)
   14744:	18800035 	stwio	r2,0(r3)
   14748:	e0bffb17 	ldw	r2,-20(fp)
   1474c:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   14750:	e0bffa17 	ldw	r2,-24(fp)
   14754:	1001703a 	wrctl	status,r2
}
   14758:	0001883a 	nop
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   1475c:	e0bff617 	ldw	r2,-40(fp)
   14760:	0080100e 	bge	zero,r2,147a4 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
   14764:	e0bff517 	ldw	r2,-44(fp)
   14768:	1090000c 	andi	r2,r2,16384
   1476c:	1000101e 	bne	r2,zero,147b0 <altera_avalon_jtag_uart_write+0x1d4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   14770:	0001883a 	nop
   14774:	e0bff817 	ldw	r2,-32(fp)
   14778:	10800d17 	ldw	r2,52(r2)
   1477c:	e0ffff17 	ldw	r3,-4(fp)
   14780:	1880051e 	bne	r3,r2,14798 <altera_avalon_jtag_uart_write+0x1bc>
   14784:	e0bff817 	ldw	r2,-32(fp)
   14788:	10c00917 	ldw	r3,36(r2)
   1478c:	e0bff817 	ldw	r2,-32(fp)
   14790:	10800117 	ldw	r2,4(r2)
   14794:	18bff736 	bltu	r3,r2,14774 <altera_avalon_jtag_uart_write+0x198>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   14798:	e0bff817 	ldw	r2,-32(fp)
   1479c:	10800917 	ldw	r2,36(r2)
   147a0:	1000051e 	bne	r2,zero,147b8 <altera_avalon_jtag_uart_write+0x1dc>
         break;
    }
  }
  while (count > 0);
   147a4:	e0bff617 	ldw	r2,-40(fp)
   147a8:	00bfcf16 	blt	zero,r2,146e8 <altera_avalon_jtag_uart_write+0x10c>
   147ac:	00000306 	br	147bc <altera_avalon_jtag_uart_write+0x1e0>
        break;
   147b0:	0001883a 	nop
   147b4:	00000106 	br	147bc <altera_avalon_jtag_uart_write+0x1e0>
         break;
   147b8:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   147bc:	e0fff717 	ldw	r3,-36(fp)
   147c0:	e0bffd17 	ldw	r2,-12(fp)
   147c4:	18800426 	beq	r3,r2,147d8 <altera_avalon_jtag_uart_write+0x1fc>
    return ptr - start;
   147c8:	e0fff717 	ldw	r3,-36(fp)
   147cc:	e0bffd17 	ldw	r2,-12(fp)
   147d0:	1885c83a 	sub	r2,r3,r2
   147d4:	00000606 	br	147f0 <altera_avalon_jtag_uart_write+0x214>
  else if (flags & O_NONBLOCK)
   147d8:	e0bff517 	ldw	r2,-44(fp)
   147dc:	1090000c 	andi	r2,r2,16384
   147e0:	10000226 	beq	r2,zero,147ec <altera_avalon_jtag_uart_write+0x210>
    return -EWOULDBLOCK;
   147e4:	00bffd44 	movi	r2,-11
   147e8:	00000106 	br	147f0 <altera_avalon_jtag_uart_write+0x214>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   147ec:	00bffec4 	movi	r2,-5
}
   147f0:	e037883a 	mov	sp,fp
   147f4:	dfc00117 	ldw	ra,4(sp)
   147f8:	df000017 	ldw	fp,0(sp)
   147fc:	dec00204 	addi	sp,sp,8
   14800:	f800283a 	ret

00014804 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   14804:	defff404 	addi	sp,sp,-48
   14808:	df000b15 	stw	fp,44(sp)
   1480c:	df000b04 	addi	fp,sp,44
   14810:	e13ff815 	stw	r4,-32(fp)
   14814:	e17ff715 	stw	r5,-36(fp)
   14818:	e1bff615 	stw	r6,-40(fp)
   1481c:	e1fff515 	stw	r7,-44(fp)
  alt_irq_context irq_context;
  alt_u64 current_nticks = 0;
   14820:	e03ffe15 	stw	zero,-8(fp)
   14824:	e03fff15 	stw	zero,-4(fp)
   14828:	d0a5f417 	ldw	r2,-26672(gp)
  
  if (alt_ticks_per_second ())
   1482c:	10004826 	beq	r2,zero,14950 <alt_alarm_start+0x14c>
  {
    if (alarm)
   14830:	e0bff817 	ldw	r2,-32(fp)
   14834:	10004426 	beq	r2,zero,14948 <alt_alarm_start+0x144>
    {
      alarm->callback = callback;
   14838:	e0bff817 	ldw	r2,-32(fp)
   1483c:	e0fff617 	ldw	r3,-40(fp)
   14840:	10c00415 	stw	r3,16(r2)
      alarm->context  = context;
   14844:	e0bff817 	ldw	r2,-32(fp)
   14848:	e0fff517 	ldw	r3,-44(fp)
   1484c:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
   14850:	0005303a 	rdctl	r2,status
   14854:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14858:	e0fff917 	ldw	r3,-28(fp)
   1485c:	00bfff84 	movi	r2,-2
   14860:	1884703a 	and	r2,r3,r2
   14864:	1001703a 	wrctl	status,r2
  return context;
   14868:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   1486c:	e0bffd15 	stw	r2,-12(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u64 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   14870:	d0a5f517 	ldw	r2,-26668(gp)
   14874:	d0e5f617 	ldw	r3,-26664(gp)
      
      current_nticks = alt_nticks();
   14878:	e0bffe15 	stw	r2,-8(fp)
   1487c:	e0ffff15 	stw	r3,-4(fp)
      
      alarm->time = (alt_u64)nticks + current_nticks + 1; 
   14880:	e0bff717 	ldw	r2,-36(fp)
   14884:	1011883a 	mov	r8,r2
   14888:	0013883a 	mov	r9,zero
   1488c:	e13ffe17 	ldw	r4,-8(fp)
   14890:	e17fff17 	ldw	r5,-4(fp)
   14894:	4105883a 	add	r2,r8,r4
   14898:	120d803a 	cmpltu	r6,r2,r8
   1489c:	4947883a 	add	r3,r9,r5
   148a0:	30c9883a 	add	r4,r6,r3
   148a4:	2007883a 	mov	r3,r4
   148a8:	1009883a 	mov	r4,r2
   148ac:	180b883a 	mov	r5,r3
   148b0:	01800044 	movi	r6,1
   148b4:	000f883a 	mov	r7,zero
   148b8:	2185883a 	add	r2,r4,r6
   148bc:	1111803a 	cmpltu	r8,r2,r4
   148c0:	29c7883a 	add	r3,r5,r7
   148c4:	40c9883a 	add	r4,r8,r3
   148c8:	2007883a 	mov	r3,r4
   148cc:	1009883a 	mov	r4,r2
   148d0:	180b883a 	mov	r5,r3
   148d4:	e0bff817 	ldw	r2,-32(fp)
   148d8:	11000215 	stw	r4,8(r2)
   148dc:	11400315 	stw	r5,12(r2)
          
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   148e0:	e0bff817 	ldw	r2,-32(fp)
   148e4:	d0e00c04 	addi	r3,gp,-32720
   148e8:	e0fffb15 	stw	r3,-20(fp)
   148ec:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   148f0:	e0bffa17 	ldw	r2,-24(fp)
   148f4:	e0fffb17 	ldw	r3,-20(fp)
   148f8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   148fc:	e0bffb17 	ldw	r2,-20(fp)
   14900:	10c00017 	ldw	r3,0(r2)
   14904:	e0bffa17 	ldw	r2,-24(fp)
   14908:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1490c:	e0bffb17 	ldw	r2,-20(fp)
   14910:	10800017 	ldw	r2,0(r2)
   14914:	e0fffa17 	ldw	r3,-24(fp)
   14918:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1491c:	e0bffb17 	ldw	r2,-20(fp)
   14920:	e0fffa17 	ldw	r3,-24(fp)
   14924:	10c00015 	stw	r3,0(r2)
}
   14928:	0001883a 	nop
   1492c:	e0bffd17 	ldw	r2,-12(fp)
   14930:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   14934:	e0bffc17 	ldw	r2,-16(fp)
   14938:	1001703a 	wrctl	status,r2
}
   1493c:	0001883a 	nop
      alt_irq_enable_all (irq_context);

      return 0;
   14940:	0005883a 	mov	r2,zero
   14944:	00000306 	br	14954 <alt_alarm_start+0x150>
    }
    else
    {
      return -EINVAL;
   14948:	00bffa84 	movi	r2,-22
   1494c:	00000106 	br	14954 <alt_alarm_start+0x150>
    }
  }
  else
  {
    return -ENOTSUP;
   14950:	00bfde84 	movi	r2,-134
  }
}
   14954:	e037883a 	mov	sp,fp
   14958:	df000017 	ldw	fp,0(sp)
   1495c:	dec00104 	addi	sp,sp,4
   14960:	f800283a 	ret

00014964 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   14964:	defffa04 	addi	sp,sp,-24
   14968:	dfc00515 	stw	ra,20(sp)
   1496c:	df000415 	stw	fp,16(sp)
   14970:	df000404 	addi	fp,sp,16
   14974:	e13ffc15 	stw	r4,-16(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   14978:	00800244 	movi	r2,9
   1497c:	e0bffe15 	stw	r2,-8(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   14980:	014003f4 	movhi	r5,15
   14984:	29509004 	addi	r5,r5,16960
   14988:	e13ffe17 	ldw	r4,-8(fp)
   1498c:	00102f80 	call	102f8 <__mulsi3>
   14990:	100b883a 	mov	r5,r2
   14994:	0100bef4 	movhi	r4,763
   14998:	213c2004 	addi	r4,r4,-3968
   1499c:	00131f40 	call	131f4 <__udivsi3>
  big_loops = us / (INT_MAX/
   149a0:	100b883a 	mov	r5,r2
   149a4:	01200034 	movhi	r4,32768
   149a8:	213fffc4 	addi	r4,r4,-1
   149ac:	00131f40 	call	131f4 <__udivsi3>
   149b0:	100b883a 	mov	r5,r2
   149b4:	e13ffc17 	ldw	r4,-16(fp)
   149b8:	00131f40 	call	131f4 <__udivsi3>
   149bc:	e0bffd15 	stw	r2,-12(fp)

  if (big_loops)
   149c0:	e0bffd17 	ldw	r2,-12(fp)
   149c4:	10002a26 	beq	r2,zero,14a70 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   149c8:	e03fff15 	stw	zero,-4(fp)
   149cc:	00001706 	br	14a2c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   149d0:	00a00034 	movhi	r2,32768
   149d4:	10bfffc4 	addi	r2,r2,-1
   149d8:	10bfffc4 	addi	r2,r2,-1
   149dc:	103ffe1e 	bne	r2,zero,149d8 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   149e0:	014003f4 	movhi	r5,15
   149e4:	29509004 	addi	r5,r5,16960
   149e8:	e13ffe17 	ldw	r4,-8(fp)
   149ec:	00102f80 	call	102f8 <__mulsi3>
      us -= (INT_MAX/(ALT_CPU_FREQ/
   149f0:	100b883a 	mov	r5,r2
   149f4:	0100bef4 	movhi	r4,763
   149f8:	213c2004 	addi	r4,r4,-3968
   149fc:	00131f40 	call	131f4 <__udivsi3>
   14a00:	100b883a 	mov	r5,r2
   14a04:	01200034 	movhi	r4,32768
   14a08:	213fffc4 	addi	r4,r4,-1
   14a0c:	00131f40 	call	131f4 <__udivsi3>
   14a10:	1007883a 	mov	r3,r2
   14a14:	e0bffc17 	ldw	r2,-16(fp)
   14a18:	10c5c83a 	sub	r2,r2,r3
   14a1c:	e0bffc15 	stw	r2,-16(fp)
    for(i=0;i<big_loops;i++)
   14a20:	e0bfff17 	ldw	r2,-4(fp)
   14a24:	10800044 	addi	r2,r2,1
   14a28:	e0bfff15 	stw	r2,-4(fp)
   14a2c:	e0ffff17 	ldw	r3,-4(fp)
   14a30:	e0bffd17 	ldw	r2,-12(fp)
   14a34:	18bfe616 	blt	r3,r2,149d0 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   14a38:	014003f4 	movhi	r5,15
   14a3c:	29509004 	addi	r5,r5,16960
   14a40:	e13ffe17 	ldw	r4,-8(fp)
   14a44:	00102f80 	call	102f8 <__mulsi3>
   14a48:	100b883a 	mov	r5,r2
   14a4c:	0100bef4 	movhi	r4,763
   14a50:	213c2004 	addi	r4,r4,-3968
   14a54:	00131f40 	call	131f4 <__udivsi3>
   14a58:	e17ffc17 	ldw	r5,-16(fp)
   14a5c:	1009883a 	mov	r4,r2
   14a60:	00102f80 	call	102f8 <__mulsi3>
    __asm__ volatile (
   14a64:	10bfffc4 	addi	r2,r2,-1
   14a68:	103ffe1e 	bne	r2,zero,14a64 <alt_busy_sleep+0x100>
   14a6c:	00000d06 	br	14aa4 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   14a70:	014003f4 	movhi	r5,15
   14a74:	29509004 	addi	r5,r5,16960
   14a78:	e13ffe17 	ldw	r4,-8(fp)
   14a7c:	00102f80 	call	102f8 <__mulsi3>
   14a80:	100b883a 	mov	r5,r2
   14a84:	0100bef4 	movhi	r4,763
   14a88:	213c2004 	addi	r4,r4,-3968
   14a8c:	00131f40 	call	131f4 <__udivsi3>
   14a90:	e17ffc17 	ldw	r5,-16(fp)
   14a94:	1009883a 	mov	r4,r2
   14a98:	00102f80 	call	102f8 <__mulsi3>
    __asm__ volatile (
   14a9c:	10bfffc4 	addi	r2,r2,-1
   14aa0:	00bffe16 	blt	zero,r2,14a9c <alt_busy_sleep+0x138>
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   14aa4:	0005883a 	mov	r2,zero
}
   14aa8:	e037883a 	mov	sp,fp
   14aac:	dfc00117 	ldw	ra,4(sp)
   14ab0:	df000017 	ldw	fp,0(sp)
   14ab4:	dec00204 	addi	sp,sp,8
   14ab8:	f800283a 	ret

00014abc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   14abc:	deffff04 	addi	sp,sp,-4
   14ac0:	df000015 	stw	fp,0(sp)
   14ac4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   14ac8:	0001883a 	nop
   14acc:	e037883a 	mov	sp,fp
   14ad0:	df000017 	ldw	fp,0(sp)
   14ad4:	dec00104 	addi	sp,sp,4
   14ad8:	f800283a 	ret

00014adc <alt_get_errno>:
   14adc:	defffe04 	addi	sp,sp,-8
   14ae0:	dfc00115 	stw	ra,4(sp)
   14ae4:	df000015 	stw	fp,0(sp)
   14ae8:	d839883a 	mov	fp,sp
   14aec:	d0a00917 	ldw	r2,-32732(gp)
   14af0:	10000326 	beq	r2,zero,14b00 <alt_get_errno+0x24>
   14af4:	d0a00917 	ldw	r2,-32732(gp)
   14af8:	103ee83a 	callr	r2
   14afc:	00000106 	br	14b04 <alt_get_errno+0x28>
   14b00:	d0a5ea04 	addi	r2,gp,-26712
   14b04:	e037883a 	mov	sp,fp
   14b08:	dfc00117 	ldw	ra,4(sp)
   14b0c:	df000017 	ldw	fp,0(sp)
   14b10:	dec00204 	addi	sp,sp,8
   14b14:	f800283a 	ret

00014b18 <alt_dev_llist_insert>:
{
   14b18:	defffa04 	addi	sp,sp,-24
   14b1c:	dfc00515 	stw	ra,20(sp)
   14b20:	df000415 	stw	fp,16(sp)
   14b24:	df000404 	addi	fp,sp,16
   14b28:	e13ffd15 	stw	r4,-12(fp)
   14b2c:	e17ffc15 	stw	r5,-16(fp)
  if (!dev || !dev->name)
   14b30:	e0bffd17 	ldw	r2,-12(fp)
   14b34:	10000326 	beq	r2,zero,14b44 <alt_dev_llist_insert+0x2c>
   14b38:	e0bffd17 	ldw	r2,-12(fp)
   14b3c:	10800217 	ldw	r2,8(r2)
   14b40:	1000061e 	bne	r2,zero,14b5c <alt_dev_llist_insert+0x44>
    ALT_ERRNO = EINVAL;
   14b44:	0014adc0 	call	14adc <alt_get_errno>
   14b48:	1007883a 	mov	r3,r2
   14b4c:	00800584 	movi	r2,22
   14b50:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   14b54:	00bffa84 	movi	r2,-22
   14b58:	00001406 	br	14bac <alt_dev_llist_insert+0x94>
  alt_llist_insert(list, &dev->llist);
   14b5c:	e0bffd17 	ldw	r2,-12(fp)
   14b60:	e0fffc17 	ldw	r3,-16(fp)
   14b64:	e0ffff15 	stw	r3,-4(fp)
   14b68:	e0bffe15 	stw	r2,-8(fp)
  entry->previous = list;
   14b6c:	e0bffe17 	ldw	r2,-8(fp)
   14b70:	e0ffff17 	ldw	r3,-4(fp)
   14b74:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   14b78:	e0bfff17 	ldw	r2,-4(fp)
   14b7c:	10c00017 	ldw	r3,0(r2)
   14b80:	e0bffe17 	ldw	r2,-8(fp)
   14b84:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
   14b88:	e0bfff17 	ldw	r2,-4(fp)
   14b8c:	10800017 	ldw	r2,0(r2)
   14b90:	e0fffe17 	ldw	r3,-8(fp)
   14b94:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   14b98:	e0bfff17 	ldw	r2,-4(fp)
   14b9c:	e0fffe17 	ldw	r3,-8(fp)
   14ba0:	10c00015 	stw	r3,0(r2)
}
   14ba4:	0001883a 	nop
  return 0;  
   14ba8:	0005883a 	mov	r2,zero
}
   14bac:	e037883a 	mov	sp,fp
   14bb0:	dfc00117 	ldw	ra,4(sp)
   14bb4:	df000017 	ldw	fp,0(sp)
   14bb8:	dec00204 	addi	sp,sp,8
   14bbc:	f800283a 	ret

00014bc0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   14bc0:	defffd04 	addi	sp,sp,-12
   14bc4:	dfc00215 	stw	ra,8(sp)
   14bc8:	df000115 	stw	fp,4(sp)
   14bcc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   14bd0:	00800074 	movhi	r2,1
   14bd4:	10963704 	addi	r2,r2,22748
   14bd8:	e0bfff15 	stw	r2,-4(fp)
   14bdc:	00000606 	br	14bf8 <_do_ctors+0x38>
        (*ctor) (); 
   14be0:	e0bfff17 	ldw	r2,-4(fp)
   14be4:	10800017 	ldw	r2,0(r2)
   14be8:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   14bec:	e0bfff17 	ldw	r2,-4(fp)
   14bf0:	10bfff04 	addi	r2,r2,-4
   14bf4:	e0bfff15 	stw	r2,-4(fp)
   14bf8:	e0ffff17 	ldw	r3,-4(fp)
   14bfc:	00800074 	movhi	r2,1
   14c00:	10963804 	addi	r2,r2,22752
   14c04:	18bff62e 	bgeu	r3,r2,14be0 <_do_ctors+0x20>
}
   14c08:	0001883a 	nop
   14c0c:	0001883a 	nop
   14c10:	e037883a 	mov	sp,fp
   14c14:	dfc00117 	ldw	ra,4(sp)
   14c18:	df000017 	ldw	fp,0(sp)
   14c1c:	dec00204 	addi	sp,sp,8
   14c20:	f800283a 	ret

00014c24 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   14c24:	defffd04 	addi	sp,sp,-12
   14c28:	dfc00215 	stw	ra,8(sp)
   14c2c:	df000115 	stw	fp,4(sp)
   14c30:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   14c34:	00800074 	movhi	r2,1
   14c38:	10963704 	addi	r2,r2,22748
   14c3c:	e0bfff15 	stw	r2,-4(fp)
   14c40:	00000606 	br	14c5c <_do_dtors+0x38>
        (*dtor) (); 
   14c44:	e0bfff17 	ldw	r2,-4(fp)
   14c48:	10800017 	ldw	r2,0(r2)
   14c4c:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   14c50:	e0bfff17 	ldw	r2,-4(fp)
   14c54:	10bfff04 	addi	r2,r2,-4
   14c58:	e0bfff15 	stw	r2,-4(fp)
   14c5c:	e0ffff17 	ldw	r3,-4(fp)
   14c60:	00800074 	movhi	r2,1
   14c64:	10963804 	addi	r2,r2,22752
   14c68:	18bff62e 	bgeu	r3,r2,14c44 <_do_dtors+0x20>
}
   14c6c:	0001883a 	nop
   14c70:	0001883a 	nop
   14c74:	e037883a 	mov	sp,fp
   14c78:	dfc00117 	ldw	ra,4(sp)
   14c7c:	df000017 	ldw	fp,0(sp)
   14c80:	dec00204 	addi	sp,sp,8
   14c84:	f800283a 	ret

00014c88 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   14c88:	deffff04 	addi	sp,sp,-4
   14c8c:	df000015 	stw	fp,0(sp)
   14c90:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   14c94:	0001883a 	nop
   14c98:	e037883a 	mov	sp,fp
   14c9c:	df000017 	ldw	fp,0(sp)
   14ca0:	dec00104 	addi	sp,sp,4
   14ca4:	f800283a 	ret

00014ca8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   14ca8:	defff904 	addi	sp,sp,-28
   14cac:	dfc00615 	stw	ra,24(sp)
   14cb0:	df000515 	stw	fp,20(sp)
   14cb4:	df000504 	addi	fp,sp,20
   14cb8:	e13fff15 	stw	r4,-4(fp)
   14cbc:	e17ffe15 	stw	r5,-8(fp)
   14cc0:	e1bffd15 	stw	r6,-12(fp)
   14cc4:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   14cc8:	e0800217 	ldw	r2,8(fp)
   14ccc:	d8800015 	stw	r2,0(sp)
   14cd0:	e1fffc17 	ldw	r7,-16(fp)
   14cd4:	e1bffd17 	ldw	r6,-12(fp)
   14cd8:	e17ffe17 	ldw	r5,-8(fp)
   14cdc:	e13fff17 	ldw	r4,-4(fp)
   14ce0:	0014e580 	call	14e58 <alt_iic_isr_register>
}  
   14ce4:	e037883a 	mov	sp,fp
   14ce8:	dfc00117 	ldw	ra,4(sp)
   14cec:	df000017 	ldw	fp,0(sp)
   14cf0:	dec00204 	addi	sp,sp,8
   14cf4:	f800283a 	ret

00014cf8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   14cf8:	defff904 	addi	sp,sp,-28
   14cfc:	df000615 	stw	fp,24(sp)
   14d00:	df000604 	addi	fp,sp,24
   14d04:	e13ffb15 	stw	r4,-20(fp)
   14d08:	e17ffa15 	stw	r5,-24(fp)
   14d0c:	e0bffa17 	ldw	r2,-24(fp)
   14d10:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
   14d14:	0005303a 	rdctl	r2,status
   14d18:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14d1c:	e0fffe17 	ldw	r3,-8(fp)
   14d20:	00bfff84 	movi	r2,-2
   14d24:	1884703a 	and	r2,r3,r2
   14d28:	1001703a 	wrctl	status,r2
  return context;
   14d2c:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   14d30:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   14d34:	00c00044 	movi	r3,1
   14d38:	e0bfff17 	ldw	r2,-4(fp)
   14d3c:	1884983a 	sll	r2,r3,r2
   14d40:	1007883a 	mov	r3,r2
   14d44:	d0a5f317 	ldw	r2,-26676(gp)
   14d48:	1884b03a 	or	r2,r3,r2
   14d4c:	d0a5f315 	stw	r2,-26676(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   14d50:	d0a5f317 	ldw	r2,-26676(gp)
   14d54:	100170fa 	wrctl	ienable,r2
   14d58:	e0bffd17 	ldw	r2,-12(fp)
   14d5c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   14d60:	e0bffc17 	ldw	r2,-16(fp)
   14d64:	1001703a 	wrctl	status,r2
}
   14d68:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
   14d6c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   14d70:	e037883a 	mov	sp,fp
   14d74:	df000017 	ldw	fp,0(sp)
   14d78:	dec00104 	addi	sp,sp,4
   14d7c:	f800283a 	ret

00014d80 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   14d80:	defff904 	addi	sp,sp,-28
   14d84:	df000615 	stw	fp,24(sp)
   14d88:	df000604 	addi	fp,sp,24
   14d8c:	e13ffb15 	stw	r4,-20(fp)
   14d90:	e17ffa15 	stw	r5,-24(fp)
   14d94:	e0bffa17 	ldw	r2,-24(fp)
   14d98:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
   14d9c:	0005303a 	rdctl	r2,status
   14da0:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14da4:	e0fffe17 	ldw	r3,-8(fp)
   14da8:	00bfff84 	movi	r2,-2
   14dac:	1884703a 	and	r2,r3,r2
   14db0:	1001703a 	wrctl	status,r2
  return context;
   14db4:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
   14db8:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
   14dbc:	00c00044 	movi	r3,1
   14dc0:	e0bfff17 	ldw	r2,-4(fp)
   14dc4:	1884983a 	sll	r2,r3,r2
   14dc8:	0084303a 	nor	r2,zero,r2
   14dcc:	1007883a 	mov	r3,r2
   14dd0:	d0a5f317 	ldw	r2,-26676(gp)
   14dd4:	1884703a 	and	r2,r3,r2
   14dd8:	d0a5f315 	stw	r2,-26676(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   14ddc:	d0a5f317 	ldw	r2,-26676(gp)
   14de0:	100170fa 	wrctl	ienable,r2
   14de4:	e0bffd17 	ldw	r2,-12(fp)
   14de8:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   14dec:	e0bffc17 	ldw	r2,-16(fp)
   14df0:	1001703a 	wrctl	status,r2
}
   14df4:	0001883a 	nop
  return 0;
   14df8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   14dfc:	e037883a 	mov	sp,fp
   14e00:	df000017 	ldw	fp,0(sp)
   14e04:	dec00104 	addi	sp,sp,4
   14e08:	f800283a 	ret

00014e0c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   14e0c:	defffc04 	addi	sp,sp,-16
   14e10:	df000315 	stw	fp,12(sp)
   14e14:	df000304 	addi	fp,sp,12
   14e18:	e13ffe15 	stw	r4,-8(fp)
   14e1c:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   14e20:	000530fa 	rdctl	r2,ienable
   14e24:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   14e28:	00c00044 	movi	r3,1
   14e2c:	e0bffd17 	ldw	r2,-12(fp)
   14e30:	1884983a 	sll	r2,r3,r2
   14e34:	1007883a 	mov	r3,r2
   14e38:	e0bfff17 	ldw	r2,-4(fp)
   14e3c:	1884703a 	and	r2,r3,r2
   14e40:	1004c03a 	cmpne	r2,r2,zero
   14e44:	10803fcc 	andi	r2,r2,255
}
   14e48:	e037883a 	mov	sp,fp
   14e4c:	df000017 	ldw	fp,0(sp)
   14e50:	dec00104 	addi	sp,sp,4
   14e54:	f800283a 	ret

00014e58 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   14e58:	defff504 	addi	sp,sp,-44
   14e5c:	dfc00a15 	stw	ra,40(sp)
   14e60:	df000915 	stw	fp,36(sp)
   14e64:	df000904 	addi	fp,sp,36
   14e68:	e13ffa15 	stw	r4,-24(fp)
   14e6c:	e17ff915 	stw	r5,-28(fp)
   14e70:	e1bff815 	stw	r6,-32(fp)
   14e74:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
   14e78:	00bffa84 	movi	r2,-22
   14e7c:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   14e80:	e0bff917 	ldw	r2,-28(fp)
   14e84:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   14e88:	e0bffe17 	ldw	r2,-8(fp)
   14e8c:	10800808 	cmpgei	r2,r2,32
   14e90:	1000251e 	bne	r2,zero,14f28 <alt_iic_isr_register+0xd0>
  NIOS2_READ_STATUS (context);
   14e94:	0005303a 	rdctl	r2,status
   14e98:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14e9c:	e0fffc17 	ldw	r3,-16(fp)
   14ea0:	00bfff84 	movi	r2,-2
   14ea4:	1884703a 	and	r2,r3,r2
   14ea8:	1001703a 	wrctl	status,r2
  return context;
   14eac:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   14eb0:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
   14eb4:	e0bffe17 	ldw	r2,-8(fp)
   14eb8:	100890fa 	slli	r4,r2,3
   14ebc:	e0fff817 	ldw	r3,-32(fp)
   14ec0:	008000b4 	movhi	r2,2
   14ec4:	2085883a 	add	r2,r4,r2
   14ec8:	10e26515 	stw	r3,-30316(r2)
    alt_irq[id].context = isr_context;
   14ecc:	e0bffe17 	ldw	r2,-8(fp)
   14ed0:	100890fa 	slli	r4,r2,3
   14ed4:	e0fff717 	ldw	r3,-36(fp)
   14ed8:	008000b4 	movhi	r2,2
   14edc:	2085883a 	add	r2,r4,r2
   14ee0:	10e26615 	stw	r3,-30312(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   14ee4:	e0bff817 	ldw	r2,-32(fp)
   14ee8:	10000526 	beq	r2,zero,14f00 <alt_iic_isr_register+0xa8>
   14eec:	e0bffe17 	ldw	r2,-8(fp)
   14ef0:	100b883a 	mov	r5,r2
   14ef4:	e13ffa17 	ldw	r4,-24(fp)
   14ef8:	0014cf80 	call	14cf8 <alt_ic_irq_enable>
   14efc:	00000406 	br	14f10 <alt_iic_isr_register+0xb8>
   14f00:	e0bffe17 	ldw	r2,-8(fp)
   14f04:	100b883a 	mov	r5,r2
   14f08:	e13ffa17 	ldw	r4,-24(fp)
   14f0c:	0014d800 	call	14d80 <alt_ic_irq_disable>
   14f10:	e0bfff15 	stw	r2,-4(fp)
   14f14:	e0bffd17 	ldw	r2,-12(fp)
   14f18:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   14f1c:	e0bffb17 	ldw	r2,-20(fp)
   14f20:	1001703a 	wrctl	status,r2
}
   14f24:	0001883a 	nop

    alt_irq_enable_all(status);
  }

  return rc; 
   14f28:	e0bfff17 	ldw	r2,-4(fp)
}
   14f2c:	e037883a 	mov	sp,fp
   14f30:	dfc00117 	ldw	ra,4(sp)
   14f34:	df000017 	ldw	fp,0(sp)
   14f38:	dec00204 	addi	sp,sp,8
   14f3c:	f800283a 	ret

00014f40 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   14f40:	defff904 	addi	sp,sp,-28
   14f44:	dfc00615 	stw	ra,24(sp)
   14f48:	df000515 	stw	fp,20(sp)
   14f4c:	df000504 	addi	fp,sp,20
   14f50:	e13ffe15 	stw	r4,-8(fp)
   14f54:	e17ffd15 	stw	r5,-12(fp)
   14f58:	e1bffc15 	stw	r6,-16(fp)
   14f5c:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
   14f60:	e1bffb17 	ldw	r6,-20(fp)
   14f64:	e17ffc17 	ldw	r5,-16(fp)
   14f68:	e13ffd17 	ldw	r4,-12(fp)
   14f6c:	00151a80 	call	151a8 <open>
   14f70:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
   14f74:	e0bfff17 	ldw	r2,-4(fp)
   14f78:	10002016 	blt	r2,zero,14ffc <alt_open_fd+0xbc>
  {
    fd->dev      = alt_fd_list[old].dev;
   14f7c:	e0ffff17 	ldw	r3,-4(fp)
   14f80:	1805883a 	mov	r2,r3
   14f84:	1085883a 	add	r2,r2,r2
   14f88:	10c5883a 	add	r2,r2,r3
   14f8c:	100490ba 	slli	r2,r2,2
   14f90:	00c00074 	movhi	r3,1
   14f94:	10c7883a 	add	r3,r2,r3
   14f98:	18d79d17 	ldw	r3,24180(r3)
   14f9c:	e0bffe17 	ldw	r2,-8(fp)
   14fa0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   14fa4:	e0ffff17 	ldw	r3,-4(fp)
   14fa8:	1805883a 	mov	r2,r3
   14fac:	1085883a 	add	r2,r2,r2
   14fb0:	10c5883a 	add	r2,r2,r3
   14fb4:	100490ba 	slli	r2,r2,2
   14fb8:	00c00074 	movhi	r3,1
   14fbc:	10c7883a 	add	r3,r2,r3
   14fc0:	18d79e17 	ldw	r3,24184(r3)
   14fc4:	e0bffe17 	ldw	r2,-8(fp)
   14fc8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   14fcc:	e0ffff17 	ldw	r3,-4(fp)
   14fd0:	1805883a 	mov	r2,r3
   14fd4:	1085883a 	add	r2,r2,r2
   14fd8:	10c5883a 	add	r2,r2,r3
   14fdc:	100490ba 	slli	r2,r2,2
   14fe0:	00c00074 	movhi	r3,1
   14fe4:	10c7883a 	add	r3,r2,r3
   14fe8:	18d79f17 	ldw	r3,24188(r3)
   14fec:	e0bffe17 	ldw	r2,-8(fp)
   14ff0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   14ff4:	e13fff17 	ldw	r4,-4(fp)
   14ff8:	0013a280 	call	13a28 <alt_release_fd>
  }
} 
   14ffc:	0001883a 	nop
   15000:	e037883a 	mov	sp,fp
   15004:	dfc00117 	ldw	ra,4(sp)
   15008:	df000017 	ldw	fp,0(sp)
   1500c:	dec00204 	addi	sp,sp,8
   15010:	f800283a 	ret

00015014 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   15014:	defffb04 	addi	sp,sp,-20
   15018:	dfc00415 	stw	ra,16(sp)
   1501c:	df000315 	stw	fp,12(sp)
   15020:	df000304 	addi	fp,sp,12
   15024:	e13fff15 	stw	r4,-4(fp)
   15028:	e17ffe15 	stw	r5,-8(fp)
   1502c:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   15030:	01c07fc4 	movi	r7,511
   15034:	01800044 	movi	r6,1
   15038:	e17fff17 	ldw	r5,-4(fp)
   1503c:	01000074 	movhi	r4,1
   15040:	2117a004 	addi	r4,r4,24192
   15044:	0014f400 	call	14f40 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   15048:	01c07fc4 	movi	r7,511
   1504c:	000d883a 	mov	r6,zero
   15050:	e17ffe17 	ldw	r5,-8(fp)
   15054:	01000074 	movhi	r4,1
   15058:	21179d04 	addi	r4,r4,24180
   1505c:	0014f400 	call	14f40 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   15060:	01c07fc4 	movi	r7,511
   15064:	01800044 	movi	r6,1
   15068:	e17ffd17 	ldw	r5,-12(fp)
   1506c:	01000074 	movhi	r4,1
   15070:	2117a304 	addi	r4,r4,24204
   15074:	0014f400 	call	14f40 <alt_open_fd>
}  
   15078:	0001883a 	nop
   1507c:	e037883a 	mov	sp,fp
   15080:	dfc00117 	ldw	ra,4(sp)
   15084:	df000017 	ldw	fp,0(sp)
   15088:	dec00204 	addi	sp,sp,8
   1508c:	f800283a 	ret

00015090 <alt_get_errno>:
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   15090:	defffe04 	addi	sp,sp,-8
   15094:	dfc00115 	stw	ra,4(sp)
   15098:	df000015 	stw	fp,0(sp)
   1509c:	d839883a 	mov	fp,sp
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   150a0:	d0a00917 	ldw	r2,-32732(gp)
   150a4:	10000326 	beq	r2,zero,150b4 <alt_get_errno+0x24>
   150a8:	d0a00917 	ldw	r2,-32732(gp)
   150ac:	103ee83a 	callr	r2
   150b0:	00000106 	br	150b8 <alt_get_errno+0x28>
   150b4:	d0a5ea04 	addi	r2,gp,-26712
        (&alt_fd_list[i] != fd))
   150b8:	e037883a 	mov	sp,fp
   150bc:	dfc00117 	ldw	ra,4(sp)
   150c0:	df000017 	ldw	fp,0(sp)
   150c4:	dec00204 	addi	sp,sp,8
   150c8:	f800283a 	ret

000150cc <alt_file_locked>:
{
   150cc:	defffd04 	addi	sp,sp,-12
   150d0:	df000215 	stw	fp,8(sp)
   150d4:	df000204 	addi	fp,sp,8
   150d8:	e13ffe15 	stw	r4,-8(fp)
  fd->fd_flags |= ALT_FD_DEV;
   150dc:	e0bffe17 	ldw	r2,-8(fp)
   150e0:	10800217 	ldw	r2,8(r2)
   150e4:	10d00034 	orhi	r3,r2,16384
   150e8:	e0bffe17 	ldw	r2,-8(fp)
   150ec:	10c00215 	stw	r3,8(r2)
  for (i = 0; i <= alt_max_fd; i++)
   150f0:	e03fff15 	stw	zero,-4(fp)
   150f4:	00002306 	br	15184 <alt_file_locked+0xb8>
    if ((alt_fd_list[i].dev == fd->dev) &&
   150f8:	e0ffff17 	ldw	r3,-4(fp)
   150fc:	1805883a 	mov	r2,r3
   15100:	1085883a 	add	r2,r2,r2
   15104:	10c5883a 	add	r2,r2,r3
   15108:	100490ba 	slli	r2,r2,2
   1510c:	00c00074 	movhi	r3,1
   15110:	10c7883a 	add	r3,r2,r3
   15114:	18d79d17 	ldw	r3,24180(r3)
   15118:	e0bffe17 	ldw	r2,-8(fp)
   1511c:	10800017 	ldw	r2,0(r2)
   15120:	1880151e 	bne	r3,r2,15178 <alt_file_locked+0xac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   15124:	e0ffff17 	ldw	r3,-4(fp)
   15128:	1805883a 	mov	r2,r3
   1512c:	1085883a 	add	r2,r2,r2
   15130:	10c5883a 	add	r2,r2,r3
   15134:	100490ba 	slli	r2,r2,2
   15138:	00c00074 	movhi	r3,1
   1513c:	10c7883a 	add	r3,r2,r3
   15140:	18979f17 	ldw	r2,24188(r3)
    if ((alt_fd_list[i].dev == fd->dev) &&
   15144:	10000c0e 	bge	r2,zero,15178 <alt_file_locked+0xac>
        (&alt_fd_list[i] != fd))
   15148:	e0ffff17 	ldw	r3,-4(fp)
   1514c:	1805883a 	mov	r2,r3
   15150:	1085883a 	add	r2,r2,r2
   15154:	10c5883a 	add	r2,r2,r3
   15158:	100490ba 	slli	r2,r2,2
   1515c:	00c00074 	movhi	r3,1
   15160:	18d79d04 	addi	r3,r3,24180
   15164:	10c5883a 	add	r2,r2,r3
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   15168:	e0fffe17 	ldw	r3,-8(fp)
   1516c:	18800226 	beq	r3,r2,15178 <alt_file_locked+0xac>
    {
      return -EACCES;
   15170:	00bffcc4 	movi	r2,-13
   15174:	00000806 	br	15198 <alt_file_locked+0xcc>
  for (i = 0; i <= alt_max_fd; i++)
   15178:	e0bfff17 	ldw	r2,-4(fp)
   1517c:	10800044 	addi	r2,r2,1
   15180:	e0bfff15 	stw	r2,-4(fp)
   15184:	d0a00817 	ldw	r2,-32736(gp)
   15188:	1007883a 	mov	r3,r2
   1518c:	e0bfff17 	ldw	r2,-4(fp)
   15190:	18bfd92e 	bgeu	r3,r2,150f8 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   15194:	0005883a 	mov	r2,zero
}
   15198:	e037883a 	mov	sp,fp
   1519c:	df000017 	ldw	fp,0(sp)
   151a0:	dec00104 	addi	sp,sp,4
   151a4:	f800283a 	ret

000151a8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   151a8:	defff604 	addi	sp,sp,-40
   151ac:	dfc00915 	stw	ra,36(sp)
   151b0:	df000815 	stw	fp,32(sp)
   151b4:	df000804 	addi	fp,sp,32
   151b8:	e13ffa15 	stw	r4,-24(fp)
   151bc:	e17ff915 	stw	r5,-28(fp)
   151c0:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   151c4:	00bfffc4 	movi	r2,-1
   151c8:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
   151cc:	00bffb44 	movi	r2,-19
   151d0:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
   151d4:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   151d8:	d1600604 	addi	r5,gp,-32744
   151dc:	e13ffa17 	ldw	r4,-24(fp)
   151e0:	00154fc0 	call	154fc <alt_find_dev>
   151e4:	e0bfff15 	stw	r2,-4(fp)
   151e8:	e0bfff17 	ldw	r2,-4(fp)
   151ec:	1000051e 	bne	r2,zero,15204 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   151f0:	e13ffa17 	ldw	r4,-24(fp)
   151f4:	001558c0 	call	1558c <alt_find_file>
   151f8:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
   151fc:	00800044 	movi	r2,1
   15200:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   15204:	e0bfff17 	ldw	r2,-4(fp)
   15208:	10002c26 	beq	r2,zero,152bc <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
   1520c:	e13fff17 	ldw	r4,-4(fp)
   15210:	00156940 	call	15694 <alt_get_fd>
   15214:	e0bffe15 	stw	r2,-8(fp)
   15218:	e0bffe17 	ldw	r2,-8(fp)
   1521c:	1000030e 	bge	r2,zero,1522c <open+0x84>
    {
      status = index;
   15220:	e0bffe17 	ldw	r2,-8(fp)
   15224:	e0bffd15 	stw	r2,-12(fp)
   15228:	00002606 	br	152c4 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
   1522c:	e0fffe17 	ldw	r3,-8(fp)
   15230:	1805883a 	mov	r2,r3
   15234:	1085883a 	add	r2,r2,r2
   15238:	10c5883a 	add	r2,r2,r3
   1523c:	100490ba 	slli	r2,r2,2
   15240:	00c00074 	movhi	r3,1
   15244:	18d79d04 	addi	r3,r3,24180
   15248:	10c5883a 	add	r2,r2,r3
   1524c:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   15250:	e0fff917 	ldw	r3,-28(fp)
   15254:	00900034 	movhi	r2,16384
   15258:	10bfffc4 	addi	r2,r2,-1
   1525c:	1886703a 	and	r3,r3,r2
   15260:	e0bffb17 	ldw	r2,-20(fp)
   15264:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   15268:	e0bffc17 	ldw	r2,-16(fp)
   1526c:	1000051e 	bne	r2,zero,15284 <open+0xdc>
   15270:	e13ffb17 	ldw	r4,-20(fp)
   15274:	00150cc0 	call	150cc <alt_file_locked>
   15278:	e0bffd15 	stw	r2,-12(fp)
   1527c:	e0bffd17 	ldw	r2,-12(fp)
   15280:	10001016 	blt	r2,zero,152c4 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   15284:	e0bfff17 	ldw	r2,-4(fp)
   15288:	10800317 	ldw	r2,12(r2)
   1528c:	10000826 	beq	r2,zero,152b0 <open+0x108>
   15290:	e0bfff17 	ldw	r2,-4(fp)
   15294:	10800317 	ldw	r2,12(r2)
   15298:	e1fff817 	ldw	r7,-32(fp)
   1529c:	e1bff917 	ldw	r6,-28(fp)
   152a0:	e17ffa17 	ldw	r5,-24(fp)
   152a4:	e13ffb17 	ldw	r4,-20(fp)
   152a8:	103ee83a 	callr	r2
   152ac:	00000106 	br	152b4 <open+0x10c>
   152b0:	0005883a 	mov	r2,zero
   152b4:	e0bffd15 	stw	r2,-12(fp)
   152b8:	00000206 	br	152c4 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   152bc:	00bffb44 	movi	r2,-19
   152c0:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   152c4:	e0bffd17 	ldw	r2,-12(fp)
   152c8:	1000090e 	bge	r2,zero,152f0 <open+0x148>
  {
    alt_release_fd (index);  
   152cc:	e13ffe17 	ldw	r4,-8(fp)
   152d0:	0013a280 	call	13a28 <alt_release_fd>
    ALT_ERRNO = -status;
   152d4:	00150900 	call	15090 <alt_get_errno>
   152d8:	1007883a 	mov	r3,r2
   152dc:	e0bffd17 	ldw	r2,-12(fp)
   152e0:	0085c83a 	sub	r2,zero,r2
   152e4:	18800015 	stw	r2,0(r3)
    return -1;
   152e8:	00bfffc4 	movi	r2,-1
   152ec:	00000106 	br	152f4 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
   152f0:	e0bffe17 	ldw	r2,-8(fp)
}
   152f4:	e037883a 	mov	sp,fp
   152f8:	dfc00117 	ldw	ra,4(sp)
   152fc:	df000017 	ldw	fp,0(sp)
   15300:	dec00204 	addi	sp,sp,8
   15304:	f800283a 	ret

00015308 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   15308:	defffa04 	addi	sp,sp,-24
   1530c:	df000515 	stw	fp,20(sp)
   15310:	df000504 	addi	fp,sp,20
   15314:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
   15318:	0005303a 	rdctl	r2,status
   1531c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15320:	e0fffc17 	ldw	r3,-16(fp)
   15324:	00bfff84 	movi	r2,-2
   15328:	1884703a 	and	r2,r3,r2
   1532c:	1001703a 	wrctl	status,r2
  return context;
   15330:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   15334:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
   15338:	e0bffb17 	ldw	r2,-20(fp)
   1533c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   15340:	e0bffd17 	ldw	r2,-12(fp)
   15344:	10800017 	ldw	r2,0(r2)
   15348:	e0fffd17 	ldw	r3,-12(fp)
   1534c:	18c00117 	ldw	r3,4(r3)
   15350:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   15354:	e0bffd17 	ldw	r2,-12(fp)
   15358:	10800117 	ldw	r2,4(r2)
   1535c:	e0fffd17 	ldw	r3,-12(fp)
   15360:	18c00017 	ldw	r3,0(r3)
   15364:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   15368:	e0bffd17 	ldw	r2,-12(fp)
   1536c:	e0fffd17 	ldw	r3,-12(fp)
   15370:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   15374:	e0bffd17 	ldw	r2,-12(fp)
   15378:	e0fffd17 	ldw	r3,-12(fp)
   1537c:	10c00015 	stw	r3,0(r2)
} 
   15380:	0001883a 	nop
   15384:	e0bfff17 	ldw	r2,-4(fp)
   15388:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
   1538c:	e0bffe17 	ldw	r2,-8(fp)
   15390:	1001703a 	wrctl	status,r2
}
   15394:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
   15398:	0001883a 	nop
   1539c:	e037883a 	mov	sp,fp
   153a0:	df000017 	ldw	fp,0(sp)
   153a4:	dec00104 	addi	sp,sp,4
   153a8:	f800283a 	ret

000153ac <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   153ac:	defff904 	addi	sp,sp,-28
   153b0:	dfc00615 	stw	ra,24(sp)
   153b4:	df000515 	stw	fp,20(sp)
   153b8:	dc400415 	stw	r17,16(sp)
   153bc:	dc000315 	stw	r16,12(sp)
   153c0:	df000504 	addi	fp,sp,20
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   153c4:	d0a00c17 	ldw	r2,-32720(gp)
   153c8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   153cc:	d125f517 	ldw	r4,-26668(gp)
   153d0:	d165f617 	ldw	r5,-26664(gp)
   153d4:	01800044 	movi	r6,1
   153d8:	000f883a 	mov	r7,zero
   153dc:	2185883a 	add	r2,r4,r6
   153e0:	1111803a 	cmpltu	r8,r2,r4
   153e4:	29c7883a 	add	r3,r5,r7
   153e8:	40c9883a 	add	r4,r8,r3
   153ec:	2007883a 	mov	r3,r4
   153f0:	1009883a 	mov	r4,r2
   153f4:	180b883a 	mov	r5,r3
   153f8:	d125f515 	stw	r4,-26668(gp)
   153fc:	d165f615 	stw	r5,-26664(gp)
 
  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   15400:	00002906 	br	154a8 <alt_tick+0xfc>
  {
    next = (alt_alarm*) alarm->llist.next;
   15404:	e0bffd17 	ldw	r2,-12(fp)
   15408:	10800017 	ldw	r2,0(r2)
   1540c:	e0bffc15 	stw	r2,-16(fp)
    
    /* if the alarm period has expired, make the callback */    
    if (alarm->time <= _alt_nticks)
   15410:	e13ffd17 	ldw	r4,-12(fp)
   15414:	20800217 	ldw	r2,8(r4)
   15418:	20c00317 	ldw	r3,12(r4)
   1541c:	d125f517 	ldw	r4,-26668(gp)
   15420:	d165f617 	ldw	r5,-26664(gp)
   15424:	28c01e36 	bltu	r5,r3,154a0 <alt_tick+0xf4>
   15428:	1940011e 	bne	r3,r5,15430 <alt_tick+0x84>
   1542c:	20801c36 	bltu	r4,r2,154a0 <alt_tick+0xf4>
    {
      next_callback = alarm->callback (alarm->context);
   15430:	e0bffd17 	ldw	r2,-12(fp)
   15434:	10800417 	ldw	r2,16(r2)
   15438:	e0fffd17 	ldw	r3,-12(fp)
   1543c:	18c00517 	ldw	r3,20(r3)
   15440:	1809883a 	mov	r4,r3
   15444:	103ee83a 	callr	r2
   15448:	e0bffb15 	stw	r2,-20(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   1544c:	e0bffb17 	ldw	r2,-20(fp)
   15450:	1000031e 	bne	r2,zero,15460 <alt_tick+0xb4>
      {
        alt_alarm_stop (alarm);
   15454:	e13ffd17 	ldw	r4,-12(fp)
   15458:	00153080 	call	15308 <alt_alarm_stop>
   1545c:	00001006 	br	154a0 <alt_tick+0xf4>
      }
      else
      {
        alarm->time += next_callback;
   15460:	e0bffd17 	ldw	r2,-12(fp)
   15464:	11000217 	ldw	r4,8(r2)
   15468:	11400317 	ldw	r5,12(r2)
   1546c:	e0bffb17 	ldw	r2,-20(fp)
   15470:	1021883a 	mov	r16,r2
   15474:	0023883a 	mov	r17,zero
   15478:	2405883a 	add	r2,r4,r16
   1547c:	110d803a 	cmpltu	r6,r2,r4
   15480:	2c47883a 	add	r3,r5,r17
   15484:	30c9883a 	add	r4,r6,r3
   15488:	2007883a 	mov	r3,r4
   1548c:	1009883a 	mov	r4,r2
   15490:	180b883a 	mov	r5,r3
   15494:	e0bffd17 	ldw	r2,-12(fp)
   15498:	11000215 	stw	r4,8(r2)
   1549c:	11400315 	stw	r5,12(r2)
      }
    }
    alarm = next;
   154a0:	e0bffc17 	ldw	r2,-16(fp)
   154a4:	e0bffd15 	stw	r2,-12(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
   154a8:	e0fffd17 	ldw	r3,-12(fp)
   154ac:	d0a00c04 	addi	r2,gp,-32720
   154b0:	18bfd41e 	bne	r3,r2,15404 <alt_tick+0x58>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   154b4:	0001883a 	nop
}
   154b8:	0001883a 	nop
   154bc:	e6fffe04 	addi	sp,fp,-8
   154c0:	dfc00317 	ldw	ra,12(sp)
   154c4:	df000217 	ldw	fp,8(sp)
   154c8:	dc400117 	ldw	r17,4(sp)
   154cc:	dc000017 	ldw	r16,0(sp)
   154d0:	dec00404 	addi	sp,sp,16
   154d4:	f800283a 	ret

000154d8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   154d8:	deffff04 	addi	sp,sp,-4
   154dc:	df000015 	stw	fp,0(sp)
   154e0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   154e4:	000170fa 	wrctl	ienable,zero
}
   154e8:	0001883a 	nop
   154ec:	e037883a 	mov	sp,fp
   154f0:	df000017 	ldw	fp,0(sp)
   154f4:	dec00104 	addi	sp,sp,4
   154f8:	f800283a 	ret

000154fc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   154fc:	defffa04 	addi	sp,sp,-24
   15500:	dfc00515 	stw	ra,20(sp)
   15504:	df000415 	stw	fp,16(sp)
   15508:	df000404 	addi	fp,sp,16
   1550c:	e13ffd15 	stw	r4,-12(fp)
   15510:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
   15514:	e0bffc17 	ldw	r2,-16(fp)
   15518:	10800017 	ldw	r2,0(r2)
   1551c:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   15520:	e13ffd17 	ldw	r4,-12(fp)
   15524:	00104000 	call	10400 <strlen>
   15528:	10800044 	addi	r2,r2,1
   1552c:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   15530:	00000d06 	br	15568 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   15534:	e0bfff17 	ldw	r2,-4(fp)
   15538:	10800217 	ldw	r2,8(r2)
   1553c:	e0fffe17 	ldw	r3,-8(fp)
   15540:	180d883a 	mov	r6,r3
   15544:	e17ffd17 	ldw	r5,-12(fp)
   15548:	1009883a 	mov	r4,r2
   1554c:	00157d40 	call	157d4 <memcmp>
   15550:	1000021e 	bne	r2,zero,1555c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   15554:	e0bfff17 	ldw	r2,-4(fp)
   15558:	00000706 	br	15578 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   1555c:	e0bfff17 	ldw	r2,-4(fp)
   15560:	10800017 	ldw	r2,0(r2)
   15564:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
   15568:	e0ffff17 	ldw	r3,-4(fp)
   1556c:	e0bffc17 	ldw	r2,-16(fp)
   15570:	18bff01e 	bne	r3,r2,15534 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
   15574:	0005883a 	mov	r2,zero
}
   15578:	e037883a 	mov	sp,fp
   1557c:	dfc00117 	ldw	ra,4(sp)
   15580:	df000017 	ldw	fp,0(sp)
   15584:	dec00204 	addi	sp,sp,8
   15588:	f800283a 	ret

0001558c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   1558c:	defffb04 	addi	sp,sp,-20
   15590:	dfc00415 	stw	ra,16(sp)
   15594:	df000315 	stw	fp,12(sp)
   15598:	df000304 	addi	fp,sp,12
   1559c:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   155a0:	d0a00417 	ldw	r2,-32752(gp)
   155a4:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   155a8:	00003106 	br	15670 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   155ac:	e0bfff17 	ldw	r2,-4(fp)
   155b0:	10800217 	ldw	r2,8(r2)
   155b4:	1009883a 	mov	r4,r2
   155b8:	00104000 	call	10400 <strlen>
   155bc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   155c0:	e0bfff17 	ldw	r2,-4(fp)
   155c4:	10c00217 	ldw	r3,8(r2)
   155c8:	e0bffe17 	ldw	r2,-8(fp)
   155cc:	10bfffc4 	addi	r2,r2,-1
   155d0:	1885883a 	add	r2,r3,r2
   155d4:	10800003 	ldbu	r2,0(r2)
   155d8:	10803fcc 	andi	r2,r2,255
   155dc:	1080201c 	xori	r2,r2,128
   155e0:	10bfe004 	addi	r2,r2,-128
   155e4:	10800bd8 	cmpnei	r2,r2,47
   155e8:	1000031e 	bne	r2,zero,155f8 <alt_find_file+0x6c>
    {
      len -= 1;
   155ec:	e0bffe17 	ldw	r2,-8(fp)
   155f0:	10bfffc4 	addi	r2,r2,-1
   155f4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   155f8:	e0bffe17 	ldw	r2,-8(fp)
   155fc:	e0fffd17 	ldw	r3,-12(fp)
   15600:	1885883a 	add	r2,r3,r2
   15604:	10800003 	ldbu	r2,0(r2)
   15608:	10803fcc 	andi	r2,r2,255
   1560c:	1080201c 	xori	r2,r2,128
   15610:	10bfe004 	addi	r2,r2,-128
   15614:	10800be0 	cmpeqi	r2,r2,47
   15618:	1000081e 	bne	r2,zero,1563c <alt_find_file+0xb0>
   1561c:	e0bffe17 	ldw	r2,-8(fp)
   15620:	e0fffd17 	ldw	r3,-12(fp)
   15624:	1885883a 	add	r2,r3,r2
   15628:	10800003 	ldbu	r2,0(r2)
   1562c:	10803fcc 	andi	r2,r2,255
   15630:	1080201c 	xori	r2,r2,128
   15634:	10bfe004 	addi	r2,r2,-128
   15638:	10000a1e 	bne	r2,zero,15664 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   1563c:	e0bfff17 	ldw	r2,-4(fp)
   15640:	10800217 	ldw	r2,8(r2)
   15644:	e0fffe17 	ldw	r3,-8(fp)
   15648:	180d883a 	mov	r6,r3
   1564c:	e17ffd17 	ldw	r5,-12(fp)
   15650:	1009883a 	mov	r4,r2
   15654:	00157d40 	call	157d4 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
   15658:	1000021e 	bne	r2,zero,15664 <alt_find_file+0xd8>
    {
      /* match found */

      return next;
   1565c:	e0bfff17 	ldw	r2,-4(fp)
   15660:	00000706 	br	15680 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   15664:	e0bfff17 	ldw	r2,-4(fp)
   15668:	10800017 	ldw	r2,0(r2)
   1566c:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
   15670:	e0ffff17 	ldw	r3,-4(fp)
   15674:	d0a00404 	addi	r2,gp,-32752
   15678:	18bfcc1e 	bne	r3,r2,155ac <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
   1567c:	0005883a 	mov	r2,zero
}
   15680:	e037883a 	mov	sp,fp
   15684:	dfc00117 	ldw	ra,4(sp)
   15688:	df000017 	ldw	fp,0(sp)
   1568c:	dec00204 	addi	sp,sp,8
   15690:	f800283a 	ret

00015694 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   15694:	defffc04 	addi	sp,sp,-16
   15698:	df000315 	stw	fp,12(sp)
   1569c:	df000304 	addi	fp,sp,12
   156a0:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
   156a4:	00bffa04 	movi	r2,-24
   156a8:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   156ac:	e03fff15 	stw	zero,-4(fp)
   156b0:	00001d06 	br	15728 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
   156b4:	e0ffff17 	ldw	r3,-4(fp)
   156b8:	1805883a 	mov	r2,r3
   156bc:	1085883a 	add	r2,r2,r2
   156c0:	10c5883a 	add	r2,r2,r3
   156c4:	100490ba 	slli	r2,r2,2
   156c8:	00c00074 	movhi	r3,1
   156cc:	10c7883a 	add	r3,r2,r3
   156d0:	18979d17 	ldw	r2,24180(r3)
   156d4:	1000111e 	bne	r2,zero,1571c <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
   156d8:	e0ffff17 	ldw	r3,-4(fp)
   156dc:	1805883a 	mov	r2,r3
   156e0:	1085883a 	add	r2,r2,r2
   156e4:	10c5883a 	add	r2,r2,r3
   156e8:	100490ba 	slli	r2,r2,2
   156ec:	e13ffd17 	ldw	r4,-12(fp)
   156f0:	00c00074 	movhi	r3,1
   156f4:	10c7883a 	add	r3,r2,r3
   156f8:	19179d15 	stw	r4,24180(r3)
      if (i > alt_max_fd)
   156fc:	d0e00817 	ldw	r3,-32736(gp)
   15700:	e0bfff17 	ldw	r2,-4(fp)
   15704:	1880020e 	bge	r3,r2,15710 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
   15708:	e0bfff17 	ldw	r2,-4(fp)
   1570c:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
   15710:	e0bfff17 	ldw	r2,-4(fp)
   15714:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   15718:	00000706 	br	15738 <alt_get_fd+0xa4>
  for (i = 0; i < ALT_MAX_FD; i++)
   1571c:	e0bfff17 	ldw	r2,-4(fp)
   15720:	10800044 	addi	r2,r2,1
   15724:	e0bfff15 	stw	r2,-4(fp)
   15728:	e0bfff17 	ldw	r2,-4(fp)
   1572c:	10800810 	cmplti	r2,r2,32
   15730:	103fe01e 	bne	r2,zero,156b4 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
   15734:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   15738:	e0bffe17 	ldw	r2,-8(fp)
}
   1573c:	e037883a 	mov	sp,fp
   15740:	df000017 	ldw	fp,0(sp)
   15744:	dec00104 	addi	sp,sp,4
   15748:	f800283a 	ret

0001574c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   1574c:	defffe04 	addi	sp,sp,-8
   15750:	df000115 	stw	fp,4(sp)
   15754:	df000104 	addi	fp,sp,4
   15758:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   1575c:	e0bfff17 	ldw	r2,-4(fp)
   15760:	10bffe84 	addi	r2,r2,-6
   15764:	10c00428 	cmpgeui	r3,r2,16
   15768:	18c03fcc 	andi	r3,r3,255
   1576c:	18000f1e 	bne	r3,zero,157ac <alt_exception_cause_generated_bad_addr+0x60>
   15770:	00c00044 	movi	r3,1
   15774:	1884983a 	sll	r2,r3,r2
   15778:	10e2c8cc 	andi	r3,r2,35619
   1577c:	1806c03a 	cmpne	r3,r3,zero
   15780:	18c03fcc 	andi	r3,r3,255
   15784:	1800051e 	bne	r3,zero,1579c <alt_exception_cause_generated_bad_addr+0x50>
   15788:	1084100c 	andi	r2,r2,4160
   1578c:	1004c03a 	cmpne	r2,r2,zero
   15790:	10803fcc 	andi	r2,r2,255
   15794:	1000031e 	bne	r2,zero,157a4 <alt_exception_cause_generated_bad_addr+0x58>
   15798:	00000406 	br	157ac <alt_exception_cause_generated_bad_addr+0x60>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   1579c:	00800044 	movi	r2,1
   157a0:	00000306 	br	157b0 <alt_exception_cause_generated_bad_addr+0x64>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   157a4:	0005883a 	mov	r2,zero
   157a8:	00000106 	br	157b0 <alt_exception_cause_generated_bad_addr+0x64>

  default:
    return 0;
   157ac:	0005883a 	mov	r2,zero
  }
}
   157b0:	e037883a 	mov	sp,fp
   157b4:	df000017 	ldw	fp,0(sp)
   157b8:	dec00104 	addi	sp,sp,4
   157bc:	f800283a 	ret

000157c0 <atexit>:
   157c0:	200b883a 	mov	r5,r4
   157c4:	000f883a 	mov	r7,zero
   157c8:	000d883a 	mov	r6,zero
   157cc:	0009883a 	mov	r4,zero
   157d0:	001584c1 	jmpi	1584c <__register_exitproc>

000157d4 <memcmp>:
   157d4:	30800128 	cmpgeui	r2,r6,4
   157d8:	10000d26 	beq	r2,zero,15810 <memcmp+0x3c>
   157dc:	2144b03a 	or	r2,r4,r5
   157e0:	108000cc 	andi	r2,r2,3
   157e4:	10000726 	beq	r2,zero,15804 <memcmp+0x30>
   157e8:	30bfffc4 	addi	r2,r6,-1
   157ec:	00000a06 	br	15818 <memcmp+0x44>
   157f0:	31bfff04 	addi	r6,r6,-4
   157f4:	30800128 	cmpgeui	r2,r6,4
   157f8:	21000104 	addi	r4,r4,4
   157fc:	29400104 	addi	r5,r5,4
   15800:	10000326 	beq	r2,zero,15810 <memcmp+0x3c>
   15804:	20c00017 	ldw	r3,0(r4)
   15808:	28800017 	ldw	r2,0(r5)
   1580c:	18bff826 	beq	r3,r2,157f0 <memcmp+0x1c>
   15810:	30bfffc4 	addi	r2,r6,-1
   15814:	30000b26 	beq	r6,zero,15844 <memcmp+0x70>
   15818:	11800044 	addi	r6,r2,1
   1581c:	218d883a 	add	r6,r4,r6
   15820:	00000106 	br	15828 <memcmp+0x54>
   15824:	21800726 	beq	r4,r6,15844 <memcmp+0x70>
   15828:	20800003 	ldbu	r2,0(r4)
   1582c:	28c00003 	ldbu	r3,0(r5)
   15830:	21000044 	addi	r4,r4,1
   15834:	29400044 	addi	r5,r5,1
   15838:	10fffa26 	beq	r2,r3,15824 <memcmp+0x50>
   1583c:	10c5c83a 	sub	r2,r2,r3
   15840:	f800283a 	ret
   15844:	0005883a 	mov	r2,zero
   15848:	f800283a 	ret

0001584c <__register_exitproc>:
   1584c:	008000b4 	movhi	r2,2
   15850:	10a20417 	ldw	r2,-30704(r2)
   15854:	10001726 	beq	r2,zero,158b4 <__register_exitproc+0x68>
   15858:	10c00117 	ldw	r3,4(r2)
   1585c:	1a000808 	cmpgei	r8,r3,32
   15860:	40001d1e 	bne	r8,zero,158d8 <__register_exitproc+0x8c>
   15864:	20000b26 	beq	r4,zero,15894 <__register_exitproc+0x48>
   15868:	181090ba 	slli	r8,r3,2
   1586c:	02400044 	movi	r9,1
   15870:	48d2983a 	sll	r9,r9,r3
   15874:	1211883a 	add	r8,r2,r8
   15878:	41802215 	stw	r6,136(r8)
   1587c:	11806217 	ldw	r6,392(r2)
   15880:	21000098 	cmpnei	r4,r4,2
   15884:	324cb03a 	or	r6,r6,r9
   15888:	11806215 	stw	r6,392(r2)
   1588c:	41c04215 	stw	r7,264(r8)
   15890:	20000d26 	beq	r4,zero,158c8 <__register_exitproc+0x7c>
   15894:	19000084 	addi	r4,r3,2
   15898:	200890ba 	slli	r4,r4,2
   1589c:	18c00044 	addi	r3,r3,1
   158a0:	10c00115 	stw	r3,4(r2)
   158a4:	1105883a 	add	r2,r2,r4
   158a8:	11400015 	stw	r5,0(r2)
   158ac:	0005883a 	mov	r2,zero
   158b0:	f800283a 	ret
   158b4:	008000b4 	movhi	r2,2
   158b8:	10a2a504 	addi	r2,r2,-30060
   158bc:	00c000b4 	movhi	r3,2
   158c0:	18a20415 	stw	r2,-30704(r3)
   158c4:	003fe406 	br	15858 <__register_exitproc+0xc>
   158c8:	11006317 	ldw	r4,396(r2)
   158cc:	2248b03a 	or	r4,r4,r9
   158d0:	11006315 	stw	r4,396(r2)
   158d4:	003fef06 	br	15894 <__register_exitproc+0x48>
   158d8:	00bfffc4 	movi	r2,-1
   158dc:	f800283a 	ret
